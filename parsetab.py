
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN CHAR CLOSE_BRACES CLOSE_BRACKETS CLOSE_PAREN COMMA CT_CHAR CT_FLOAT CT_INT CT_STRING DIVIDE DO ELSE EQUALS FLOAT FOR ID IF INT LESS_THAN LESS_THAN_EQUAL MAIN MINUS MODULE MORE_THAN MORE_THAN_EQUAL MULTIPLIES NOT_EQUALS OPEN_BRACES OPEN_BRACKETS OPEN_PAREN OR PLUS PROGRAM READ RETURN SEMICOLON THEN TO VARS VOID WHILE WRITEprogram : PROGRAM g_main_quad ID add_program SEMICOLON vars funcs main end_programadd_program : end_program : main : MAIN OPEN_PAREN CLOSE_PAREN fill_main_quad blockg_main_quad :fill_main_quad :funcs : func_type MODULE ID add_module OPEN_PAREN funcs_params CLOSE_PAREN add_parameter_amount vars count_local_vars block end_funcs funcs\n    | empty\n    end_funcs :count_local_vars :add_module :funcs_comp : ID add_module OPEN_PAREN funcs_params CLOSE_PAREN add_parameter_amount vars count_local_vars block end_funcs funcsadd_parameter_amount :funcs_params : var_type variable_params funcs_params_comp\n    | empty\n    funcs_params_comp : COMMA var_type variable_params funcs_params_comp\n    | empty\n    variable_params : ID\n    | ID dim\n    block : OPEN_BRACES statements CLOSE_BRACESfunc_type : var_type\n    | VOID\n    var_type : INT\n    | FLOAT\n    | CHAR\n    vars : VARS var_comp\n    | empty\n    var_comp : var_type ids_dec var_comp_2 var_comp_final\n    | var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive\n    var_comp_2 : COMMA ids_dec var_comp_3\n    | empty\n    var_comp_3 : var_comp_2var_comp_recursive : var_type ids_dec var_comp_2 var_comp_final\n    | var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive\n    var_comp_final : SEMICOLON\n    | var_module_trans\n    var_module_trans : SEMICOLON var_type MODULE funcs_comp\n    ids_dec : ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS\n    | ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS\n    | ID\n    ids : ID OPEN_BRACKETS exp CLOSE_BRACKETS OPEN_BRACKETS exp CLOSE_BRACKETS\n    | ID OPEN_BRACKETS exp CLOSE_BRACKETS\n    | ID\n    statements : assignment SEMICOLON statements\n    | read SEMICOLON statements \n    | write SEMICOLON statements\n    | condition statements\n    | return SEMICOLON statements\n    | func_call SEMICOLON statements\n    | empty\n    assignment : ids ASSIGN expressionsread : READ OPEN_PAREN ids g_quad_read read_comp CLOSE_PARENread_comp : COMMA ids g_quad_read read_comp\n    | empty \n    g_quad_read : write : WRITE OPEN_PAREN CT_STRING g_quad_write_str write_comp CLOSE_PAREN\n    | WRITE OPEN_PAREN expressions g_quad_write write_comp CLOSE_PAREN\n    write_comp : COMMA CT_STRING g_quad_write_str write_comp\n    | COMMA expressions g_quad_write write_comp\n    | empty\n    g_quad_write_str : g_quad_write : end_if : condition : IF OPEN_PAREN expressions CLOSE_PAREN g_if_quad THEN block end_if\n    | IF OPEN_PAREN expressions CLOSE_PAREN g_if_quad THEN block ELSE g_else_quad block end_if\n    | WHILE while_jump OPEN_PAREN expressions CLOSE_PAREN g_while_quad DO block end_while\n    | FOR ids validate_for ASSIGN expressions for_counter_control TO expressions for_counter_end DO block end_for\n    g_if_quad :g_else_quad :while_jump :g_while_quad :end_while :validate_for :for_counter_control :for_counter_end :end_for :return : RETURN OPEN_PAREN expressions CLOSE_PAREN return_endreturn_end :func_call : ID verify_function_exists OPEN_PAREN era_activation func_call_comp CLOSE_PAREN g_gosub_quad change_to_global\n    g_gosub_quad :change_to_global :verify_function_exists :era_activation :func_call_comp : expressions g_parameter_quad func_call_comp\n    | COMMA expressions g_parameter_quad func_call_comp\n    | empty\n    g_parameter_quad :parameter_check_comma :expressions : expressions_compexpressions_comp : expression_comp_2\n    | expression_comp_2 OR expressions_comp\n    expression_comp_2 : expression_comp_3\n    | expression_comp_3 AND expression_comp_2\n    expression_comp_3 : exp expressions_op exp g_quad_logic\n    | exp\n    g_quad_logic : expressions_op : LESS_THAN add_op\n    | LESS_THAN_EQUAL add_op\n    | MORE_THAN add_op\n    | MORE_THAN_EQUAL add_op\n    | EQUALS add_op\n    | NOT_EQUALS add_op\n    exp : term g_quad_exp_as_alone\n    | term g_quad_exp_as exp_comp\n    g_quad_exp_as : g_quad_exp_as_alone : exp_comp : PLUS add_op exp\n    | MINUS add_op exp\n    term : factor g_quad_exp_md_alone\n    | factor g_quad_exp_md term_comp\n    g_quad_exp_md : g_quad_exp_md_alone : term_comp : MULTIPLIES add_op term\n    | DIVIDE add_op term\n    add_op : factor : OPEN_PAREN add_fake expressions CLOSE_PAREN rem_fake\n    | variable \n    | func_call\n    | CT_INT add_ct_int\n    | CT_FLOAT add_ct_float\n    | CT_CHAR add_ct_char\n    add_fake : rem_fake : add_ct_int : add_ct_float : add_ct_char : variable : ID add_id\n    | ID dim\n    add_id : dim : OPEN_BRACKETS exp CLOSE_BRACKETSempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,20,25,46,77,],[0,-3,-1,-4,-20,]),'ID':([2,3,15,16,17,19,22,29,41,47,49,51,58,67,77,78,79,80,82,83,84,85,86,87,91,93,99,110,111,112,113,114,115,116,117,118,119,120,121,122,127,130,133,137,138,139,140,141,142,143,144,145,146,148,150,151,152,153,154,155,161,163,167,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,186,189,197,198,200,204,205,206,207,208,209,219,220,221,225,226,227,228,229,233,235,236,238,245,247,249,253,256,259,260,262,],[-5,4,-23,-24,-25,24,27,24,24,69,72,74,69,90,-20,69,69,69,69,69,122,90,122,122,122,122,122,-89,-90,-92,-95,-106,-112,-122,-117,-118,-124,-125,-126,-129,122,-83,72,122,122,122,-115,-115,-115,-115,-115,-115,-103,-109,122,-119,-120,-121,-127,-128,122,122,-130,-91,-93,-96,-97,-98,-99,-100,-101,-102,-104,-115,-115,-110,-115,-115,90,122,-87,122,122,-94,122,122,122,122,-123,-80,122,-87,-107,-108,-113,-114,-116,-63,122,-81,122,-64,-72,-79,-66,-63,-65,-76,-67,]),'SEMICOLON':([4,5,23,24,28,30,37,43,44,45,52,55,56,57,59,60,75,103,109,110,111,112,113,114,115,117,118,119,120,121,122,146,148,151,152,153,154,155,162,167,169,170,171,178,181,195,204,209,210,212,215,219,225,226,227,228,229,236,249,],[-2,6,-131,-40,35,-31,-131,-30,-32,-39,-131,78,79,80,82,83,102,-38,-51,-89,-90,-92,-95,-106,-112,-117,-118,-124,-125,-126,-129,-103,-109,-119,-120,-121,-127,-128,-78,-130,-91,-93,-96,-104,-110,-77,-94,-123,-52,-56,-57,-80,-107,-108,-113,-114,-116,-81,-79,]),'VARS':([6,70,94,203,224,],[8,-13,8,-13,8,]),'VOID':([6,7,9,12,18,34,35,36,42,73,77,101,102,136,201,223,240,255,258,261,],[-131,14,-27,-8,-26,-28,-35,-36,-29,-37,-20,-33,-35,-34,-9,14,-7,-9,14,-12,]),'INT':([6,7,8,9,12,18,34,35,36,40,42,73,77,96,101,102,135,136,201,223,240,255,258,261,],[-131,15,15,-27,-8,-26,-28,15,-36,15,-29,-37,-20,15,-33,15,15,-34,-9,15,-7,-9,15,-12,]),'FLOAT':([6,7,8,9,12,18,34,35,36,40,42,73,77,96,101,102,135,136,201,223,240,255,258,261,],[-131,16,16,-27,-8,-26,-28,16,-36,16,-29,-37,-20,16,-33,16,16,-34,-9,16,-7,-9,16,-12,]),'CHAR':([6,7,8,9,12,18,34,35,36,40,42,73,77,96,101,102,135,136,201,223,240,255,258,261,],[-131,17,17,-27,-8,-26,-28,17,-36,17,-29,-37,-20,17,-33,17,17,-34,-9,17,-7,-9,17,-12,]),'MAIN':([6,7,9,10,12,18,34,35,36,42,73,77,101,102,136,201,223,240,255,258,261,],[-131,-131,-27,21,-8,-26,-28,-35,-36,-29,-37,-20,-33,-35,-34,-9,-131,-7,-9,-131,-12,]),'OPEN_BRACES':([9,12,18,32,34,35,36,39,42,70,73,77,94,101,102,132,136,165,201,203,216,223,224,234,240,241,246,251,252,255,257,258,261,],[-27,-8,-26,-6,-28,-35,-36,47,-29,-13,-37,-20,-131,-33,-35,-10,-34,47,-9,-13,47,-131,-131,47,-7,-10,-69,47,47,-9,47,-131,-12,]),'MODULE':([11,13,14,15,16,17,41,],[22,-21,-22,-23,-24,-25,51,]),'OPEN_PAREN':([21,27,33,63,64,65,66,68,69,74,84,86,87,88,91,92,93,99,100,110,111,112,113,114,115,116,117,118,119,120,121,122,127,130,137,138,139,140,141,142,143,144,145,146,148,150,151,152,153,154,155,161,163,167,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,189,197,198,200,204,205,206,207,208,209,219,220,221,225,226,227,228,229,235,236,238,249,],[26,-11,40,85,86,87,-70,91,-82,-11,116,116,116,127,116,130,116,116,135,-89,-90,-92,-95,-106,-112,-122,-117,-118,-124,-125,-126,-82,116,-83,116,116,116,-115,-115,-115,-115,-115,-115,-103,-109,116,-119,-120,-121,-127,-128,116,116,-130,-91,-93,-96,-97,-98,-99,-100,-101,-102,-104,-115,-115,-110,-115,-115,116,-87,116,116,-94,116,116,116,116,-123,-80,116,-87,-107,-108,-113,-114,-116,116,-81,116,-79,]),'COMMA':([23,24,37,45,52,71,72,90,98,103,110,111,112,113,114,115,117,118,119,120,121,122,123,124,125,130,146,148,151,152,153,154,155,156,157,158,163,164,166,167,169,170,171,178,181,197,204,209,211,213,214,219,220,221,225,226,227,228,229,230,231,232,236,238,239,249,],[29,-40,29,-39,29,96,-18,-43,-19,-38,-89,-90,-92,-95,-106,-112,-117,-118,-124,-125,-126,-129,-55,-61,-62,-83,-103,-109,-119,-120,-121,-127,-128,186,189,189,198,-42,96,-130,-91,-93,-96,-104,-110,-87,-94,-123,-55,-61,-62,-80,198,-87,-107,-108,-113,-114,-116,186,189,189,-81,198,-41,-79,]),'OPEN_BRACKETS':([24,45,69,72,90,122,164,],[31,53,93,99,93,99,200,]),'CLOSE_PAREN':([26,40,48,50,71,72,90,95,97,98,110,111,112,113,114,115,117,118,119,120,121,122,123,124,125,126,129,130,135,146,148,151,152,153,154,155,156,157,158,160,163,164,166,167,168,169,170,171,178,181,184,185,187,188,190,191,196,197,199,202,204,209,211,213,214,219,220,221,225,226,227,228,229,230,231,232,236,237,238,239,242,243,244,249,250,],[32,-131,70,-15,-131,-18,-43,-14,-17,-19,-89,-90,-92,-95,-106,-112,-117,-118,-124,-125,-126,-129,-55,-61,-62,159,162,-83,-131,-103,-109,-119,-120,-121,-127,-128,-131,-131,-131,193,-131,-42,-131,-130,203,-91,-93,-96,-104,-110,209,210,-54,212,-60,215,219,-87,-86,-16,-94,-123,-55,-61,-62,-80,-131,-87,-107,-108,-113,-114,-116,-131,-131,-131,-81,-84,-131,-41,-53,-58,-59,-79,-85,]),'CT_INT':([31,53,84,86,87,91,93,99,110,111,112,113,114,115,116,117,118,119,120,121,122,127,130,137,138,139,140,141,142,143,144,145,146,148,150,151,152,153,154,155,161,163,167,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,189,197,198,200,204,205,206,207,208,209,219,220,221,225,226,227,228,229,235,236,238,249,],[38,76,119,119,119,119,119,119,-89,-90,-92,-95,-106,-112,-122,-117,-118,-124,-125,-126,-129,119,-83,119,119,119,-115,-115,-115,-115,-115,-115,-103,-109,119,-119,-120,-121,-127,-128,119,119,-130,-91,-93,-96,-97,-98,-99,-100,-101,-102,-104,-115,-115,-110,-115,-115,119,-87,119,119,-94,119,119,119,119,-123,-80,119,-87,-107,-108,-113,-114,-116,119,-81,119,-79,]),'CLOSE_BRACKETS':([38,76,114,115,117,118,119,120,121,122,131,134,146,148,151,152,153,154,155,167,178,181,209,219,222,225,226,227,228,229,236,249,],[45,103,-106,-112,-117,-118,-124,-125,-126,-129,164,167,-103,-109,-119,-120,-121,-127,-128,-130,-104,-110,-123,-80,239,-107,-108,-113,-114,-116,-81,-79,]),'READ':([47,58,77,78,79,80,82,83,233,245,247,253,256,259,260,262,],[63,63,-20,63,63,63,63,63,-63,-64,-72,-66,-63,-65,-76,-67,]),'WRITE':([47,58,77,78,79,80,82,83,233,245,247,253,256,259,260,262,],[64,64,-20,64,64,64,64,64,-63,-64,-72,-66,-63,-65,-76,-67,]),'IF':([47,58,77,78,79,80,82,83,233,245,247,253,256,259,260,262,],[65,65,-20,65,65,65,65,65,-63,-64,-72,-66,-63,-65,-76,-67,]),'WHILE':([47,58,77,78,79,80,82,83,233,245,247,253,256,259,260,262,],[66,66,-20,66,66,66,66,66,-63,-64,-72,-66,-63,-65,-76,-67,]),'FOR':([47,58,77,78,79,80,82,83,233,245,247,253,256,259,260,262,],[67,67,-20,67,67,67,67,67,-63,-64,-72,-66,-63,-65,-76,-67,]),'RETURN':([47,58,77,78,79,80,82,83,233,245,247,253,256,259,260,262,],[68,68,-20,68,68,68,68,68,-63,-64,-72,-66,-63,-65,-76,-67,]),'CLOSE_BRACES':([47,54,58,61,77,78,79,80,81,82,83,104,105,106,107,108,233,245,247,253,256,259,260,262,],[-131,77,-131,-50,-20,-131,-131,-131,-47,-131,-131,-44,-45,-46,-48,-49,-63,-64,-72,-66,-63,-65,-76,-67,]),'ASSIGN':([62,69,89,90,128,164,239,],[84,-43,-73,-43,161,-42,-41,]),'ELSE':([77,233,],[-20,246,]),'CT_FLOAT':([84,86,87,91,93,99,110,111,112,113,114,115,116,117,118,119,120,121,122,127,130,137,138,139,140,141,142,143,144,145,146,148,150,151,152,153,154,155,161,163,167,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,189,197,198,200,204,205,206,207,208,209,219,220,221,225,226,227,228,229,235,236,238,249,],[120,120,120,120,120,120,-89,-90,-92,-95,-106,-112,-122,-117,-118,-124,-125,-126,-129,120,-83,120,120,120,-115,-115,-115,-115,-115,-115,-103,-109,120,-119,-120,-121,-127,-128,120,120,-130,-91,-93,-96,-97,-98,-99,-100,-101,-102,-104,-115,-115,-110,-115,-115,120,-87,120,120,-94,120,120,120,120,-123,-80,120,-87,-107,-108,-113,-114,-116,120,-81,120,-79,]),'CT_CHAR':([84,86,87,91,93,99,110,111,112,113,114,115,116,117,118,119,120,121,122,127,130,137,138,139,140,141,142,143,144,145,146,148,150,151,152,153,154,155,161,163,167,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,189,197,198,200,204,205,206,207,208,209,219,220,221,225,226,227,228,229,235,236,238,249,],[121,121,121,121,121,121,-89,-90,-92,-95,-106,-112,-122,-117,-118,-124,-125,-126,-129,121,-83,121,121,121,-115,-115,-115,-115,-115,-115,-103,-109,121,-119,-120,-121,-127,-128,121,121,-130,-91,-93,-96,-97,-98,-99,-100,-101,-102,-104,-115,-115,-110,-115,-115,121,-87,121,121,-94,121,121,121,121,-123,-80,121,-87,-107,-108,-113,-114,-116,121,-81,121,-79,]),'CT_STRING':([86,189,],[124,213,]),'TO':([110,111,112,113,114,115,117,118,119,120,121,122,146,148,151,152,153,154,155,167,169,170,171,178,181,194,204,209,218,219,225,226,227,228,229,236,249,],[-89,-90,-92,-95,-106,-112,-117,-118,-124,-125,-126,-129,-103,-109,-119,-120,-121,-127,-128,-130,-91,-93,-96,-104,-110,-74,-94,-123,235,-80,-107,-108,-113,-114,-116,-81,-79,]),'DO':([110,111,112,113,114,115,117,118,119,120,121,122,146,148,151,152,153,154,155,167,169,170,171,178,181,193,204,209,217,219,225,226,227,228,229,236,248,249,254,],[-89,-90,-92,-95,-106,-112,-117,-118,-124,-125,-126,-129,-103,-109,-119,-120,-121,-127,-128,-130,-91,-93,-96,-104,-110,-71,-94,-123,234,-80,-107,-108,-113,-114,-116,-81,-75,-79,257,]),'OR':([111,112,113,114,115,117,118,119,120,121,122,146,148,151,152,153,154,155,167,170,171,178,181,204,209,219,225,226,227,228,229,236,249,],[137,-92,-95,-106,-112,-117,-118,-124,-125,-126,-129,-103,-109,-119,-120,-121,-127,-128,-130,-93,-96,-104,-110,-94,-123,-80,-107,-108,-113,-114,-116,-81,-79,]),'AND':([112,113,114,115,117,118,119,120,121,122,146,148,151,152,153,154,155,167,171,178,181,204,209,219,225,226,227,228,229,236,249,],[138,-95,-106,-112,-117,-118,-124,-125,-126,-129,-103,-109,-119,-120,-121,-127,-128,-130,-96,-104,-110,-94,-123,-80,-107,-108,-113,-114,-116,-81,-79,]),'LESS_THAN':([113,114,115,117,118,119,120,121,122,146,148,151,152,153,154,155,167,178,181,209,219,225,226,227,228,229,236,249,],[140,-106,-112,-117,-118,-124,-125,-126,-129,-103,-109,-119,-120,-121,-127,-128,-130,-104,-110,-123,-80,-107,-108,-113,-114,-116,-81,-79,]),'LESS_THAN_EQUAL':([113,114,115,117,118,119,120,121,122,146,148,151,152,153,154,155,167,178,181,209,219,225,226,227,228,229,236,249,],[141,-106,-112,-117,-118,-124,-125,-126,-129,-103,-109,-119,-120,-121,-127,-128,-130,-104,-110,-123,-80,-107,-108,-113,-114,-116,-81,-79,]),'MORE_THAN':([113,114,115,117,118,119,120,121,122,146,148,151,152,153,154,155,167,178,181,209,219,225,226,227,228,229,236,249,],[142,-106,-112,-117,-118,-124,-125,-126,-129,-103,-109,-119,-120,-121,-127,-128,-130,-104,-110,-123,-80,-107,-108,-113,-114,-116,-81,-79,]),'MORE_THAN_EQUAL':([113,114,115,117,118,119,120,121,122,146,148,151,152,153,154,155,167,178,181,209,219,225,226,227,228,229,236,249,],[143,-106,-112,-117,-118,-124,-125,-126,-129,-103,-109,-119,-120,-121,-127,-128,-130,-104,-110,-123,-80,-107,-108,-113,-114,-116,-81,-79,]),'EQUALS':([113,114,115,117,118,119,120,121,122,146,148,151,152,153,154,155,167,178,181,209,219,225,226,227,228,229,236,249,],[144,-106,-112,-117,-118,-124,-125,-126,-129,-103,-109,-119,-120,-121,-127,-128,-130,-104,-110,-123,-80,-107,-108,-113,-114,-116,-81,-79,]),'NOT_EQUALS':([113,114,115,117,118,119,120,121,122,146,148,151,152,153,154,155,167,178,181,209,219,225,226,227,228,229,236,249,],[145,-106,-112,-117,-118,-124,-125,-126,-129,-103,-109,-119,-120,-121,-127,-128,-130,-104,-110,-123,-80,-107,-108,-113,-114,-116,-81,-79,]),'PLUS':([114,115,117,118,119,120,121,122,147,148,151,152,153,154,155,167,181,209,219,227,228,229,236,249,],[-105,-112,-117,-118,-124,-125,-126,-129,179,-109,-119,-120,-121,-127,-128,-130,-110,-123,-80,-113,-114,-116,-81,-79,]),'MINUS':([114,115,117,118,119,120,121,122,147,148,151,152,153,154,155,167,181,209,219,227,228,229,236,249,],[-105,-112,-117,-118,-124,-125,-126,-129,180,-109,-119,-120,-121,-127,-128,-130,-110,-123,-80,-113,-114,-116,-81,-79,]),'MULTIPLIES':([115,117,118,119,120,121,122,149,151,152,153,154,155,167,209,219,229,236,249,],[-111,-117,-118,-124,-125,-126,-129,182,-119,-120,-121,-127,-128,-130,-123,-80,-116,-81,-79,]),'DIVIDE':([115,117,118,119,120,121,122,149,151,152,153,154,155,167,209,219,229,236,249,],[-111,-117,-118,-124,-125,-126,-129,183,-119,-120,-121,-127,-128,-130,-123,-80,-116,-81,-79,]),'THEN':([159,192,],[-68,216,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'g_main_quad':([2,],[3,]),'add_program':([4,],[5,]),'vars':([6,94,224,],[7,132,241,]),'empty':([6,7,23,37,40,47,52,58,71,78,79,80,82,83,94,135,156,157,158,163,166,220,223,224,230,231,232,238,258,],[9,12,30,30,50,61,30,61,97,61,61,61,61,61,9,50,187,190,190,199,97,199,12,9,187,190,190,199,12,]),'funcs':([7,223,258,],[10,240,261,]),'func_type':([7,223,258,],[11,11,11,]),'var_type':([7,8,35,40,96,102,135,223,258,],[13,19,41,49,133,41,49,13,13,]),'var_comp':([8,],[18,]),'main':([10,],[20,]),'ids_dec':([19,29,41,],[23,37,52,]),'end_program':([20,],[25,]),'var_comp_2':([23,37,52,],[28,44,75,]),'add_module':([27,74,],[33,100,]),'var_comp_final':([28,75,],[34,101,]),'var_module_trans':([28,75,],[36,36,]),'fill_main_quad':([32,],[39,]),'var_comp_recursive':([35,102,],[42,136,]),'var_comp_3':([37,],[43,]),'block':([39,165,216,234,251,252,257,],[46,201,233,247,255,256,260,]),'funcs_params':([40,135,],[48,168,]),'statements':([47,58,78,79,80,82,83,],[54,81,104,105,106,107,108,]),'assignment':([47,58,78,79,80,82,83,],[55,55,55,55,55,55,55,]),'read':([47,58,78,79,80,82,83,],[56,56,56,56,56,56,56,]),'write':([47,58,78,79,80,82,83,],[57,57,57,57,57,57,57,]),'condition':([47,58,78,79,80,82,83,],[58,58,58,58,58,58,58,]),'return':([47,58,78,79,80,82,83,],[59,59,59,59,59,59,59,]),'func_call':([47,58,78,79,80,82,83,84,86,87,91,93,99,127,137,138,139,150,161,163,189,198,200,205,206,207,208,220,235,238,],[60,60,60,60,60,60,60,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,]),'ids':([47,58,67,78,79,80,82,83,85,186,],[62,62,89,62,62,62,62,62,123,211,]),'variable_params':([49,133,],[71,166,]),'funcs_comp':([51,],[73,]),'while_jump':([66,],[88,]),'verify_function_exists':([69,122,],[92,92,]),'add_parameter_amount':([70,203,],[94,224,]),'funcs_params_comp':([71,166,],[95,202,]),'dim':([72,122,],[98,155,]),'expressions':([84,86,87,91,127,150,161,163,189,198,220,235,238,],[109,125,126,129,160,184,194,197,214,221,197,248,197,]),'expressions_comp':([84,86,87,91,127,137,150,161,163,189,198,220,235,238,],[110,110,110,110,110,169,110,110,110,110,110,110,110,110,]),'expression_comp_2':([84,86,87,91,127,137,138,150,161,163,189,198,220,235,238,],[111,111,111,111,111,111,170,111,111,111,111,111,111,111,111,]),'expression_comp_3':([84,86,87,91,127,137,138,150,161,163,189,198,220,235,238,],[112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,]),'exp':([84,86,87,91,93,99,127,137,138,139,150,161,163,189,198,200,205,206,220,235,238,],[113,113,113,113,131,134,113,113,113,171,113,113,113,113,113,222,225,226,113,113,113,]),'term':([84,86,87,91,93,99,127,137,138,139,150,161,163,189,198,200,205,206,207,208,220,235,238,],[114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,227,228,114,114,114,]),'factor':([84,86,87,91,93,99,127,137,138,139,150,161,163,189,198,200,205,206,207,208,220,235,238,],[115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,]),'variable':([84,86,87,91,93,99,127,137,138,139,150,161,163,189,198,200,205,206,207,208,220,235,238,],[117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,]),'validate_for':([89,],[128,]),'expressions_op':([113,],[139,]),'g_quad_exp_as_alone':([114,],[146,]),'g_quad_exp_as':([114,],[147,]),'g_quad_exp_md_alone':([115,],[148,]),'g_quad_exp_md':([115,],[149,]),'add_fake':([116,],[150,]),'add_ct_int':([119,],[151,]),'add_ct_float':([120,],[152,]),'add_ct_char':([121,],[153,]),'add_id':([122,],[154,]),'g_quad_read':([123,211,],[156,230,]),'g_quad_write_str':([124,213,],[157,231,]),'g_quad_write':([125,214,],[158,232,]),'era_activation':([130,],[163,]),'count_local_vars':([132,241,],[165,251,]),'add_op':([140,141,142,143,144,145,179,180,182,183,],[172,173,174,175,176,177,205,206,207,208,]),'exp_comp':([147,],[178,]),'term_comp':([149,],[181,]),'read_comp':([156,230,],[185,242,]),'write_comp':([157,158,231,232,],[188,191,243,244,]),'g_if_quad':([159,],[192,]),'return_end':([162,],[195,]),'func_call_comp':([163,220,238,],[196,237,250,]),'g_quad_logic':([171,],[204,]),'g_while_quad':([193,],[217,]),'for_counter_control':([194,],[218,]),'g_parameter_quad':([197,221,],[220,238,]),'end_funcs':([201,255,],[223,258,]),'rem_fake':([209,],[229,]),'g_gosub_quad':([219,],[236,]),'end_if':([233,256,],[245,259,]),'change_to_global':([236,],[249,]),'g_else_quad':([246,],[252,]),'end_while':([247,],[253,]),'for_counter_end':([248,],[254,]),'end_for':([260,],[262,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM g_main_quad ID add_program SEMICOLON vars funcs main end_program','program',9,'p_program','parser.py',63),
  ('add_program -> <empty>','add_program',0,'p_add_program','parser.py',66),
  ('end_program -> <empty>','end_program',0,'p_end_program','parser.py',83),
  ('main -> MAIN OPEN_PAREN CLOSE_PAREN fill_main_quad block','main',5,'p_main','parser.py',95),
  ('g_main_quad -> <empty>','g_main_quad',0,'p_g_main_quad','parser.py',98),
  ('fill_main_quad -> <empty>','fill_main_quad',0,'p_fill_main_quad','parser.py',104),
  ('funcs -> func_type MODULE ID add_module OPEN_PAREN funcs_params CLOSE_PAREN add_parameter_amount vars count_local_vars block end_funcs funcs','funcs',13,'p_funcs','parser.py',109),
  ('funcs -> empty','funcs',1,'p_funcs','parser.py',110),
  ('end_funcs -> <empty>','end_funcs',0,'p_end_funcs','parser.py',114),
  ('count_local_vars -> <empty>','count_local_vars',0,'p_count_local_vars','parser.py',125),
  ('add_module -> <empty>','add_module',0,'p_add_module','parser.py',135),
  ('funcs_comp -> ID add_module OPEN_PAREN funcs_params CLOSE_PAREN add_parameter_amount vars count_local_vars block end_funcs funcs','funcs_comp',11,'p_funcs_comp','parser.py',164),
  ('add_parameter_amount -> <empty>','add_parameter_amount',0,'p_add_parameter_amount','parser.py',167),
  ('funcs_params -> var_type variable_params funcs_params_comp','funcs_params',3,'p_funcs_params','parser.py',174),
  ('funcs_params -> empty','funcs_params',1,'p_funcs_params','parser.py',175),
  ('funcs_params_comp -> COMMA var_type variable_params funcs_params_comp','funcs_params_comp',4,'p_funcs_params_comp','parser.py',180),
  ('funcs_params_comp -> empty','funcs_params_comp',1,'p_funcs_params_comp','parser.py',181),
  ('variable_params -> ID','variable_params',1,'p_variable_params','parser.py',186),
  ('variable_params -> ID dim','variable_params',2,'p_variable_params','parser.py',187),
  ('block -> OPEN_BRACES statements CLOSE_BRACES','block',3,'p_block','parser.py',199),
  ('func_type -> var_type','func_type',1,'p_func_type','parser.py',203),
  ('func_type -> VOID','func_type',1,'p_func_type','parser.py',204),
  ('var_type -> INT','var_type',1,'p_var_type','parser.py',212),
  ('var_type -> FLOAT','var_type',1,'p_var_type','parser.py',213),
  ('var_type -> CHAR','var_type',1,'p_var_type','parser.py',214),
  ('vars -> VARS var_comp','vars',2,'p_vars','parser.py',222),
  ('vars -> empty','vars',1,'p_vars','parser.py',223),
  ('var_comp -> var_type ids_dec var_comp_2 var_comp_final','var_comp',4,'p_var_comp','parser.py',228),
  ('var_comp -> var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive','var_comp',5,'p_var_comp','parser.py',229),
  ('var_comp_2 -> COMMA ids_dec var_comp_3','var_comp_2',3,'p_var_comp_2','parser.py',233),
  ('var_comp_2 -> empty','var_comp_2',1,'p_var_comp_2','parser.py',234),
  ('var_comp_3 -> var_comp_2','var_comp_3',1,'p_var_comp_3','parser.py',238),
  ('var_comp_recursive -> var_type ids_dec var_comp_2 var_comp_final','var_comp_recursive',4,'p_var_comp_recursive','parser.py',241),
  ('var_comp_recursive -> var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive','var_comp_recursive',5,'p_var_comp_recursive','parser.py',242),
  ('var_comp_final -> SEMICOLON','var_comp_final',1,'p_var_comp_final','parser.py',246),
  ('var_comp_final -> var_module_trans','var_comp_final',1,'p_var_comp_final','parser.py',247),
  ('var_module_trans -> SEMICOLON var_type MODULE funcs_comp','var_module_trans',4,'p_var_module_trans','parser.py',252),
  ('ids_dec -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS','ids_dec',7,'p_ids_dec','parser.py',257),
  ('ids_dec -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS','ids_dec',4,'p_ids_dec','parser.py',258),
  ('ids_dec -> ID','ids_dec',1,'p_ids_dec','parser.py',259),
  ('ids -> ID OPEN_BRACKETS exp CLOSE_BRACKETS OPEN_BRACKETS exp CLOSE_BRACKETS','ids',7,'p_ids','parser.py',272),
  ('ids -> ID OPEN_BRACKETS exp CLOSE_BRACKETS','ids',4,'p_ids','parser.py',273),
  ('ids -> ID','ids',1,'p_ids','parser.py',274),
  ('statements -> assignment SEMICOLON statements','statements',3,'p_statements','parser.py',281),
  ('statements -> read SEMICOLON statements','statements',3,'p_statements','parser.py',282),
  ('statements -> write SEMICOLON statements','statements',3,'p_statements','parser.py',283),
  ('statements -> condition statements','statements',2,'p_statements','parser.py',284),
  ('statements -> return SEMICOLON statements','statements',3,'p_statements','parser.py',285),
  ('statements -> func_call SEMICOLON statements','statements',3,'p_statements','parser.py',286),
  ('statements -> empty','statements',1,'p_statements','parser.py',287),
  ('assignment -> ids ASSIGN expressions','assignment',3,'p_assignment','parser.py',292),
  ('read -> READ OPEN_PAREN ids g_quad_read read_comp CLOSE_PAREN','read',6,'p_read','parser.py',311),
  ('read_comp -> COMMA ids g_quad_read read_comp','read_comp',4,'p_read_comp','parser.py',316),
  ('read_comp -> empty','read_comp',1,'p_read_comp','parser.py',317),
  ('g_quad_read -> <empty>','g_quad_read',0,'p_g_quad_read','parser.py',322),
  ('write -> WRITE OPEN_PAREN CT_STRING g_quad_write_str write_comp CLOSE_PAREN','write',6,'p_write','parser.py',334),
  ('write -> WRITE OPEN_PAREN expressions g_quad_write write_comp CLOSE_PAREN','write',6,'p_write','parser.py',335),
  ('write_comp -> COMMA CT_STRING g_quad_write_str write_comp','write_comp',4,'p_write_comp','parser.py',340),
  ('write_comp -> COMMA expressions g_quad_write write_comp','write_comp',4,'p_write_comp','parser.py',341),
  ('write_comp -> empty','write_comp',1,'p_write_comp','parser.py',342),
  ('g_quad_write_str -> <empty>','g_quad_write_str',0,'p_g_quad_write_str','parser.py',347),
  ('g_quad_write -> <empty>','g_quad_write',0,'p_g_quad_write','parser.py',354),
  ('end_if -> <empty>','end_if',0,'p_end_if','parser.py',361),
  ('condition -> IF OPEN_PAREN expressions CLOSE_PAREN g_if_quad THEN block end_if','condition',8,'p_condition','parser.py',367),
  ('condition -> IF OPEN_PAREN expressions CLOSE_PAREN g_if_quad THEN block ELSE g_else_quad block end_if','condition',11,'p_condition','parser.py',368),
  ('condition -> WHILE while_jump OPEN_PAREN expressions CLOSE_PAREN g_while_quad DO block end_while','condition',9,'p_condition','parser.py',369),
  ('condition -> FOR ids validate_for ASSIGN expressions for_counter_control TO expressions for_counter_end DO block end_for','condition',12,'p_condition','parser.py',370),
  ('g_if_quad -> <empty>','g_if_quad',0,'p_g_if_quad','parser.py',375),
  ('g_else_quad -> <empty>','g_else_quad',0,'p_g_else_quad','parser.py',387),
  ('while_jump -> <empty>','while_jump',0,'p_while_jump','parser.py',400),
  ('g_while_quad -> <empty>','g_while_quad',0,'p_g_while_quad','parser.py',405),
  ('end_while -> <empty>','end_while',0,'p_end_while','parser.py',415),
  ('validate_for -> <empty>','validate_for',0,'p_validate_for','parser.py',423),
  ('for_counter_control -> <empty>','for_counter_control',0,'p_for_counter_control','parser.py',437),
  ('for_counter_end -> <empty>','for_counter_end',0,'p_for_counter_end','parser.py',459),
  ('end_for -> <empty>','end_for',0,'p_end_for','parser.py',482),
  ('return -> RETURN OPEN_PAREN expressions CLOSE_PAREN return_end','return',5,'p_return','parser.py',498),
  ('return_end -> <empty>','return_end',0,'p_return_end','parser.py',501),
  ('func_call -> ID verify_function_exists OPEN_PAREN era_activation func_call_comp CLOSE_PAREN g_gosub_quad change_to_global','func_call',8,'p_func_call','parser.py',506),
  ('g_gosub_quad -> <empty>','g_gosub_quad',0,'p_g_gosub_quad','parser.py',510),
  ('change_to_global -> <empty>','change_to_global',0,'p_change_to_global','parser.py',514),
  ('verify_function_exists -> <empty>','verify_function_exists',0,'p_verify_function_exists','parser.py',519),
  ('era_activation -> <empty>','era_activation',0,'p_era_activation','parser.py',529),
  ('func_call_comp -> expressions g_parameter_quad func_call_comp','func_call_comp',3,'p_func_call_comp','parser.py',536),
  ('func_call_comp -> COMMA expressions g_parameter_quad func_call_comp','func_call_comp',4,'p_func_call_comp','parser.py',537),
  ('func_call_comp -> empty','func_call_comp',1,'p_func_call_comp','parser.py',538),
  ('g_parameter_quad -> <empty>','g_parameter_quad',0,'p_g_parameter_quad','parser.py',542),
  ('parameter_check_comma -> <empty>','parameter_check_comma',0,'p_parameter_check_comma','parser.py',556),
  ('expressions -> expressions_comp','expressions',1,'p_expressions','parser.py',561),
  ('expressions_comp -> expression_comp_2','expressions_comp',1,'p_expressions_comp','parser.py',565),
  ('expressions_comp -> expression_comp_2 OR expressions_comp','expressions_comp',3,'p_expressions_comp','parser.py',566),
  ('expression_comp_2 -> expression_comp_3','expression_comp_2',1,'p_expression_comp_2','parser.py',571),
  ('expression_comp_2 -> expression_comp_3 AND expression_comp_2','expression_comp_2',3,'p_expression_comp_2','parser.py',572),
  ('expression_comp_3 -> exp expressions_op exp g_quad_logic','expression_comp_3',4,'p_expression_comp_3','parser.py',577),
  ('expression_comp_3 -> exp','expression_comp_3',1,'p_expression_comp_3','parser.py',578),
  ('g_quad_logic -> <empty>','g_quad_logic',0,'p_g_quad_logic','parser.py',582),
  ('expressions_op -> LESS_THAN add_op','expressions_op',2,'p_expressions_op','parser.py',587),
  ('expressions_op -> LESS_THAN_EQUAL add_op','expressions_op',2,'p_expressions_op','parser.py',588),
  ('expressions_op -> MORE_THAN add_op','expressions_op',2,'p_expressions_op','parser.py',589),
  ('expressions_op -> MORE_THAN_EQUAL add_op','expressions_op',2,'p_expressions_op','parser.py',590),
  ('expressions_op -> EQUALS add_op','expressions_op',2,'p_expressions_op','parser.py',591),
  ('expressions_op -> NOT_EQUALS add_op','expressions_op',2,'p_expressions_op','parser.py',592),
  ('exp -> term g_quad_exp_as_alone','exp',2,'p_exp','parser.py',598),
  ('exp -> term g_quad_exp_as exp_comp','exp',3,'p_exp','parser.py',599),
  ('g_quad_exp_as -> <empty>','g_quad_exp_as',0,'p_g_quad_exp_as','parser.py',604),
  ('g_quad_exp_as_alone -> <empty>','g_quad_exp_as_alone',0,'p_g_quad_exp_as_alone','parser.py',608),
  ('exp_comp -> PLUS add_op exp','exp_comp',3,'p_exp_comp','parser.py',613),
  ('exp_comp -> MINUS add_op exp','exp_comp',3,'p_exp_comp','parser.py',614),
  ('term -> factor g_quad_exp_md_alone','term',2,'p_term','parser.py',619),
  ('term -> factor g_quad_exp_md term_comp','term',3,'p_term','parser.py',620),
  ('g_quad_exp_md -> <empty>','g_quad_exp_md',0,'p_g_quad_exp_md','parser.py',625),
  ('g_quad_exp_md_alone -> <empty>','g_quad_exp_md_alone',0,'p_g_quad_exp_md_alone','parser.py',630),
  ('term_comp -> MULTIPLIES add_op term','term_comp',3,'p_term_comp','parser.py',635),
  ('term_comp -> DIVIDE add_op term','term_comp',3,'p_term_comp','parser.py',636),
  ('add_op -> <empty>','add_op',0,'p_add_op','parser.py',640),
  ('factor -> OPEN_PAREN add_fake expressions CLOSE_PAREN rem_fake','factor',5,'p_factor','parser.py',795),
  ('factor -> variable','factor',1,'p_factor','parser.py',796),
  ('factor -> func_call','factor',1,'p_factor','parser.py',797),
  ('factor -> CT_INT add_ct_int','factor',2,'p_factor','parser.py',798),
  ('factor -> CT_FLOAT add_ct_float','factor',2,'p_factor','parser.py',799),
  ('factor -> CT_CHAR add_ct_char','factor',2,'p_factor','parser.py',800),
  ('add_fake -> <empty>','add_fake',0,'p_add_fake','parser.py',804),
  ('rem_fake -> <empty>','rem_fake',0,'p_rem_fake','parser.py',808),
  ('add_ct_int -> <empty>','add_ct_int',0,'p_add_ct_int','parser.py',813),
  ('add_ct_float -> <empty>','add_ct_float',0,'p_add_ct_float','parser.py',820),
  ('add_ct_char -> <empty>','add_ct_char',0,'p_add_ct_char','parser.py',827),
  ('variable -> ID add_id','variable',2,'p_variable','parser.py',835),
  ('variable -> ID dim','variable',2,'p_variable','parser.py',836),
  ('add_id -> <empty>','add_id',0,'p_add_id','parser.py',841),
  ('dim -> OPEN_BRACKETS exp CLOSE_BRACKETS','dim',3,'p_dim','parser.py',861),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',866),
]
