
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN CHAR CLOSE_BRACES CLOSE_BRACKETS CLOSE_PAREN COMMA CT_CHAR CT_FLOAT CT_INT CT_STRING DIVIDE DO ELSE EQUALS FLOAT FOR ID IF INT LESS_THAN LESS_THAN_EQUAL MAIN MINUS MODULE MORE_THAN MORE_THAN_EQUAL MULTIPLIES NOT_EQUALS OPEN_BRACES OPEN_BRACKETS OPEN_PAREN OR PLUS PROGRAM READ RETURN SEMICOLON THEN TO VARS VOID WHILE WRITEprogram : PROGRAM g_main_quad ID add_program SEMICOLON vars funcs main end_programadd_program : end_program : main : MAIN OPEN_PAREN CLOSE_PAREN fill_main_quad blockg_main_quad :fill_main_quad :funcs : func_type MODULE ID add_module OPEN_PAREN funcs_params CLOSE_PAREN add_parameter_amount vars count_local_vars block end_funcs funcs\n    | empty\n    end_funcs :count_local_vars :add_module :funcs_comp : ID add_module OPEN_PAREN funcs_params CLOSE_PAREN add_parameter_amount vars count_local_vars block end_funcs funcsadd_parameter_amount :funcs_params : var_type variable_params funcs_params_comp\n    | empty\n    funcs_params_comp : COMMA var_type variable_params funcs_params_comp\n    | empty\n    variable_params : ID\n    | ID dim\n    block : OPEN_BRACES statements CLOSE_BRACESfunc_type : var_type\n    | VOID\n    var_type : INT\n    | FLOAT\n    | CHAR\n    vars : VARS var_comp\n    | empty\n    var_comp : var_type ids_dec var_comp_2 var_comp_final\n    | var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive\n    var_comp_2 : COMMA ids_dec var_comp_3\n    | empty\n    var_comp_3 : var_comp_2var_comp_recursive : var_type ids_dec var_comp_2 var_comp_final\n    | var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive\n    var_comp_final : SEMICOLON\n    | var_module_trans\n    var_module_trans : SEMICOLON var_type MODULE funcs_comp\n    ids_dec : ids_dec_matrix\n    | ids_dec_array\n    | ids_dec_single\n    ids_dec_matrix : ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETSids_dec_array : ID OPEN_BRACKETS CT_INT CLOSE_BRACKETSids_dec_single : IDids : ids_matrix\n    | ids_array\n    | ids_single\n    ids_matrix : ID OPEN_BRACKETS exp CLOSE_BRACKETS OPEN_BRACKETS exp CLOSE_BRACKETSids_array : ID OPEN_BRACKETS exp CLOSE_BRACKETSids_single : IDstatements : assignment SEMICOLON statements\n    | read SEMICOLON statements \n    | write SEMICOLON statements\n    | condition statements\n    | return SEMICOLON statements\n    | func_call SEMICOLON statements\n    | empty\n    assignment : ids ASSIGN expressionsread : READ OPEN_PAREN ids g_quad_read read_comp CLOSE_PARENread_comp : COMMA ids g_quad_read read_comp\n    | empty \n    g_quad_read : write : WRITE OPEN_PAREN CT_STRING g_quad_write_str write_comp CLOSE_PAREN\n    | WRITE OPEN_PAREN expressions g_quad_write write_comp CLOSE_PAREN\n    write_comp : COMMA CT_STRING g_quad_write_str write_comp\n    | COMMA expressions g_quad_write write_comp\n    | empty\n    g_quad_write_str : g_quad_write : end_if : condition : IF OPEN_PAREN expressions CLOSE_PAREN g_if_quad THEN block end_if\n    | IF OPEN_PAREN expressions CLOSE_PAREN g_if_quad THEN block ELSE g_else_quad block end_if\n    | WHILE while_jump OPEN_PAREN expressions CLOSE_PAREN g_while_quad DO block end_while\n    | FOR ids validate_for ASSIGN expressions for_counter_control TO expressions for_counter_end DO block end_for\n    g_if_quad :g_else_quad :while_jump :g_while_quad :end_while :validate_for :for_counter_control :for_counter_end :end_for :return : RETURN OPEN_PAREN expressions CLOSE_PAREN g_quad_returng_quad_return :func_call : ID verify_function_exists OPEN_PAREN era_activation func_call_comp CLOSE_PAREN g_gosub_quad function_call_end\n    function_call_end :g_gosub_quad :change_to_global :verify_function_exists :era_activation :func_call_comp : expressions g_parameter_quad func_call_comp\n    | COMMA expressions g_parameter_quad func_call_comp\n    | empty\n    g_parameter_quad :expressions : expressions_compexpressions_comp : expression_comp_2\n    | expression_comp_2 OR expressions_comp\n    expression_comp_2 : expression_comp_3\n    | expression_comp_3 AND expression_comp_2\n    expression_comp_3 : exp expressions_op exp g_quad_logic\n    | exp\n    g_quad_logic : expressions_op : LESS_THAN add_op\n    | LESS_THAN_EQUAL add_op\n    | MORE_THAN add_op\n    | MORE_THAN_EQUAL add_op\n    | EQUALS add_op\n    | NOT_EQUALS add_op\n    exp : term g_quad_exp_as_alone\n    | term g_quad_exp_as exp_comp\n    g_quad_exp_as : g_quad_exp_as_alone : exp_comp : PLUS add_op exp\n    | MINUS add_op exp\n    term : factor g_quad_exp_md_alone\n    | factor g_quad_exp_md term_comp\n    g_quad_exp_md : g_quad_exp_md_alone : term_comp : MULTIPLIES add_op term\n    | DIVIDE add_op term\n    add_op : factor : OPEN_PAREN add_fake expressions CLOSE_PAREN rem_fake\n    | variable \n    | func_call\n    | CT_INT add_ct_int\n    | CT_FLOAT add_ct_float\n    | CT_CHAR add_ct_char\n    add_fake : rem_fake : add_ct_int : add_ct_float : add_ct_char : variable : ID add_id\n    | ID dim\n    add_id : dim : dim_array\n    | dim_matrix\n    | empty\n    dim_array : OPEN_BRACKETS expressions CLOSE_BRACKETSdim_matrix : OPEN_BRACKETS expressions CLOSE_BRACKETS OPEN_BRACKETS expressions CLOSE_BRACKETSempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,20,28,49,83,],[0,-3,-1,-4,-20,]),'ID':([2,3,15,16,17,19,22,32,44,50,52,54,61,70,83,84,85,86,88,89,90,91,92,93,97,99,105,106,107,108,119,120,121,122,123,124,125,126,127,128,129,130,131,136,139,142,146,147,148,149,150,151,152,153,154,155,157,159,160,161,162,163,164,170,172,176,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,195,198,206,207,209,212,214,215,216,217,218,219,229,230,231,236,237,238,239,240,244,246,247,249,252,257,259,261,265,268,271,272,274,],[-5,4,-23,-24,-25,27,30,27,27,72,78,80,72,96,-20,72,72,72,72,72,131,96,131,131,131,131,-136,-137,-138,131,-95,-96,-98,-101,-112,-118,-128,-123,-124,-130,-131,-132,-135,131,-90,78,131,131,131,-121,-121,-121,-121,-121,-121,-109,-115,131,-125,-126,-127,-133,-134,131,131,-139,-97,-99,-102,-103,-104,-105,-106,-107,-108,-110,-121,-121,-116,-121,-121,96,131,-94,131,131,131,-100,131,131,131,131,-129,-87,131,-94,-113,-114,-119,-120,-122,-69,131,-86,131,-140,-70,-78,-85,-72,-69,-71,-82,-73,]),'SEMICOLON':([4,5,23,24,25,26,27,31,33,40,46,47,48,55,58,59,60,62,63,81,105,106,107,112,118,119,120,121,122,123,124,126,127,128,129,130,131,155,157,160,161,162,163,164,171,176,178,179,180,187,190,204,214,219,220,222,225,229,236,237,238,239,240,247,252,261,],[-2,6,-141,-38,-39,-40,-43,38,-31,-141,-30,-32,-42,-141,84,85,86,88,89,111,-136,-137,-138,-41,-57,-95,-96,-98,-101,-112,-118,-123,-124,-130,-131,-132,-135,-109,-115,-125,-126,-127,-133,-134,-84,-139,-97,-99,-102,-110,-116,-83,-100,-129,-58,-62,-63,-87,-113,-114,-119,-120,-122,-86,-140,-85,]),'VARS':([6,76,100,213,235,],[8,-13,8,-13,8,]),'VOID':([6,7,9,12,18,37,38,39,45,79,83,110,111,145,210,233,251,267,270,273,],[-141,14,-27,-8,-26,-28,-35,-36,-29,-37,-20,-33,-35,-34,-9,14,-7,-9,14,-12,]),'INT':([6,7,8,9,12,18,37,38,39,43,45,79,83,102,110,111,144,145,210,233,251,267,270,273,],[-141,15,15,-27,-8,-26,-28,15,-36,15,-29,-37,-20,15,-33,15,15,-34,-9,15,-7,-9,15,-12,]),'FLOAT':([6,7,8,9,12,18,37,38,39,43,45,79,83,102,110,111,144,145,210,233,251,267,270,273,],[-141,16,16,-27,-8,-26,-28,16,-36,16,-29,-37,-20,16,-33,16,16,-34,-9,16,-7,-9,16,-12,]),'CHAR':([6,7,8,9,12,18,37,38,39,43,45,79,83,102,110,111,144,145,210,233,251,267,270,273,],[-141,17,17,-27,-8,-26,-28,17,-36,17,-29,-37,-20,17,-33,17,17,-34,-9,17,-7,-9,17,-12,]),'MAIN':([6,7,9,10,12,18,37,38,39,45,79,83,110,111,145,210,233,251,267,270,273,],[-141,-141,-27,21,-8,-26,-28,-35,-36,-29,-37,-20,-33,-35,-34,-9,-141,-7,-9,-141,-12,]),'OPEN_BRACES':([9,12,18,35,37,38,39,42,45,76,79,83,100,110,111,141,145,174,210,213,226,233,235,245,251,253,258,263,264,267,269,270,273,],[-27,-8,-26,-6,-28,-35,-36,50,-29,-13,-37,-20,-141,-33,-35,-10,-34,50,-9,-13,50,-141,-141,50,-7,-10,-75,50,50,-9,50,-141,-12,]),'MODULE':([11,13,14,15,16,17,44,],[22,-21,-22,-23,-24,-25,54,]),'OPEN_PAREN':([21,30,36,66,67,68,69,71,72,80,90,92,93,94,97,98,99,105,106,107,108,109,119,120,121,122,123,124,125,126,127,128,129,130,131,136,139,146,147,148,149,150,151,152,153,154,155,157,159,160,161,162,163,164,170,172,176,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,198,206,207,209,212,214,215,216,217,218,219,229,230,231,236,237,238,239,240,246,247,249,252,261,],[29,-11,43,91,92,93,-76,97,-89,-11,125,125,125,136,125,139,125,-136,-137,-138,125,144,-95,-96,-98,-101,-112,-118,-128,-123,-124,-130,-131,-132,-89,125,-90,125,125,125,-121,-121,-121,-121,-121,-121,-109,-115,125,-125,-126,-127,-133,-134,125,125,-139,-97,-99,-102,-103,-104,-105,-106,-107,-108,-110,-121,-121,-116,-121,-121,125,-94,125,125,125,-100,125,125,125,125,-129,-87,125,-94,-113,-114,-119,-120,-122,125,-86,125,-140,-85,]),'COMMA':([23,24,25,26,27,40,48,55,73,74,75,77,78,96,104,105,106,107,112,119,120,121,122,123,124,126,127,128,129,130,131,132,133,134,139,155,157,160,161,162,163,164,165,166,167,172,173,175,176,178,179,180,187,190,206,214,219,221,223,224,229,230,231,236,237,238,239,240,241,242,243,247,249,250,252,261,],[32,-38,-39,-40,-43,32,-42,32,-44,-45,-46,102,-18,-49,-19,-136,-137,-138,-41,-95,-96,-98,-101,-112,-118,-123,-124,-130,-131,-132,-135,-61,-67,-68,-90,-109,-115,-125,-126,-127,-133,-134,195,198,198,207,-48,102,-139,-97,-99,-102,-110,-116,-94,-100,-129,-61,-67,-68,-87,207,-94,-113,-114,-119,-120,-122,195,198,198,-86,207,-47,-140,-85,]),'OPEN_BRACKETS':([27,48,72,78,96,131,173,176,],[34,56,99,108,99,108,209,212,]),'CLOSE_PAREN':([29,43,51,53,73,74,75,77,78,96,101,103,104,105,106,107,119,120,121,122,123,124,126,127,128,129,130,131,132,133,134,135,138,139,144,155,157,160,161,162,163,164,165,166,167,169,172,173,175,176,177,178,179,180,187,190,193,194,196,197,199,200,205,206,208,211,214,219,221,223,224,229,230,231,236,237,238,239,240,241,242,243,247,248,249,250,252,254,255,256,261,262,],[35,-141,76,-15,-44,-45,-46,-141,-18,-49,-14,-17,-19,-136,-137,-138,-95,-96,-98,-101,-112,-118,-123,-124,-130,-131,-132,-135,-61,-67,-68,168,171,-90,-141,-109,-115,-125,-126,-127,-133,-134,-141,-141,-141,202,-141,-48,-141,-139,213,-97,-99,-102,-110,-116,219,220,-60,222,-66,225,229,-94,-93,-16,-100,-129,-61,-67,-68,-87,-141,-94,-113,-114,-119,-120,-122,-141,-141,-141,-86,-91,-141,-47,-140,-59,-64,-65,-85,-92,]),'CT_INT':([34,56,90,92,93,97,99,105,106,107,108,119,120,121,122,123,124,125,126,127,128,129,130,131,136,139,146,147,148,149,150,151,152,153,154,155,157,159,160,161,162,163,164,170,172,176,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,198,206,207,209,212,214,215,216,217,218,219,229,230,231,236,237,238,239,240,246,247,249,252,261,],[41,82,128,128,128,128,128,-136,-137,-138,128,-95,-96,-98,-101,-112,-118,-128,-123,-124,-130,-131,-132,-135,128,-90,128,128,128,-121,-121,-121,-121,-121,-121,-109,-115,128,-125,-126,-127,-133,-134,128,128,-139,-97,-99,-102,-103,-104,-105,-106,-107,-108,-110,-121,-121,-116,-121,-121,128,-94,128,128,128,-100,128,128,128,128,-129,-87,128,-94,-113,-114,-119,-120,-122,128,-86,128,-140,-85,]),'CLOSE_BRACKETS':([41,82,105,106,107,119,120,121,122,123,124,126,127,128,129,130,131,140,143,155,157,160,161,162,163,164,176,178,179,180,187,190,214,219,229,232,234,236,237,238,239,240,247,252,261,],[48,112,-136,-137,-138,-95,-96,-98,-101,-112,-118,-123,-124,-130,-131,-132,-135,173,176,-109,-115,-125,-126,-127,-133,-134,-139,-97,-99,-102,-110,-116,-100,-129,-87,250,252,-113,-114,-119,-120,-122,-86,-140,-85,]),'READ':([50,61,83,84,85,86,88,89,244,257,259,265,268,271,272,274,],[66,66,-20,66,66,66,66,66,-69,-70,-78,-72,-69,-71,-82,-73,]),'WRITE':([50,61,83,84,85,86,88,89,244,257,259,265,268,271,272,274,],[67,67,-20,67,67,67,67,67,-69,-70,-78,-72,-69,-71,-82,-73,]),'IF':([50,61,83,84,85,86,88,89,244,257,259,265,268,271,272,274,],[68,68,-20,68,68,68,68,68,-69,-70,-78,-72,-69,-71,-82,-73,]),'WHILE':([50,61,83,84,85,86,88,89,244,257,259,265,268,271,272,274,],[69,69,-20,69,69,69,69,69,-69,-70,-78,-72,-69,-71,-82,-73,]),'FOR':([50,61,83,84,85,86,88,89,244,257,259,265,268,271,272,274,],[70,70,-20,70,70,70,70,70,-69,-70,-78,-72,-69,-71,-82,-73,]),'RETURN':([50,61,83,84,85,86,88,89,244,257,259,265,268,271,272,274,],[71,71,-20,71,71,71,71,71,-69,-70,-78,-72,-69,-71,-82,-73,]),'CLOSE_BRACES':([50,57,61,64,83,84,85,86,87,88,89,113,114,115,116,117,244,257,259,265,268,271,272,274,],[-141,83,-141,-56,-20,-141,-141,-141,-53,-141,-141,-50,-51,-52,-54,-55,-69,-70,-78,-72,-69,-71,-82,-73,]),'ASSIGN':([65,72,73,74,75,95,96,137,173,250,],[90,-49,-44,-45,-46,-79,-49,170,-48,-47,]),'ELSE':([83,244,],[-20,258,]),'CT_FLOAT':([90,92,93,97,99,105,106,107,108,119,120,121,122,123,124,125,126,127,128,129,130,131,136,139,146,147,148,149,150,151,152,153,154,155,157,159,160,161,162,163,164,170,172,176,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,198,206,207,209,212,214,215,216,217,218,219,229,230,231,236,237,238,239,240,246,247,249,252,261,],[129,129,129,129,129,-136,-137,-138,129,-95,-96,-98,-101,-112,-118,-128,-123,-124,-130,-131,-132,-135,129,-90,129,129,129,-121,-121,-121,-121,-121,-121,-109,-115,129,-125,-126,-127,-133,-134,129,129,-139,-97,-99,-102,-103,-104,-105,-106,-107,-108,-110,-121,-121,-116,-121,-121,129,-94,129,129,129,-100,129,129,129,129,-129,-87,129,-94,-113,-114,-119,-120,-122,129,-86,129,-140,-85,]),'CT_CHAR':([90,92,93,97,99,105,106,107,108,119,120,121,122,123,124,125,126,127,128,129,130,131,136,139,146,147,148,149,150,151,152,153,154,155,157,159,160,161,162,163,164,170,172,176,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,198,206,207,209,212,214,215,216,217,218,219,229,230,231,236,237,238,239,240,246,247,249,252,261,],[130,130,130,130,130,-136,-137,-138,130,-95,-96,-98,-101,-112,-118,-128,-123,-124,-130,-131,-132,-135,130,-90,130,130,130,-121,-121,-121,-121,-121,-121,-109,-115,130,-125,-126,-127,-133,-134,130,130,-139,-97,-99,-102,-103,-104,-105,-106,-107,-108,-110,-121,-121,-116,-121,-121,130,-94,130,130,130,-100,130,130,130,130,-129,-87,130,-94,-113,-114,-119,-120,-122,130,-86,130,-140,-85,]),'CT_STRING':([92,198,],[133,223,]),'MULTIPLIES':([105,106,107,124,126,127,128,129,130,131,158,160,161,162,163,164,176,219,229,240,247,252,261,],[-136,-137,-138,-117,-123,-124,-130,-131,-132,-135,191,-125,-126,-127,-133,-134,-139,-129,-87,-122,-86,-140,-85,]),'DIVIDE':([105,106,107,124,126,127,128,129,130,131,158,160,161,162,163,164,176,219,229,240,247,252,261,],[-136,-137,-138,-117,-123,-124,-130,-131,-132,-135,192,-125,-126,-127,-133,-134,-139,-129,-87,-122,-86,-140,-85,]),'PLUS':([105,106,107,123,124,126,127,128,129,130,131,156,157,160,161,162,163,164,176,190,219,229,238,239,240,247,252,261,],[-136,-137,-138,-111,-118,-123,-124,-130,-131,-132,-135,188,-115,-125,-126,-127,-133,-134,-139,-116,-129,-87,-119,-120,-122,-86,-140,-85,]),'MINUS':([105,106,107,123,124,126,127,128,129,130,131,156,157,160,161,162,163,164,176,190,219,229,238,239,240,247,252,261,],[-136,-137,-138,-111,-118,-123,-124,-130,-131,-132,-135,189,-115,-125,-126,-127,-133,-134,-139,-116,-129,-87,-119,-120,-122,-86,-140,-85,]),'LESS_THAN':([105,106,107,122,123,124,126,127,128,129,130,131,155,157,160,161,162,163,164,176,187,190,219,229,236,237,238,239,240,247,252,261,],[-136,-137,-138,149,-112,-118,-123,-124,-130,-131,-132,-135,-109,-115,-125,-126,-127,-133,-134,-139,-110,-116,-129,-87,-113,-114,-119,-120,-122,-86,-140,-85,]),'LESS_THAN_EQUAL':([105,106,107,122,123,124,126,127,128,129,130,131,155,157,160,161,162,163,164,176,187,190,219,229,236,237,238,239,240,247,252,261,],[-136,-137,-138,150,-112,-118,-123,-124,-130,-131,-132,-135,-109,-115,-125,-126,-127,-133,-134,-139,-110,-116,-129,-87,-113,-114,-119,-120,-122,-86,-140,-85,]),'MORE_THAN':([105,106,107,122,123,124,126,127,128,129,130,131,155,157,160,161,162,163,164,176,187,190,219,229,236,237,238,239,240,247,252,261,],[-136,-137,-138,151,-112,-118,-123,-124,-130,-131,-132,-135,-109,-115,-125,-126,-127,-133,-134,-139,-110,-116,-129,-87,-113,-114,-119,-120,-122,-86,-140,-85,]),'MORE_THAN_EQUAL':([105,106,107,122,123,124,126,127,128,129,130,131,155,157,160,161,162,163,164,176,187,190,219,229,236,237,238,239,240,247,252,261,],[-136,-137,-138,152,-112,-118,-123,-124,-130,-131,-132,-135,-109,-115,-125,-126,-127,-133,-134,-139,-110,-116,-129,-87,-113,-114,-119,-120,-122,-86,-140,-85,]),'EQUALS':([105,106,107,122,123,124,126,127,128,129,130,131,155,157,160,161,162,163,164,176,187,190,219,229,236,237,238,239,240,247,252,261,],[-136,-137,-138,153,-112,-118,-123,-124,-130,-131,-132,-135,-109,-115,-125,-126,-127,-133,-134,-139,-110,-116,-129,-87,-113,-114,-119,-120,-122,-86,-140,-85,]),'NOT_EQUALS':([105,106,107,122,123,124,126,127,128,129,130,131,155,157,160,161,162,163,164,176,187,190,219,229,236,237,238,239,240,247,252,261,],[-136,-137,-138,154,-112,-118,-123,-124,-130,-131,-132,-135,-109,-115,-125,-126,-127,-133,-134,-139,-110,-116,-129,-87,-113,-114,-119,-120,-122,-86,-140,-85,]),'AND':([105,106,107,121,122,123,124,126,127,128,129,130,131,155,157,160,161,162,163,164,176,180,187,190,214,219,229,236,237,238,239,240,247,252,261,],[-136,-137,-138,147,-101,-112,-118,-123,-124,-130,-131,-132,-135,-109,-115,-125,-126,-127,-133,-134,-139,-102,-110,-116,-100,-129,-87,-113,-114,-119,-120,-122,-86,-140,-85,]),'OR':([105,106,107,120,121,122,123,124,126,127,128,129,130,131,155,157,160,161,162,163,164,176,179,180,187,190,214,219,229,236,237,238,239,240,247,252,261,],[-136,-137,-138,146,-98,-101,-112,-118,-123,-124,-130,-131,-132,-135,-109,-115,-125,-126,-127,-133,-134,-139,-99,-102,-110,-116,-100,-129,-87,-113,-114,-119,-120,-122,-86,-140,-85,]),'TO':([105,106,107,119,120,121,122,123,124,126,127,128,129,130,131,155,157,160,161,162,163,164,176,178,179,180,187,190,203,214,219,228,229,236,237,238,239,240,247,252,261,],[-136,-137,-138,-95,-96,-98,-101,-112,-118,-123,-124,-130,-131,-132,-135,-109,-115,-125,-126,-127,-133,-134,-139,-97,-99,-102,-110,-116,-80,-100,-129,246,-87,-113,-114,-119,-120,-122,-86,-140,-85,]),'DO':([105,106,107,119,120,121,122,123,124,126,127,128,129,130,131,155,157,160,161,162,163,164,176,178,179,180,187,190,202,214,219,227,229,236,237,238,239,240,247,252,260,261,266,],[-136,-137,-138,-95,-96,-98,-101,-112,-118,-123,-124,-130,-131,-132,-135,-109,-115,-125,-126,-127,-133,-134,-139,-97,-99,-102,-110,-116,-77,-100,-129,245,-87,-113,-114,-119,-120,-122,-86,-140,-81,-85,269,]),'THEN':([168,201,],[-74,226,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'g_main_quad':([2,],[3,]),'add_program':([4,],[5,]),'vars':([6,100,235,],[7,141,253,]),'empty':([6,7,23,40,43,50,55,61,77,78,84,85,86,88,89,100,131,144,165,166,167,172,175,230,233,235,241,242,243,249,270,],[9,12,33,33,53,64,33,64,103,107,64,64,64,64,64,9,107,53,196,199,199,208,103,208,12,9,196,199,199,208,12,]),'funcs':([7,233,270,],[10,251,273,]),'func_type':([7,233,270,],[11,11,11,]),'var_type':([7,8,38,43,102,111,144,233,270,],[13,19,44,52,142,44,52,13,13,]),'var_comp':([8,],[18,]),'main':([10,],[20,]),'ids_dec':([19,32,44,],[23,40,55,]),'ids_dec_matrix':([19,32,44,],[24,24,24,]),'ids_dec_array':([19,32,44,],[25,25,25,]),'ids_dec_single':([19,32,44,],[26,26,26,]),'end_program':([20,],[28,]),'var_comp_2':([23,40,55,],[31,47,81,]),'add_module':([30,80,],[36,109,]),'var_comp_final':([31,81,],[37,110,]),'var_module_trans':([31,81,],[39,39,]),'fill_main_quad':([35,],[42,]),'var_comp_recursive':([38,111,],[45,145,]),'var_comp_3':([40,],[46,]),'block':([42,174,226,245,263,264,269,],[49,210,244,259,267,268,272,]),'funcs_params':([43,144,],[51,177,]),'statements':([50,61,84,85,86,88,89,],[57,87,113,114,115,116,117,]),'assignment':([50,61,84,85,86,88,89,],[58,58,58,58,58,58,58,]),'read':([50,61,84,85,86,88,89,],[59,59,59,59,59,59,59,]),'write':([50,61,84,85,86,88,89,],[60,60,60,60,60,60,60,]),'condition':([50,61,84,85,86,88,89,],[61,61,61,61,61,61,61,]),'return':([50,61,84,85,86,88,89,],[62,62,62,62,62,62,62,]),'func_call':([50,61,84,85,86,88,89,90,92,93,97,99,108,136,146,147,148,159,170,172,198,207,209,212,215,216,217,218,230,246,249,],[63,63,63,63,63,63,63,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,]),'ids':([50,61,70,84,85,86,88,89,91,195,],[65,65,95,65,65,65,65,65,132,221,]),'ids_matrix':([50,61,70,84,85,86,88,89,91,195,],[73,73,73,73,73,73,73,73,73,73,]),'ids_array':([50,61,70,84,85,86,88,89,91,195,],[74,74,74,74,74,74,74,74,74,74,]),'ids_single':([50,61,70,84,85,86,88,89,91,195,],[75,75,75,75,75,75,75,75,75,75,]),'variable_params':([52,142,],[77,175,]),'funcs_comp':([54,],[79,]),'while_jump':([69,],[94,]),'verify_function_exists':([72,131,],[98,98,]),'add_parameter_amount':([76,213,],[100,235,]),'funcs_params_comp':([77,175,],[101,211,]),'dim':([78,131,],[104,164,]),'dim_array':([78,131,],[105,105,]),'dim_matrix':([78,131,],[106,106,]),'expressions':([90,92,93,97,108,136,159,170,172,198,207,212,230,246,249,],[118,134,135,138,143,169,193,203,206,224,231,234,206,260,206,]),'expressions_comp':([90,92,93,97,108,136,146,159,170,172,198,207,212,230,246,249,],[119,119,119,119,119,119,178,119,119,119,119,119,119,119,119,119,]),'expression_comp_2':([90,92,93,97,108,136,146,147,159,170,172,198,207,212,230,246,249,],[120,120,120,120,120,120,120,179,120,120,120,120,120,120,120,120,120,]),'expression_comp_3':([90,92,93,97,108,136,146,147,159,170,172,198,207,212,230,246,249,],[121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,]),'exp':([90,92,93,97,99,108,136,146,147,148,159,170,172,198,207,209,212,215,216,230,246,249,],[122,122,122,122,140,122,122,122,122,180,122,122,122,122,122,232,122,236,237,122,122,122,]),'term':([90,92,93,97,99,108,136,146,147,148,159,170,172,198,207,209,212,215,216,217,218,230,246,249,],[123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,238,239,123,123,123,]),'factor':([90,92,93,97,99,108,136,146,147,148,159,170,172,198,207,209,212,215,216,217,218,230,246,249,],[124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,]),'variable':([90,92,93,97,99,108,136,146,147,148,159,170,172,198,207,209,212,215,216,217,218,230,246,249,],[126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,]),'validate_for':([95,],[137,]),'expressions_op':([122,],[148,]),'g_quad_exp_as_alone':([123,],[155,]),'g_quad_exp_as':([123,],[156,]),'g_quad_exp_md_alone':([124,],[157,]),'g_quad_exp_md':([124,],[158,]),'add_fake':([125,],[159,]),'add_ct_int':([128,],[160,]),'add_ct_float':([129,],[161,]),'add_ct_char':([130,],[162,]),'add_id':([131,],[163,]),'g_quad_read':([132,221,],[165,241,]),'g_quad_write_str':([133,223,],[166,242,]),'g_quad_write':([134,224,],[167,243,]),'era_activation':([139,],[172,]),'count_local_vars':([141,253,],[174,263,]),'add_op':([149,150,151,152,153,154,188,189,191,192,],[181,182,183,184,185,186,215,216,217,218,]),'exp_comp':([156,],[187,]),'term_comp':([158,],[190,]),'read_comp':([165,241,],[194,254,]),'write_comp':([166,167,242,243,],[197,200,255,256,]),'g_if_quad':([168,],[201,]),'g_quad_return':([171,],[204,]),'func_call_comp':([172,230,249,],[205,248,262,]),'g_quad_logic':([180,],[214,]),'g_while_quad':([202,],[227,]),'for_counter_control':([203,],[228,]),'g_parameter_quad':([206,231,],[230,249,]),'end_funcs':([210,267,],[233,270,]),'rem_fake':([219,],[240,]),'g_gosub_quad':([229,],[247,]),'end_if':([244,268,],[257,271,]),'function_call_end':([247,],[261,]),'g_else_quad':([258,],[264,]),'end_while':([259,],[265,]),'for_counter_end':([260,],[266,]),'end_for':([272,],[274,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM g_main_quad ID add_program SEMICOLON vars funcs main end_program','program',9,'p_program','parser.py',64),
  ('add_program -> <empty>','add_program',0,'p_add_program','parser.py',67),
  ('end_program -> <empty>','end_program',0,'p_end_program','parser.py',85),
  ('main -> MAIN OPEN_PAREN CLOSE_PAREN fill_main_quad block','main',5,'p_main','parser.py',99),
  ('g_main_quad -> <empty>','g_main_quad',0,'p_g_main_quad','parser.py',102),
  ('fill_main_quad -> <empty>','fill_main_quad',0,'p_fill_main_quad','parser.py',108),
  ('funcs -> func_type MODULE ID add_module OPEN_PAREN funcs_params CLOSE_PAREN add_parameter_amount vars count_local_vars block end_funcs funcs','funcs',13,'p_funcs','parser.py',113),
  ('funcs -> empty','funcs',1,'p_funcs','parser.py',114),
  ('end_funcs -> <empty>','end_funcs',0,'p_end_funcs','parser.py',118),
  ('count_local_vars -> <empty>','count_local_vars',0,'p_count_local_vars','parser.py',129),
  ('add_module -> <empty>','add_module',0,'p_add_module','parser.py',139),
  ('funcs_comp -> ID add_module OPEN_PAREN funcs_params CLOSE_PAREN add_parameter_amount vars count_local_vars block end_funcs funcs','funcs_comp',11,'p_funcs_comp','parser.py',169),
  ('add_parameter_amount -> <empty>','add_parameter_amount',0,'p_add_parameter_amount','parser.py',172),
  ('funcs_params -> var_type variable_params funcs_params_comp','funcs_params',3,'p_funcs_params','parser.py',179),
  ('funcs_params -> empty','funcs_params',1,'p_funcs_params','parser.py',180),
  ('funcs_params_comp -> COMMA var_type variable_params funcs_params_comp','funcs_params_comp',4,'p_funcs_params_comp','parser.py',185),
  ('funcs_params_comp -> empty','funcs_params_comp',1,'p_funcs_params_comp','parser.py',186),
  ('variable_params -> ID','variable_params',1,'p_variable_params','parser.py',191),
  ('variable_params -> ID dim','variable_params',2,'p_variable_params','parser.py',192),
  ('block -> OPEN_BRACES statements CLOSE_BRACES','block',3,'p_block','parser.py',204),
  ('func_type -> var_type','func_type',1,'p_func_type','parser.py',208),
  ('func_type -> VOID','func_type',1,'p_func_type','parser.py',209),
  ('var_type -> INT','var_type',1,'p_var_type','parser.py',217),
  ('var_type -> FLOAT','var_type',1,'p_var_type','parser.py',218),
  ('var_type -> CHAR','var_type',1,'p_var_type','parser.py',219),
  ('vars -> VARS var_comp','vars',2,'p_vars','parser.py',227),
  ('vars -> empty','vars',1,'p_vars','parser.py',228),
  ('var_comp -> var_type ids_dec var_comp_2 var_comp_final','var_comp',4,'p_var_comp','parser.py',233),
  ('var_comp -> var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive','var_comp',5,'p_var_comp','parser.py',234),
  ('var_comp_2 -> COMMA ids_dec var_comp_3','var_comp_2',3,'p_var_comp_2','parser.py',238),
  ('var_comp_2 -> empty','var_comp_2',1,'p_var_comp_2','parser.py',239),
  ('var_comp_3 -> var_comp_2','var_comp_3',1,'p_var_comp_3','parser.py',243),
  ('var_comp_recursive -> var_type ids_dec var_comp_2 var_comp_final','var_comp_recursive',4,'p_var_comp_recursive','parser.py',246),
  ('var_comp_recursive -> var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive','var_comp_recursive',5,'p_var_comp_recursive','parser.py',247),
  ('var_comp_final -> SEMICOLON','var_comp_final',1,'p_var_comp_final','parser.py',251),
  ('var_comp_final -> var_module_trans','var_comp_final',1,'p_var_comp_final','parser.py',252),
  ('var_module_trans -> SEMICOLON var_type MODULE funcs_comp','var_module_trans',4,'p_var_module_trans','parser.py',257),
  ('ids_dec -> ids_dec_matrix','ids_dec',1,'p_ids_dec','parser.py',262),
  ('ids_dec -> ids_dec_array','ids_dec',1,'p_ids_dec','parser.py',263),
  ('ids_dec -> ids_dec_single','ids_dec',1,'p_ids_dec','parser.py',264),
  ('ids_dec_matrix -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS','ids_dec_matrix',7,'p_ids_dec_matrix','parser.py',268),
  ('ids_dec_array -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS','ids_dec_array',4,'p_ids_dec_array','parser.py',286),
  ('ids_dec_single -> ID','ids_dec_single',1,'p_ids_dec_single','parser.py',301),
  ('ids -> ids_matrix','ids',1,'p_ids','parser.py',314),
  ('ids -> ids_array','ids',1,'p_ids','parser.py',315),
  ('ids -> ids_single','ids',1,'p_ids','parser.py',316),
  ('ids_matrix -> ID OPEN_BRACKETS exp CLOSE_BRACKETS OPEN_BRACKETS exp CLOSE_BRACKETS','ids_matrix',7,'p_ids_matrix','parser.py',320),
  ('ids_array -> ID OPEN_BRACKETS exp CLOSE_BRACKETS','ids_array',4,'p_ids_array','parser.py',325),
  ('ids_single -> ID','ids_single',1,'p_ids_single','parser.py',353),
  ('statements -> assignment SEMICOLON statements','statements',3,'p_statements','parser.py',361),
  ('statements -> read SEMICOLON statements','statements',3,'p_statements','parser.py',362),
  ('statements -> write SEMICOLON statements','statements',3,'p_statements','parser.py',363),
  ('statements -> condition statements','statements',2,'p_statements','parser.py',364),
  ('statements -> return SEMICOLON statements','statements',3,'p_statements','parser.py',365),
  ('statements -> func_call SEMICOLON statements','statements',3,'p_statements','parser.py',366),
  ('statements -> empty','statements',1,'p_statements','parser.py',367),
  ('assignment -> ids ASSIGN expressions','assignment',3,'p_assignment','parser.py',372),
  ('read -> READ OPEN_PAREN ids g_quad_read read_comp CLOSE_PAREN','read',6,'p_read','parser.py',435),
  ('read_comp -> COMMA ids g_quad_read read_comp','read_comp',4,'p_read_comp','parser.py',441),
  ('read_comp -> empty','read_comp',1,'p_read_comp','parser.py',442),
  ('g_quad_read -> <empty>','g_quad_read',0,'p_g_quad_read','parser.py',447),
  ('write -> WRITE OPEN_PAREN CT_STRING g_quad_write_str write_comp CLOSE_PAREN','write',6,'p_write','parser.py',461),
  ('write -> WRITE OPEN_PAREN expressions g_quad_write write_comp CLOSE_PAREN','write',6,'p_write','parser.py',462),
  ('write_comp -> COMMA CT_STRING g_quad_write_str write_comp','write_comp',4,'p_write_comp','parser.py',468),
  ('write_comp -> COMMA expressions g_quad_write write_comp','write_comp',4,'p_write_comp','parser.py',469),
  ('write_comp -> empty','write_comp',1,'p_write_comp','parser.py',470),
  ('g_quad_write_str -> <empty>','g_quad_write_str',0,'p_g_quad_write_str','parser.py',475),
  ('g_quad_write -> <empty>','g_quad_write',0,'p_g_quad_write','parser.py',482),
  ('end_if -> <empty>','end_if',0,'p_end_if','parser.py',491),
  ('condition -> IF OPEN_PAREN expressions CLOSE_PAREN g_if_quad THEN block end_if','condition',8,'p_condition','parser.py',497),
  ('condition -> IF OPEN_PAREN expressions CLOSE_PAREN g_if_quad THEN block ELSE g_else_quad block end_if','condition',11,'p_condition','parser.py',498),
  ('condition -> WHILE while_jump OPEN_PAREN expressions CLOSE_PAREN g_while_quad DO block end_while','condition',9,'p_condition','parser.py',499),
  ('condition -> FOR ids validate_for ASSIGN expressions for_counter_control TO expressions for_counter_end DO block end_for','condition',12,'p_condition','parser.py',500),
  ('g_if_quad -> <empty>','g_if_quad',0,'p_g_if_quad','parser.py',505),
  ('g_else_quad -> <empty>','g_else_quad',0,'p_g_else_quad','parser.py',518),
  ('while_jump -> <empty>','while_jump',0,'p_while_jump','parser.py',531),
  ('g_while_quad -> <empty>','g_while_quad',0,'p_g_while_quad','parser.py',536),
  ('end_while -> <empty>','end_while',0,'p_end_while','parser.py',547),
  ('validate_for -> <empty>','validate_for',0,'p_validate_for','parser.py',555),
  ('for_counter_control -> <empty>','for_counter_control',0,'p_for_counter_control','parser.py',578),
  ('for_counter_end -> <empty>','for_counter_end',0,'p_for_counter_end','parser.py',602),
  ('end_for -> <empty>','end_for',0,'p_end_for','parser.py',626),
  ('return -> RETURN OPEN_PAREN expressions CLOSE_PAREN g_quad_return','return',5,'p_return','parser.py',642),
  ('g_quad_return -> <empty>','g_quad_return',0,'p_g_quad_return','parser.py',645),
  ('func_call -> ID verify_function_exists OPEN_PAREN era_activation func_call_comp CLOSE_PAREN g_gosub_quad function_call_end','func_call',8,'p_func_call','parser.py',658),
  ('function_call_end -> <empty>','function_call_end',0,'p_function_call_end','parser.py',662),
  ('g_gosub_quad -> <empty>','g_gosub_quad',0,'p_g_gosub_quad','parser.py',676),
  ('change_to_global -> <empty>','change_to_global',0,'p_change_to_global','parser.py',683),
  ('verify_function_exists -> <empty>','verify_function_exists',0,'p_verify_function_exists','parser.py',688),
  ('era_activation -> <empty>','era_activation',0,'p_era_activation','parser.py',697),
  ('func_call_comp -> expressions g_parameter_quad func_call_comp','func_call_comp',3,'p_func_call_comp','parser.py',704),
  ('func_call_comp -> COMMA expressions g_parameter_quad func_call_comp','func_call_comp',4,'p_func_call_comp','parser.py',705),
  ('func_call_comp -> empty','func_call_comp',1,'p_func_call_comp','parser.py',706),
  ('g_parameter_quad -> <empty>','g_parameter_quad',0,'p_g_parameter_quad','parser.py',710),
  ('expressions -> expressions_comp','expressions',1,'p_expressions','parser.py',744),
  ('expressions_comp -> expression_comp_2','expressions_comp',1,'p_expressions_comp','parser.py',748),
  ('expressions_comp -> expression_comp_2 OR expressions_comp','expressions_comp',3,'p_expressions_comp','parser.py',749),
  ('expression_comp_2 -> expression_comp_3','expression_comp_2',1,'p_expression_comp_2','parser.py',754),
  ('expression_comp_2 -> expression_comp_3 AND expression_comp_2','expression_comp_2',3,'p_expression_comp_2','parser.py',755),
  ('expression_comp_3 -> exp expressions_op exp g_quad_logic','expression_comp_3',4,'p_expression_comp_3','parser.py',760),
  ('expression_comp_3 -> exp','expression_comp_3',1,'p_expression_comp_3','parser.py',761),
  ('g_quad_logic -> <empty>','g_quad_logic',0,'p_g_quad_logic','parser.py',765),
  ('expressions_op -> LESS_THAN add_op','expressions_op',2,'p_expressions_op','parser.py',770),
  ('expressions_op -> LESS_THAN_EQUAL add_op','expressions_op',2,'p_expressions_op','parser.py',771),
  ('expressions_op -> MORE_THAN add_op','expressions_op',2,'p_expressions_op','parser.py',772),
  ('expressions_op -> MORE_THAN_EQUAL add_op','expressions_op',2,'p_expressions_op','parser.py',773),
  ('expressions_op -> EQUALS add_op','expressions_op',2,'p_expressions_op','parser.py',774),
  ('expressions_op -> NOT_EQUALS add_op','expressions_op',2,'p_expressions_op','parser.py',775),
  ('exp -> term g_quad_exp_as_alone','exp',2,'p_exp','parser.py',781),
  ('exp -> term g_quad_exp_as exp_comp','exp',3,'p_exp','parser.py',782),
  ('g_quad_exp_as -> <empty>','g_quad_exp_as',0,'p_g_quad_exp_as','parser.py',787),
  ('g_quad_exp_as_alone -> <empty>','g_quad_exp_as_alone',0,'p_g_quad_exp_as_alone','parser.py',791),
  ('exp_comp -> PLUS add_op exp','exp_comp',3,'p_exp_comp','parser.py',796),
  ('exp_comp -> MINUS add_op exp','exp_comp',3,'p_exp_comp','parser.py',797),
  ('term -> factor g_quad_exp_md_alone','term',2,'p_term','parser.py',802),
  ('term -> factor g_quad_exp_md term_comp','term',3,'p_term','parser.py',803),
  ('g_quad_exp_md -> <empty>','g_quad_exp_md',0,'p_g_quad_exp_md','parser.py',808),
  ('g_quad_exp_md_alone -> <empty>','g_quad_exp_md_alone',0,'p_g_quad_exp_md_alone','parser.py',813),
  ('term_comp -> MULTIPLIES add_op term','term_comp',3,'p_term_comp','parser.py',818),
  ('term_comp -> DIVIDE add_op term','term_comp',3,'p_term_comp','parser.py',819),
  ('add_op -> <empty>','add_op',0,'p_add_op','parser.py',823),
  ('factor -> OPEN_PAREN add_fake expressions CLOSE_PAREN rem_fake','factor',5,'p_factor','parser.py',1010),
  ('factor -> variable','factor',1,'p_factor','parser.py',1011),
  ('factor -> func_call','factor',1,'p_factor','parser.py',1012),
  ('factor -> CT_INT add_ct_int','factor',2,'p_factor','parser.py',1013),
  ('factor -> CT_FLOAT add_ct_float','factor',2,'p_factor','parser.py',1014),
  ('factor -> CT_CHAR add_ct_char','factor',2,'p_factor','parser.py',1015),
  ('add_fake -> <empty>','add_fake',0,'p_add_fake','parser.py',1019),
  ('rem_fake -> <empty>','rem_fake',0,'p_rem_fake','parser.py',1023),
  ('add_ct_int -> <empty>','add_ct_int',0,'p_add_ct_int','parser.py',1028),
  ('add_ct_float -> <empty>','add_ct_float',0,'p_add_ct_float','parser.py',1035),
  ('add_ct_char -> <empty>','add_ct_char',0,'p_add_ct_char','parser.py',1042),
  ('variable -> ID add_id','variable',2,'p_variable','parser.py',1050),
  ('variable -> ID dim','variable',2,'p_variable','parser.py',1051),
  ('add_id -> <empty>','add_id',0,'p_add_id','parser.py',1056),
  ('dim -> dim_array','dim',1,'p_dim','parser.py',1077),
  ('dim -> dim_matrix','dim',1,'p_dim','parser.py',1078),
  ('dim -> empty','dim',1,'p_dim','parser.py',1079),
  ('dim_array -> OPEN_BRACKETS expressions CLOSE_BRACKETS','dim_array',3,'p_dim_array','parser.py',1083),
  ('dim_matrix -> OPEN_BRACKETS expressions CLOSE_BRACKETS OPEN_BRACKETS expressions CLOSE_BRACKETS','dim_matrix',6,'p_dim_matrix','parser.py',1107),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',1112),
]
