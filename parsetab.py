
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN CHAR CLOSE_BRACES CLOSE_BRACKETS CLOSE_PAREN COMMA CT_CHAR CT_FLOAT CT_INT CT_STRING DIVIDE DO ELSE EQUALS FLOAT FOR ID IF INT LESS_THAN LESS_THAN_EQUAL MAIN MINUS MODULE MORE_THAN MORE_THAN_EQUAL MULTIPLIES NOT_EQUALS OPEN_BRACES OPEN_BRACKETS OPEN_PAREN OR PLUS PROGRAM READ RETURN SEMICOLON THEN TO VARS VOID WHILE WRITEprogram : PROGRAM ID add_program SEMICOLON vars funcs main end_programadd_program : end_program : main : MAIN main_start OPEN_PAREN CLOSE_PAREN blockmain_start :funcs : func_type MODULE ID add_module OPEN_PAREN funcs_params CLOSE_PAREN vars block\n    | empty\n    add_module :funcs_comp : ID add_module OPEN_PAREN funcs_params CLOSE_PAREN vars blockfuncs_params : var_type variable_params funcs_params_comp\n    | empty\n    funcs_params_comp : COMMA var_type variable_params funcs_params_comp\n    | empty\n    variable_params : ID\n    | ID dim\n    block : OPEN_BRACES statements CLOSE_BRACESfunc_type : var_type\n    | VOID\n    var_type : INT\n    | FLOAT\n    | CHAR\n    vars : VARS var_comp\n    | empty\n    var_comp : var_type ids_dec var_comp_2 var_comp_final\n    | var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive\n    var_comp_2 : COMMA ids_dec var_comp_3\n    | empty\n    var_comp_3 : var_comp_2var_comp_recursive : var_type ids_dec var_comp_2 var_comp_final\n    | var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive\n    var_comp_final : SEMICOLON\n    | var_module_trans\n    var_module_trans : SEMICOLON var_type MODULE funcs_comp\n    ids_dec : ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS\n    | ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS\n    | ID\n    ids : ID OPEN_BRACKETS exp CLOSE_BRACKETS OPEN_BRACKETS exp CLOSE_BRACKETS\n    | ID OPEN_BRACKETS exp CLOSE_BRACKETS\n    | ID\n    statements : assignment SEMICOLON statements\n    | read SEMICOLON statements \n    | write SEMICOLON statements\n    | condition statements\n    | return SEMICOLON statements\n    | func_call SEMICOLON statements\n    | empty\n    assignment : ids ASSIGN expressionsread : READ OPEN_PAREN ids g_quad_read read_comp CLOSE_PARENread_comp : COMMA ids g_quad_read read_comp\n    | empty \n    g_quad_read : write : WRITE OPEN_PAREN CT_STRING g_quad_write_str write_comp CLOSE_PAREN\n    | WRITE OPEN_PAREN expressions g_quad_write write_comp CLOSE_PAREN\n    write_comp : COMMA CT_STRING g_quad_write_str write_comp\n    | COMMA expressions g_quad_write write_comp\n    | empty\n    g_quad_write_str : g_quad_write : end_if : condition : IF OPEN_PAREN expressions CLOSE_PAREN g_if_quad THEN block end_if\n    | IF OPEN_PAREN expressions CLOSE_PAREN g_if_quad THEN block ELSE g_else_quad block end_if\n    | WHILE while_jump OPEN_PAREN expressions CLOSE_PAREN g_while_quad DO block end_while\n    | FOR ids validate_for ASSIGN expressions for_counter_control TO expressions for_counter_end DO block end_for\n    g_if_quad :g_else_quad :while_jump :g_while_quad :end_while :validate_for :for_counter_control :for_counter_end :end_for :return : RETURN OPEN_PAREN exp CLOSE_PARENfunc_call : ID OPEN_PAREN func_call_comp CLOSE_PAREN\n    func_call_comp : expressions func_call_comp\n    | COMMA expressions func_call_comp\n    | empty\n    expressions : expressions_compexpressions_comp : expression_comp_2\n    | expression_comp_2 OR expressions_comp\n    expression_comp_2 : expression_comp_3\n    | expression_comp_3 AND expression_comp_2\n    expression_comp_3 : exp expressions_op exp g_quad_logic\n    | exp\n    g_quad_logic : expressions_op : LESS_THAN add_op\n    | LESS_THAN_EQUAL add_op\n    | MORE_THAN add_op\n    | MORE_THAN_EQUAL add_op\n    | EQUALS add_op\n    | NOT_EQUALS add_op\n    exp : term g_quad_exp_as\n    | term g_quad_exp_as exp_comp\n    g_quad_exp_as : exp_comp : PLUS add_op exp\n    | MINUS add_op exp\n    term : factor g_quad_exp_md\n    | factor g_quad_exp_md term_comp\n    g_quad_exp_md : term_comp : MULTIPLIES add_op term\n    | DIVIDE add_op term\n    add_op : factor : OPEN_PAREN add_fake expressions CLOSE_PAREN rem_fake\n    | variable \n    | func_call\n    | CT_INT add_ct_int\n    | CT_FLOAT add_ct_float\n    | CT_CHAR add_ct_char\n    add_fake : rem_fake : add_ct_int : add_ct_float : add_ct_char : variable : ID add_id\n    | ID dim\n    add_id : dim : OPEN_BRACKETS exp CLOSE_BRACKETSempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,19,24,45,76,],[0,-3,-1,-4,-16,]),'ID':([2,14,15,16,18,21,28,40,46,48,50,57,66,76,77,78,79,81,82,83,84,85,86,90,91,92,98,109,110,111,112,113,114,115,116,117,118,119,120,121,126,130,131,135,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,161,163,165,168,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,187,190,197,200,201,202,203,204,205,217,218,219,220,221,225,227,233,235,238,240,242,243,244,],[3,-19,-20,-21,23,26,23,23,68,71,73,68,89,-16,68,68,68,68,68,121,89,121,121,121,121,121,121,-78,-79,-81,-84,-94,-99,-109,-104,-105,-111,-112,-113,-116,121,121,121,71,121,121,121,-102,-102,-102,-102,-102,-102,-92,-97,121,-106,-107,-108,-114,-115,121,-74,121,-117,-80,-82,-85,-86,-87,-88,-89,-90,-91,-93,-102,-102,-98,-102,-102,89,121,121,-83,121,121,121,121,-110,-95,-96,-100,-101,-103,-59,121,-60,-68,-62,-59,-61,-72,-63,]),'SEMICOLON':([3,4,22,23,27,29,36,42,43,44,51,54,55,56,58,59,74,102,108,109,110,111,112,113,114,116,117,118,119,120,121,148,149,151,152,153,154,155,162,163,168,170,171,172,179,182,200,205,206,208,211,217,218,219,220,221,],[-2,5,-118,-36,34,-27,-118,-26,-28,-35,-118,77,78,79,81,82,101,-34,-47,-78,-79,-81,-84,-94,-99,-104,-105,-111,-112,-113,-116,-92,-97,-106,-107,-108,-114,-115,-73,-74,-117,-80,-82,-85,-93,-98,-83,-110,-48,-52,-53,-95,-96,-100,-101,-103,]),'VARS':([5,69,199,],[7,7,7,]),'VOID':([5,6,8,17,33,34,35,41,72,76,100,101,138,229,],[-118,13,-23,-22,-24,-31,-32,-25,-33,-16,-29,-31,-30,-9,]),'INT':([5,6,7,8,17,33,34,35,39,41,72,76,95,100,101,137,138,229,],[-118,14,14,-23,-22,-24,14,-32,14,-25,-33,-16,14,-29,14,14,-30,-9,]),'FLOAT':([5,6,7,8,17,33,34,35,39,41,72,76,95,100,101,137,138,229,],[-118,15,15,-23,-22,-24,15,-32,15,-25,-33,-16,15,-29,15,15,-30,-9,]),'CHAR':([5,6,7,8,17,33,34,35,39,41,72,76,95,100,101,137,138,229,],[-118,16,16,-23,-22,-24,16,-32,16,-25,-33,-16,16,-29,16,16,-30,-9,]),'MAIN':([5,6,8,9,11,17,33,34,35,41,72,76,100,101,134,138,229,],[-118,-118,-23,20,-7,-22,-24,-31,-32,-25,-33,-16,-29,-31,-6,-30,-9,]),'OPEN_BRACES':([8,17,33,34,35,38,41,69,72,76,93,100,101,138,199,212,216,226,229,234,237,241,],[-23,-22,-24,-31,-32,46,-25,-118,-33,-16,46,-29,-31,-30,-118,46,46,46,-9,-65,46,46,]),'MODULE':([10,12,13,14,15,16,40,],[21,-17,-18,-19,-20,-21,50,]),'OPEN_PAREN':([20,25,26,32,62,63,64,65,67,68,73,83,85,86,87,90,91,92,98,99,109,110,111,112,113,114,115,116,117,118,119,120,121,126,130,131,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,161,163,165,168,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,190,197,200,201,202,203,204,205,217,218,219,220,221,227,],[-5,31,-8,39,84,85,86,-66,90,91,-8,115,115,115,126,115,115,115,115,137,-78,-79,-81,-84,-94,-99,-109,-104,-105,-111,-112,-113,91,115,115,115,115,115,115,-102,-102,-102,-102,-102,-102,-92,-97,115,-106,-107,-108,-114,-115,115,-74,115,-117,-80,-82,-85,-86,-87,-88,-89,-90,-91,-93,-102,-102,-98,-102,-102,115,115,-83,115,115,115,115,-110,-95,-96,-100,-101,-103,115,]),'COMMA':([22,23,36,44,51,70,71,89,91,97,102,109,110,111,112,113,114,116,117,118,119,120,121,122,123,124,130,148,149,151,152,153,154,155,156,157,158,163,165,166,167,168,170,171,172,179,182,200,205,207,209,210,217,218,219,220,221,222,223,224,228,],[28,-36,28,-35,28,95,-14,-39,131,-15,-34,-78,-79,-81,-84,-94,-99,-104,-105,-111,-112,-113,-116,-51,-57,-58,131,-92,-97,-106,-107,-108,-114,-115,187,190,190,-74,131,-38,95,-117,-80,-82,-85,-93,-98,-83,-110,-51,-57,-58,-95,-96,-100,-101,-103,187,190,190,-37,]),'OPEN_BRACKETS':([23,44,68,71,89,121,166,],[30,52,92,98,92,98,197,]),'CT_INT':([30,52,83,85,86,90,91,92,98,109,110,111,112,113,114,115,116,117,118,119,120,121,126,130,131,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,161,163,165,168,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,190,197,200,201,202,203,204,205,217,218,219,220,221,227,],[37,75,118,118,118,118,118,118,118,-78,-79,-81,-84,-94,-99,-109,-104,-105,-111,-112,-113,-116,118,118,118,118,118,118,-102,-102,-102,-102,-102,-102,-92,-97,118,-106,-107,-108,-114,-115,118,-74,118,-117,-80,-82,-85,-86,-87,-88,-89,-90,-91,-93,-102,-102,-98,-102,-102,118,118,-83,118,118,118,118,-110,-95,-96,-100,-101,-103,118,]),'CLOSE_PAREN':([31,39,47,49,70,71,89,91,94,96,97,109,110,111,112,113,114,116,117,118,119,120,121,122,123,124,125,128,129,130,132,137,148,149,151,152,153,154,155,156,157,158,160,163,164,165,166,167,168,169,170,171,172,179,182,185,186,188,189,191,192,196,198,200,205,207,209,210,217,218,219,220,221,222,223,224,228,230,231,232,],[38,-118,69,-11,-118,-14,-39,-118,-10,-13,-15,-78,-79,-81,-84,-94,-99,-104,-105,-111,-112,-113,-116,-51,-57,-58,159,162,163,-118,-77,-118,-92,-97,-106,-107,-108,-114,-115,-118,-118,-118,194,-74,-75,-118,-38,-118,-117,199,-80,-82,-85,-93,-98,205,206,-50,208,-56,211,-76,-12,-83,-110,-51,-57,-58,-95,-96,-100,-101,-103,-118,-118,-118,-37,-49,-54,-55,]),'CLOSE_BRACKETS':([37,75,113,114,116,117,118,119,120,121,133,136,148,149,151,152,153,154,155,163,168,179,182,205,215,217,218,219,220,221,],[44,102,-94,-99,-104,-105,-111,-112,-113,-116,166,168,-92,-97,-106,-107,-108,-114,-115,-74,-117,-93,-98,-110,228,-95,-96,-100,-101,-103,]),'READ':([46,57,76,77,78,79,81,82,225,233,235,238,240,242,243,244,],[62,62,-16,62,62,62,62,62,-59,-60,-68,-62,-59,-61,-72,-63,]),'WRITE':([46,57,76,77,78,79,81,82,225,233,235,238,240,242,243,244,],[63,63,-16,63,63,63,63,63,-59,-60,-68,-62,-59,-61,-72,-63,]),'IF':([46,57,76,77,78,79,81,82,225,233,235,238,240,242,243,244,],[64,64,-16,64,64,64,64,64,-59,-60,-68,-62,-59,-61,-72,-63,]),'WHILE':([46,57,76,77,78,79,81,82,225,233,235,238,240,242,243,244,],[65,65,-16,65,65,65,65,65,-59,-60,-68,-62,-59,-61,-72,-63,]),'FOR':([46,57,76,77,78,79,81,82,225,233,235,238,240,242,243,244,],[66,66,-16,66,66,66,66,66,-59,-60,-68,-62,-59,-61,-72,-63,]),'RETURN':([46,57,76,77,78,79,81,82,225,233,235,238,240,242,243,244,],[67,67,-16,67,67,67,67,67,-59,-60,-68,-62,-59,-61,-72,-63,]),'CLOSE_BRACES':([46,53,57,60,76,77,78,79,80,81,82,103,104,105,106,107,225,233,235,238,240,242,243,244,],[-118,76,-118,-46,-16,-118,-118,-118,-43,-118,-118,-40,-41,-42,-44,-45,-59,-60,-68,-62,-59,-61,-72,-63,]),'ASSIGN':([61,68,88,89,127,166,228,],[83,-39,-69,-39,161,-38,-37,]),'ELSE':([76,225,],[-16,234,]),'CT_FLOAT':([83,85,86,90,91,92,98,109,110,111,112,113,114,115,116,117,118,119,120,121,126,130,131,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,161,163,165,168,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,190,197,200,201,202,203,204,205,217,218,219,220,221,227,],[119,119,119,119,119,119,119,-78,-79,-81,-84,-94,-99,-109,-104,-105,-111,-112,-113,-116,119,119,119,119,119,119,-102,-102,-102,-102,-102,-102,-92,-97,119,-106,-107,-108,-114,-115,119,-74,119,-117,-80,-82,-85,-86,-87,-88,-89,-90,-91,-93,-102,-102,-98,-102,-102,119,119,-83,119,119,119,119,-110,-95,-96,-100,-101,-103,119,]),'CT_CHAR':([83,85,86,90,91,92,98,109,110,111,112,113,114,115,116,117,118,119,120,121,126,130,131,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,161,163,165,168,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,190,197,200,201,202,203,204,205,217,218,219,220,221,227,],[120,120,120,120,120,120,120,-78,-79,-81,-84,-94,-99,-109,-104,-105,-111,-112,-113,-116,120,120,120,120,120,120,-102,-102,-102,-102,-102,-102,-92,-97,120,-106,-107,-108,-114,-115,120,-74,120,-117,-80,-82,-85,-86,-87,-88,-89,-90,-91,-93,-102,-102,-98,-102,-102,120,120,-83,120,120,120,120,-110,-95,-96,-100,-101,-103,120,]),'CT_STRING':([85,190,],[123,209,]),'TO':([109,110,111,112,113,114,116,117,118,119,120,121,148,149,151,152,153,154,155,163,168,170,171,172,179,182,195,200,205,214,217,218,219,220,221,],[-78,-79,-81,-84,-94,-99,-104,-105,-111,-112,-113,-116,-92,-97,-106,-107,-108,-114,-115,-74,-117,-80,-82,-85,-93,-98,-70,-83,-110,227,-95,-96,-100,-101,-103,]),'DO':([109,110,111,112,113,114,116,117,118,119,120,121,148,149,151,152,153,154,155,163,168,170,171,172,179,182,194,200,205,213,217,218,219,220,221,236,239,],[-78,-79,-81,-84,-94,-99,-104,-105,-111,-112,-113,-116,-92,-97,-106,-107,-108,-114,-115,-74,-117,-80,-82,-85,-93,-98,-67,-83,-110,226,-95,-96,-100,-101,-103,-71,241,]),'OR':([110,111,112,113,114,116,117,118,119,120,121,148,149,151,152,153,154,155,163,168,171,172,179,182,200,205,217,218,219,220,221,],[139,-81,-84,-94,-99,-104,-105,-111,-112,-113,-116,-92,-97,-106,-107,-108,-114,-115,-74,-117,-82,-85,-93,-98,-83,-110,-95,-96,-100,-101,-103,]),'AND':([111,112,113,114,116,117,118,119,120,121,148,149,151,152,153,154,155,163,168,172,179,182,200,205,217,218,219,220,221,],[140,-84,-94,-99,-104,-105,-111,-112,-113,-116,-92,-97,-106,-107,-108,-114,-115,-74,-117,-85,-93,-98,-83,-110,-95,-96,-100,-101,-103,]),'LESS_THAN':([112,113,114,116,117,118,119,120,121,148,149,151,152,153,154,155,163,168,179,182,205,217,218,219,220,221,],[142,-94,-99,-104,-105,-111,-112,-113,-116,-92,-97,-106,-107,-108,-114,-115,-74,-117,-93,-98,-110,-95,-96,-100,-101,-103,]),'LESS_THAN_EQUAL':([112,113,114,116,117,118,119,120,121,148,149,151,152,153,154,155,163,168,179,182,205,217,218,219,220,221,],[143,-94,-99,-104,-105,-111,-112,-113,-116,-92,-97,-106,-107,-108,-114,-115,-74,-117,-93,-98,-110,-95,-96,-100,-101,-103,]),'MORE_THAN':([112,113,114,116,117,118,119,120,121,148,149,151,152,153,154,155,163,168,179,182,205,217,218,219,220,221,],[144,-94,-99,-104,-105,-111,-112,-113,-116,-92,-97,-106,-107,-108,-114,-115,-74,-117,-93,-98,-110,-95,-96,-100,-101,-103,]),'MORE_THAN_EQUAL':([112,113,114,116,117,118,119,120,121,148,149,151,152,153,154,155,163,168,179,182,205,217,218,219,220,221,],[145,-94,-99,-104,-105,-111,-112,-113,-116,-92,-97,-106,-107,-108,-114,-115,-74,-117,-93,-98,-110,-95,-96,-100,-101,-103,]),'EQUALS':([112,113,114,116,117,118,119,120,121,148,149,151,152,153,154,155,163,168,179,182,205,217,218,219,220,221,],[146,-94,-99,-104,-105,-111,-112,-113,-116,-92,-97,-106,-107,-108,-114,-115,-74,-117,-93,-98,-110,-95,-96,-100,-101,-103,]),'NOT_EQUALS':([112,113,114,116,117,118,119,120,121,148,149,151,152,153,154,155,163,168,179,182,205,217,218,219,220,221,],[147,-94,-99,-104,-105,-111,-112,-113,-116,-92,-97,-106,-107,-108,-114,-115,-74,-117,-93,-98,-110,-95,-96,-100,-101,-103,]),'PLUS':([113,114,116,117,118,119,120,121,148,149,151,152,153,154,155,163,168,182,205,219,220,221,],[-94,-99,-104,-105,-111,-112,-113,-116,180,-97,-106,-107,-108,-114,-115,-74,-117,-98,-110,-100,-101,-103,]),'MINUS':([113,114,116,117,118,119,120,121,148,149,151,152,153,154,155,163,168,182,205,219,220,221,],[-94,-99,-104,-105,-111,-112,-113,-116,181,-97,-106,-107,-108,-114,-115,-74,-117,-98,-110,-100,-101,-103,]),'MULTIPLIES':([114,116,117,118,119,120,121,149,151,152,153,154,155,163,168,205,221,],[-99,-104,-105,-111,-112,-113,-116,183,-106,-107,-108,-114,-115,-74,-117,-110,-103,]),'DIVIDE':([114,116,117,118,119,120,121,149,151,152,153,154,155,163,168,205,221,],[-99,-104,-105,-111,-112,-113,-116,184,-106,-107,-108,-114,-115,-74,-117,-110,-103,]),'THEN':([159,193,],[-64,212,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'add_program':([3,],[4,]),'vars':([5,69,199,],[6,93,216,]),'empty':([5,6,22,36,39,46,51,57,69,70,77,78,79,81,82,91,130,137,156,157,158,165,167,199,222,223,224,],[8,11,29,29,49,60,29,60,8,96,60,60,60,60,60,132,132,49,188,191,191,132,96,8,188,191,191,]),'funcs':([6,],[9,]),'func_type':([6,],[10,]),'var_type':([6,7,34,39,95,101,137,],[12,18,40,48,135,40,48,]),'var_comp':([7,],[17,]),'main':([9,],[19,]),'ids_dec':([18,28,40,],[22,36,51,]),'end_program':([19,],[24,]),'main_start':([20,],[25,]),'var_comp_2':([22,36,51,],[27,43,74,]),'add_module':([26,73,],[32,99,]),'var_comp_final':([27,74,],[33,100,]),'var_module_trans':([27,74,],[35,35,]),'var_comp_recursive':([34,101,],[41,138,]),'var_comp_3':([36,],[42,]),'block':([38,93,212,216,226,237,241,],[45,134,225,229,235,240,243,]),'funcs_params':([39,137,],[47,169,]),'statements':([46,57,77,78,79,81,82,],[53,80,103,104,105,106,107,]),'assignment':([46,57,77,78,79,81,82,],[54,54,54,54,54,54,54,]),'read':([46,57,77,78,79,81,82,],[55,55,55,55,55,55,55,]),'write':([46,57,77,78,79,81,82,],[56,56,56,56,56,56,56,]),'condition':([46,57,77,78,79,81,82,],[57,57,57,57,57,57,57,]),'return':([46,57,77,78,79,81,82,],[58,58,58,58,58,58,58,]),'func_call':([46,57,77,78,79,81,82,83,85,86,90,91,92,98,126,130,131,139,140,141,150,161,165,190,197,201,202,203,204,227,],[59,59,59,59,59,59,59,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,]),'ids':([46,57,66,77,78,79,81,82,84,187,],[61,61,88,61,61,61,61,61,122,207,]),'variable_params':([48,135,],[70,167,]),'funcs_comp':([50,],[72,]),'while_jump':([65,],[87,]),'funcs_params_comp':([70,167,],[94,198,]),'dim':([71,121,],[97,155,]),'expressions':([83,85,86,91,126,130,131,150,161,165,190,227,],[108,124,125,130,160,130,165,185,195,130,210,236,]),'expressions_comp':([83,85,86,91,126,130,131,139,150,161,165,190,227,],[109,109,109,109,109,109,109,170,109,109,109,109,109,]),'expression_comp_2':([83,85,86,91,126,130,131,139,140,150,161,165,190,227,],[110,110,110,110,110,110,110,110,171,110,110,110,110,110,]),'expression_comp_3':([83,85,86,91,126,130,131,139,140,150,161,165,190,227,],[111,111,111,111,111,111,111,111,111,111,111,111,111,111,]),'exp':([83,85,86,90,91,92,98,126,130,131,139,140,141,150,161,165,190,197,201,202,227,],[112,112,112,128,112,133,136,112,112,112,112,112,172,112,112,112,112,215,217,218,112,]),'term':([83,85,86,90,91,92,98,126,130,131,139,140,141,150,161,165,190,197,201,202,203,204,227,],[113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,219,220,113,]),'factor':([83,85,86,90,91,92,98,126,130,131,139,140,141,150,161,165,190,197,201,202,203,204,227,],[114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,]),'variable':([83,85,86,90,91,92,98,126,130,131,139,140,141,150,161,165,190,197,201,202,203,204,227,],[116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,]),'validate_for':([88,],[127,]),'func_call_comp':([91,130,165,],[129,164,196,]),'expressions_op':([112,],[141,]),'g_quad_exp_as':([113,],[148,]),'g_quad_exp_md':([114,],[149,]),'add_fake':([115,],[150,]),'add_ct_int':([118,],[151,]),'add_ct_float':([119,],[152,]),'add_ct_char':([120,],[153,]),'add_id':([121,],[154,]),'g_quad_read':([122,207,],[156,222,]),'g_quad_write_str':([123,209,],[157,223,]),'g_quad_write':([124,210,],[158,224,]),'add_op':([142,143,144,145,146,147,180,181,183,184,],[173,174,175,176,177,178,201,202,203,204,]),'exp_comp':([148,],[179,]),'term_comp':([149,],[182,]),'read_comp':([156,222,],[186,230,]),'write_comp':([157,158,223,224,],[189,192,231,232,]),'g_if_quad':([159,],[193,]),'g_quad_logic':([172,],[200,]),'g_while_quad':([194,],[213,]),'for_counter_control':([195,],[214,]),'rem_fake':([205,],[221,]),'end_if':([225,240,],[233,242,]),'g_else_quad':([234,],[237,]),'end_while':([235,],[238,]),'for_counter_end':([236,],[239,]),'end_for':([243,],[244,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID add_program SEMICOLON vars funcs main end_program','program',8,'p_program','parser.py',60),
  ('add_program -> <empty>','add_program',0,'p_add_program','parser.py',63),
  ('end_program -> <empty>','end_program',0,'p_end_program','parser.py',80),
  ('main -> MAIN main_start OPEN_PAREN CLOSE_PAREN block','main',5,'p_main','parser.py',92),
  ('main_start -> <empty>','main_start',0,'p_main_start','parser.py',95),
  ('funcs -> func_type MODULE ID add_module OPEN_PAREN funcs_params CLOSE_PAREN vars block','funcs',9,'p_funcs','parser.py',101),
  ('funcs -> empty','funcs',1,'p_funcs','parser.py',102),
  ('add_module -> <empty>','add_module',0,'p_add_module','parser.py',106),
  ('funcs_comp -> ID add_module OPEN_PAREN funcs_params CLOSE_PAREN vars block','funcs_comp',7,'p_funcs_comp','parser.py',133),
  ('funcs_params -> var_type variable_params funcs_params_comp','funcs_params',3,'p_funcs_params','parser.py',137),
  ('funcs_params -> empty','funcs_params',1,'p_funcs_params','parser.py',138),
  ('funcs_params_comp -> COMMA var_type variable_params funcs_params_comp','funcs_params_comp',4,'p_funcs_params_comp','parser.py',144),
  ('funcs_params_comp -> empty','funcs_params_comp',1,'p_funcs_params_comp','parser.py',145),
  ('variable_params -> ID','variable_params',1,'p_variable_params','parser.py',150),
  ('variable_params -> ID dim','variable_params',2,'p_variable_params','parser.py',151),
  ('block -> OPEN_BRACES statements CLOSE_BRACES','block',3,'p_block','parser.py',160),
  ('func_type -> var_type','func_type',1,'p_func_type','parser.py',164),
  ('func_type -> VOID','func_type',1,'p_func_type','parser.py',165),
  ('var_type -> INT','var_type',1,'p_var_type','parser.py',173),
  ('var_type -> FLOAT','var_type',1,'p_var_type','parser.py',174),
  ('var_type -> CHAR','var_type',1,'p_var_type','parser.py',175),
  ('vars -> VARS var_comp','vars',2,'p_vars','parser.py',183),
  ('vars -> empty','vars',1,'p_vars','parser.py',184),
  ('var_comp -> var_type ids_dec var_comp_2 var_comp_final','var_comp',4,'p_var_comp','parser.py',189),
  ('var_comp -> var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive','var_comp',5,'p_var_comp','parser.py',190),
  ('var_comp_2 -> COMMA ids_dec var_comp_3','var_comp_2',3,'p_var_comp_2','parser.py',194),
  ('var_comp_2 -> empty','var_comp_2',1,'p_var_comp_2','parser.py',195),
  ('var_comp_3 -> var_comp_2','var_comp_3',1,'p_var_comp_3','parser.py',199),
  ('var_comp_recursive -> var_type ids_dec var_comp_2 var_comp_final','var_comp_recursive',4,'p_var_comp_recursive','parser.py',202),
  ('var_comp_recursive -> var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive','var_comp_recursive',5,'p_var_comp_recursive','parser.py',203),
  ('var_comp_final -> SEMICOLON','var_comp_final',1,'p_var_comp_final','parser.py',207),
  ('var_comp_final -> var_module_trans','var_comp_final',1,'p_var_comp_final','parser.py',208),
  ('var_module_trans -> SEMICOLON var_type MODULE funcs_comp','var_module_trans',4,'p_var_module_trans','parser.py',213),
  ('ids_dec -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS','ids_dec',7,'p_ids_dec','parser.py',218),
  ('ids_dec -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS','ids_dec',4,'p_ids_dec','parser.py',219),
  ('ids_dec -> ID','ids_dec',1,'p_ids_dec','parser.py',220),
  ('ids -> ID OPEN_BRACKETS exp CLOSE_BRACKETS OPEN_BRACKETS exp CLOSE_BRACKETS','ids',7,'p_ids','parser.py',233),
  ('ids -> ID OPEN_BRACKETS exp CLOSE_BRACKETS','ids',4,'p_ids','parser.py',234),
  ('ids -> ID','ids',1,'p_ids','parser.py',235),
  ('statements -> assignment SEMICOLON statements','statements',3,'p_statements','parser.py',242),
  ('statements -> read SEMICOLON statements','statements',3,'p_statements','parser.py',243),
  ('statements -> write SEMICOLON statements','statements',3,'p_statements','parser.py',244),
  ('statements -> condition statements','statements',2,'p_statements','parser.py',245),
  ('statements -> return SEMICOLON statements','statements',3,'p_statements','parser.py',246),
  ('statements -> func_call SEMICOLON statements','statements',3,'p_statements','parser.py',247),
  ('statements -> empty','statements',1,'p_statements','parser.py',248),
  ('assignment -> ids ASSIGN expressions','assignment',3,'p_assignment','parser.py',253),
  ('read -> READ OPEN_PAREN ids g_quad_read read_comp CLOSE_PAREN','read',6,'p_read','parser.py',272),
  ('read_comp -> COMMA ids g_quad_read read_comp','read_comp',4,'p_read_comp','parser.py',277),
  ('read_comp -> empty','read_comp',1,'p_read_comp','parser.py',278),
  ('g_quad_read -> <empty>','g_quad_read',0,'p_g_quad_read','parser.py',283),
  ('write -> WRITE OPEN_PAREN CT_STRING g_quad_write_str write_comp CLOSE_PAREN','write',6,'p_write','parser.py',295),
  ('write -> WRITE OPEN_PAREN expressions g_quad_write write_comp CLOSE_PAREN','write',6,'p_write','parser.py',296),
  ('write_comp -> COMMA CT_STRING g_quad_write_str write_comp','write_comp',4,'p_write_comp','parser.py',301),
  ('write_comp -> COMMA expressions g_quad_write write_comp','write_comp',4,'p_write_comp','parser.py',302),
  ('write_comp -> empty','write_comp',1,'p_write_comp','parser.py',303),
  ('g_quad_write_str -> <empty>','g_quad_write_str',0,'p_g_quad_write_str','parser.py',308),
  ('g_quad_write -> <empty>','g_quad_write',0,'p_g_quad_write','parser.py',315),
  ('end_if -> <empty>','end_if',0,'p_end_if','parser.py',322),
  ('condition -> IF OPEN_PAREN expressions CLOSE_PAREN g_if_quad THEN block end_if','condition',8,'p_condition','parser.py',328),
  ('condition -> IF OPEN_PAREN expressions CLOSE_PAREN g_if_quad THEN block ELSE g_else_quad block end_if','condition',11,'p_condition','parser.py',329),
  ('condition -> WHILE while_jump OPEN_PAREN expressions CLOSE_PAREN g_while_quad DO block end_while','condition',9,'p_condition','parser.py',330),
  ('condition -> FOR ids validate_for ASSIGN expressions for_counter_control TO expressions for_counter_end DO block end_for','condition',12,'p_condition','parser.py',331),
  ('g_if_quad -> <empty>','g_if_quad',0,'p_g_if_quad','parser.py',336),
  ('g_else_quad -> <empty>','g_else_quad',0,'p_g_else_quad','parser.py',348),
  ('while_jump -> <empty>','while_jump',0,'p_while_jump','parser.py',361),
  ('g_while_quad -> <empty>','g_while_quad',0,'p_g_while_quad','parser.py',366),
  ('end_while -> <empty>','end_while',0,'p_end_while','parser.py',376),
  ('validate_for -> <empty>','validate_for',0,'p_validate_for','parser.py',384),
  ('for_counter_control -> <empty>','for_counter_control',0,'p_for_counter_control','parser.py',398),
  ('for_counter_end -> <empty>','for_counter_end',0,'p_for_counter_end','parser.py',420),
  ('end_for -> <empty>','end_for',0,'p_end_for','parser.py',443),
  ('return -> RETURN OPEN_PAREN exp CLOSE_PAREN','return',4,'p_return','parser.py',459),
  ('func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN','func_call',4,'p_func_call','parser.py',463),
  ('func_call_comp -> expressions func_call_comp','func_call_comp',2,'p_func_call_comp','parser.py',468),
  ('func_call_comp -> COMMA expressions func_call_comp','func_call_comp',3,'p_func_call_comp','parser.py',469),
  ('func_call_comp -> empty','func_call_comp',1,'p_func_call_comp','parser.py',470),
  ('expressions -> expressions_comp','expressions',1,'p_expressions','parser.py',475),
  ('expressions_comp -> expression_comp_2','expressions_comp',1,'p_expressions_comp','parser.py',479),
  ('expressions_comp -> expression_comp_2 OR expressions_comp','expressions_comp',3,'p_expressions_comp','parser.py',480),
  ('expression_comp_2 -> expression_comp_3','expression_comp_2',1,'p_expression_comp_2','parser.py',485),
  ('expression_comp_2 -> expression_comp_3 AND expression_comp_2','expression_comp_2',3,'p_expression_comp_2','parser.py',486),
  ('expression_comp_3 -> exp expressions_op exp g_quad_logic','expression_comp_3',4,'p_expression_comp_3','parser.py',491),
  ('expression_comp_3 -> exp','expression_comp_3',1,'p_expression_comp_3','parser.py',492),
  ('g_quad_logic -> <empty>','g_quad_logic',0,'p_g_quad_logic','parser.py',496),
  ('expressions_op -> LESS_THAN add_op','expressions_op',2,'p_expressions_op','parser.py',501),
  ('expressions_op -> LESS_THAN_EQUAL add_op','expressions_op',2,'p_expressions_op','parser.py',502),
  ('expressions_op -> MORE_THAN add_op','expressions_op',2,'p_expressions_op','parser.py',503),
  ('expressions_op -> MORE_THAN_EQUAL add_op','expressions_op',2,'p_expressions_op','parser.py',504),
  ('expressions_op -> EQUALS add_op','expressions_op',2,'p_expressions_op','parser.py',505),
  ('expressions_op -> NOT_EQUALS add_op','expressions_op',2,'p_expressions_op','parser.py',506),
  ('exp -> term g_quad_exp_as','exp',2,'p_exp','parser.py',512),
  ('exp -> term g_quad_exp_as exp_comp','exp',3,'p_exp','parser.py',513),
  ('g_quad_exp_as -> <empty>','g_quad_exp_as',0,'p_g_quad_exp_as','parser.py',518),
  ('exp_comp -> PLUS add_op exp','exp_comp',3,'p_exp_comp','parser.py',523),
  ('exp_comp -> MINUS add_op exp','exp_comp',3,'p_exp_comp','parser.py',524),
  ('term -> factor g_quad_exp_md','term',2,'p_term','parser.py',529),
  ('term -> factor g_quad_exp_md term_comp','term',3,'p_term','parser.py',530),
  ('g_quad_exp_md -> <empty>','g_quad_exp_md',0,'p_g_quad_exp_md','parser.py',535),
  ('term_comp -> MULTIPLIES add_op term','term_comp',3,'p_term_comp','parser.py',540),
  ('term_comp -> DIVIDE add_op term','term_comp',3,'p_term_comp','parser.py',541),
  ('add_op -> <empty>','add_op',0,'p_add_op','parser.py',545),
  ('factor -> OPEN_PAREN add_fake expressions CLOSE_PAREN rem_fake','factor',5,'p_factor','parser.py',696),
  ('factor -> variable','factor',1,'p_factor','parser.py',697),
  ('factor -> func_call','factor',1,'p_factor','parser.py',698),
  ('factor -> CT_INT add_ct_int','factor',2,'p_factor','parser.py',699),
  ('factor -> CT_FLOAT add_ct_float','factor',2,'p_factor','parser.py',700),
  ('factor -> CT_CHAR add_ct_char','factor',2,'p_factor','parser.py',701),
  ('add_fake -> <empty>','add_fake',0,'p_add_fake','parser.py',705),
  ('rem_fake -> <empty>','rem_fake',0,'p_rem_fake','parser.py',709),
  ('add_ct_int -> <empty>','add_ct_int',0,'p_add_ct_int','parser.py',714),
  ('add_ct_float -> <empty>','add_ct_float',0,'p_add_ct_float','parser.py',721),
  ('add_ct_char -> <empty>','add_ct_char',0,'p_add_ct_char','parser.py',728),
  ('variable -> ID add_id','variable',2,'p_variable','parser.py',736),
  ('variable -> ID dim','variable',2,'p_variable','parser.py',737),
  ('add_id -> <empty>','add_id',0,'p_add_id','parser.py',742),
  ('dim -> OPEN_BRACKETS exp CLOSE_BRACKETS','dim',3,'p_dim','parser.py',762),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',767),
]
