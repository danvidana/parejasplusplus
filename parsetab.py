
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN CHAR CLOSE_BRACES CLOSE_BRACKETS CLOSE_PAREN COMMA CT_CHAR CT_FLOAT CT_INT CT_STRING DIVIDE DO ELSE EQUALS FLOAT FOR ID IF INT LESS_THAN LESS_THAN_EQUAL MAIN MINUS MODULE MORE_THAN MORE_THAN_EQUAL MULTIPLIES NOT_EQUALS OPEN_BRACES OPEN_BRACKETS OPEN_PAREN OR PLUS PROGRAM READ RETURN SEMICOLON THEN TO VARS VOID WHILE WRITEprogram : PROGRAM ID add_program SEMICOLON vars funcs main end_programadd_program : end_program :main : MAIN OPEN_PAREN CLOSE_PAREN blockfuncs : func_type MODULE ID add_module OPEN_PAREN funcs_params CLOSE_PAREN vars block\n    | empty\n    add_module :funcs_comp : ID add_module OPEN_PAREN funcs_params CLOSE_PAREN vars blockfuncs_params : var_type variable funcs_params_comp\n    | empty\n    funcs_params_comp : COMMA var_type ID funcs_params_comp\n    | empty\n    block : OPEN_BRACES statements CLOSE_BRACESfunc_type : var_type\n    | VOID\n    var_type : INT\n    | FLOAT\n    | CHAR\n    vars : VARS var_comp\n    | empty\n    var_comp : var_type ids_dec var_comp_2 var_comp_final\n    | var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive\n    create_var_table : emptyvar_comp_2 : COMMA ids_dec var_comp_3\n    | empty\n    var_comp_3 : var_comp_2var_comp_recursive : var_type ids_dec var_comp_2 var_comp_final\n    | var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive\n    var_comp_final : SEMICOLON\n    | var_module_trans\n    var_module_trans : SEMICOLON var_type MODULE funcs_comp\n    ids_dec : ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS\n    | ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS\n    | ID\n    ids : ID OPEN_BRACKETS exp CLOSE_BRACKETS OPEN_BRACKETS exp CLOSE_BRACKETS\n    | ID OPEN_BRACKETS exp CLOSE_BRACKETS\n    | ID\n    statements : assignment SEMICOLON statements\n    | read SEMICOLON statements \n    | write SEMICOLON statements\n    | condition statements\n    | return SEMICOLON statements\n    | func_call SEMICOLON statements\n    | empty\n    assignment : ids ASSIGN expressionsread : READ OPEN_PAREN ids read_comp CLOSE_PARENread_comp : COMMA ids read_comp\n    | empty\n    write : WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN\n    | WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN\n    write_comp : COMMA CT_STRING write_comp\n    | COMMA expressions write_comp\n    | empty\n    condition : IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block\n    | IF OPEN_PAREN expressions CLOSE_PAREN THEN block\n    | WHILE OPEN_PAREN expressions CLOSE_PAREN DO block\n    | FOR ids ASSIGN expressions TO expressions DO block\n    return : RETURN OPEN_PAREN exp CLOSE_PARENfunc_call : ID OPEN_PAREN func_call_comp CLOSE_PAREN\n    func_call_comp : expressions func_call_comp\n    | COMMA expressions func_call_comp\n    | empty\n    expressions : expressions_compexpressions_comp : expression_comp_2\n    | expression_comp_2 OR expressions_comp\n    expression_comp_2 : expression_comp_3\n    | expression_comp_3 AND expression_comp_2\n    expression_comp_3 : exp\n    | exp expressions_op exp\n    expressions_op : LESS_THAN\n    | LESS_THAN_EQUAL\n    | MORE_THAN\n    | MORE_THAN_EQUAL\n    | EQUALS\n    | NOT_EQUALS\n    exp : term\n    | term exp_comp\n    exp_comp : PLUS exp\n    | MINUS exp\n    term : factor \n    | factor term_comp\n    term_comp : MULTIPLIES term\n    | DIVIDE term\n    factor : OPEN_PAREN expressions CLOSE_PAREN\n    | variable\n    | func_call\n    | CT_INT\n    | CT_FLOAT\n    | CT_CHAR\n    variable : ID\n    | ID dim\n    dim : OPEN_BRACKETS exp CLOSE_BRACKETSempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,19,24,38,68,],[0,-3,-1,-4,-13,]),'ID':([2,14,15,16,18,21,28,39,41,50,59,63,65,68,69,70,71,73,74,75,76,77,78,79,82,83,84,98,99,100,101,102,103,104,105,106,107,108,109,110,116,119,120,127,128,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,150,153,160,162,165,169,170,171,172,173,174,175,176,185,187,189,194,195,204,205,],[3,-16,-17,-18,23,26,23,61,23,61,81,87,89,-13,61,61,61,61,61,110,81,110,110,110,110,110,110,-63,-64,-66,-68,-76,-80,110,-85,-86,-87,-88,-89,-90,110,110,110,-91,110,110,110,110,-70,-71,-72,-73,-74,-75,-77,110,110,-81,110,110,81,110,-59,110,188,-65,-67,-69,-78,-79,-82,-83,-84,110,110,-92,-55,-56,-54,-57,]),'SEMICOLON':([3,4,22,23,27,29,36,43,44,45,47,48,49,51,52,66,90,97,98,99,100,101,102,103,105,106,107,108,109,110,127,132,142,145,159,160,169,170,171,172,173,174,175,176,177,179,182,189,],[-2,5,-93,-34,34,-25,-93,-24,-26,-33,69,70,71,73,74,-93,131,-45,-63,-64,-66,-68,-76,-80,-85,-86,-87,-88,-89,-90,-91,-32,-77,-81,-58,-59,-65,-67,-69,-78,-79,-82,-83,-84,-46,-49,-50,-92,]),'VARS':([5,85,199,],[7,7,7,]),'VOID':([5,6,8,17,33,34,35,42,68,88,130,131,168,206,],[-93,13,-20,-19,-21,-29,-30,-22,-13,-31,-27,-29,-28,-8,]),'INT':([5,6,7,8,17,33,34,35,40,42,68,88,125,130,131,167,168,206,],[-93,14,14,-20,-19,-21,14,-30,14,-22,-13,-31,14,-27,14,14,-28,-8,]),'FLOAT':([5,6,7,8,17,33,34,35,40,42,68,88,125,130,131,167,168,206,],[-93,15,15,-20,-19,-21,15,-30,15,-22,-13,-31,15,-27,15,15,-28,-8,]),'CHAR':([5,6,7,8,17,33,34,35,40,42,68,88,125,130,131,167,168,206,],[-93,16,16,-20,-19,-21,16,-30,16,-22,-13,-31,16,-27,16,16,-28,-8,]),'MAIN':([5,6,8,9,11,17,33,34,35,42,68,88,130,131,164,168,206,],[-93,-93,-20,20,-6,-19,-21,-29,-30,-22,-13,-31,-27,-29,-5,-28,-8,]),'OPEN_BRACES':([8,17,31,33,34,35,42,68,85,88,123,130,131,168,183,184,199,200,201,203,206,],[-20,-19,39,-21,-29,-30,-22,-13,-93,-31,39,-27,-29,-28,39,39,-93,39,39,39,-8,]),'MODULE':([10,12,13,14,15,16,41,],[21,-14,-15,-16,-17,-18,65,]),'OPEN_PAREN':([20,26,32,55,56,57,58,60,61,75,77,78,79,82,83,84,89,98,99,100,101,102,103,104,105,106,107,108,109,110,116,119,120,127,128,129,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,153,160,162,169,170,171,172,173,174,175,176,185,187,189,],[25,-7,40,76,77,78,79,82,83,104,104,104,104,104,104,104,-7,-63,-64,-66,-68,-76,-80,104,-85,-86,-87,-88,-89,83,104,104,104,-91,104,167,104,104,104,-70,-71,-72,-73,-74,-75,-77,104,104,-81,104,104,104,-59,104,-65,-67,-69,-78,-79,-82,-83,-84,104,104,-92,]),'COMMA':([22,23,36,45,66,81,83,86,87,98,99,100,101,102,103,105,106,107,108,109,110,111,112,113,119,127,132,142,145,160,162,163,169,170,171,172,173,174,175,176,178,180,181,188,189,202,],[28,-34,28,-33,28,-37,120,125,-90,-63,-64,-66,-68,-76,-80,-85,-86,-87,-88,-89,-90,150,153,153,120,-91,-32,-77,-81,-59,120,-36,-65,-67,-69,-78,-79,-82,-83,-84,150,153,153,125,-92,-35,]),'OPEN_BRACKETS':([23,45,61,81,87,110,163,],[30,67,84,84,128,128,187,]),'CLOSE_PAREN':([25,40,62,64,81,83,86,87,98,99,100,101,102,103,105,106,107,108,109,110,111,112,113,114,115,117,118,119,121,124,126,127,142,145,148,149,151,152,154,155,160,161,162,163,167,169,170,171,172,173,174,175,176,178,180,181,186,188,189,190,191,192,193,198,202,],[31,-93,85,-10,-37,-93,-93,-90,-63,-64,-66,-68,-76,-80,-85,-86,-87,-88,-89,-90,-93,-93,-93,156,157,159,160,-93,-62,-9,-12,-91,-77,-81,176,177,-48,179,-53,182,-59,-60,-93,-36,-93,-65,-67,-69,-78,-79,-82,-83,-84,-93,-93,-93,-61,-93,-92,199,-47,-51,-52,-11,-35,]),'CT_INT':([30,67,75,77,78,79,82,83,84,98,99,100,101,102,103,104,105,106,107,108,109,110,116,119,120,127,128,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,153,160,162,169,170,171,172,173,174,175,176,185,187,189,],[37,91,107,107,107,107,107,107,107,-63,-64,-66,-68,-76,-80,107,-85,-86,-87,-88,-89,-90,107,107,107,-91,107,107,107,107,-70,-71,-72,-73,-74,-75,-77,107,107,-81,107,107,107,-59,107,-65,-67,-69,-78,-79,-82,-83,-84,107,107,-92,]),'CLOSE_BRACKETS':([37,91,102,103,105,106,107,108,109,110,122,127,142,145,160,166,172,173,174,175,176,189,197,],[45,132,-76,-80,-85,-86,-87,-88,-89,-90,163,-91,-77,-81,-59,189,-78,-79,-82,-83,-84,-92,202,]),'READ':([39,50,68,69,70,71,73,74,194,195,204,205,],[55,55,-13,55,55,55,55,55,-55,-56,-54,-57,]),'WRITE':([39,50,68,69,70,71,73,74,194,195,204,205,],[56,56,-13,56,56,56,56,56,-55,-56,-54,-57,]),'IF':([39,50,68,69,70,71,73,74,194,195,204,205,],[57,57,-13,57,57,57,57,57,-55,-56,-54,-57,]),'WHILE':([39,50,68,69,70,71,73,74,194,195,204,205,],[58,58,-13,58,58,58,58,58,-55,-56,-54,-57,]),'FOR':([39,50,68,69,70,71,73,74,194,195,204,205,],[59,59,-13,59,59,59,59,59,-55,-56,-54,-57,]),'RETURN':([39,50,68,69,70,71,73,74,194,195,204,205,],[60,60,-13,60,60,60,60,60,-55,-56,-54,-57,]),'CLOSE_BRACES':([39,46,50,53,68,69,70,71,72,73,74,92,93,94,95,96,194,195,204,205,],[-93,68,-93,-44,-13,-93,-93,-93,-41,-93,-93,-38,-39,-40,-42,-43,-55,-56,-54,-57,]),'ASSIGN':([54,61,80,81,163,202,],[75,-37,116,-37,-36,-35,]),'ELSE':([68,194,],[-13,200,]),'CT_FLOAT':([75,77,78,79,82,83,84,98,99,100,101,102,103,104,105,106,107,108,109,110,116,119,120,127,128,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,153,160,162,169,170,171,172,173,174,175,176,185,187,189,],[108,108,108,108,108,108,108,-63,-64,-66,-68,-76,-80,108,-85,-86,-87,-88,-89,-90,108,108,108,-91,108,108,108,108,-70,-71,-72,-73,-74,-75,-77,108,108,-81,108,108,108,-59,108,-65,-67,-69,-78,-79,-82,-83,-84,108,108,-92,]),'CT_CHAR':([75,77,78,79,82,83,84,98,99,100,101,102,103,104,105,106,107,108,109,110,116,119,120,127,128,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,153,160,162,169,170,171,172,173,174,175,176,185,187,189,],[109,109,109,109,109,109,109,-63,-64,-66,-68,-76,-80,109,-85,-86,-87,-88,-89,-90,109,109,109,-91,109,109,109,109,-70,-71,-72,-73,-74,-75,-77,109,109,-81,109,109,109,-59,109,-65,-67,-69,-78,-79,-82,-83,-84,109,109,-92,]),'CT_STRING':([77,153,],[112,180,]),'TO':([98,99,100,101,102,103,105,106,107,108,109,110,127,142,145,158,160,169,170,171,172,173,174,175,176,189,],[-63,-64,-66,-68,-76,-80,-85,-86,-87,-88,-89,-90,-91,-77,-81,185,-59,-65,-67,-69,-78,-79,-82,-83,-84,-92,]),'DO':([98,99,100,101,102,103,105,106,107,108,109,110,127,142,145,157,160,169,170,171,172,173,174,175,176,189,196,],[-63,-64,-66,-68,-76,-80,-85,-86,-87,-88,-89,-90,-91,-77,-81,184,-59,-65,-67,-69,-78,-79,-82,-83,-84,-92,201,]),'OR':([99,100,101,102,103,105,106,107,108,109,110,127,142,145,160,170,171,172,173,174,175,176,189,],[133,-66,-68,-76,-80,-85,-86,-87,-88,-89,-90,-91,-77,-81,-59,-67,-69,-78,-79,-82,-83,-84,-92,]),'AND':([100,101,102,103,105,106,107,108,109,110,127,142,145,160,171,172,173,174,175,176,189,],[134,-68,-76,-80,-85,-86,-87,-88,-89,-90,-91,-77,-81,-59,-69,-78,-79,-82,-83,-84,-92,]),'LESS_THAN':([101,102,103,105,106,107,108,109,110,127,142,145,160,172,173,174,175,176,189,],[136,-76,-80,-85,-86,-87,-88,-89,-90,-91,-77,-81,-59,-78,-79,-82,-83,-84,-92,]),'LESS_THAN_EQUAL':([101,102,103,105,106,107,108,109,110,127,142,145,160,172,173,174,175,176,189,],[137,-76,-80,-85,-86,-87,-88,-89,-90,-91,-77,-81,-59,-78,-79,-82,-83,-84,-92,]),'MORE_THAN':([101,102,103,105,106,107,108,109,110,127,142,145,160,172,173,174,175,176,189,],[138,-76,-80,-85,-86,-87,-88,-89,-90,-91,-77,-81,-59,-78,-79,-82,-83,-84,-92,]),'MORE_THAN_EQUAL':([101,102,103,105,106,107,108,109,110,127,142,145,160,172,173,174,175,176,189,],[139,-76,-80,-85,-86,-87,-88,-89,-90,-91,-77,-81,-59,-78,-79,-82,-83,-84,-92,]),'EQUALS':([101,102,103,105,106,107,108,109,110,127,142,145,160,172,173,174,175,176,189,],[140,-76,-80,-85,-86,-87,-88,-89,-90,-91,-77,-81,-59,-78,-79,-82,-83,-84,-92,]),'NOT_EQUALS':([101,102,103,105,106,107,108,109,110,127,142,145,160,172,173,174,175,176,189,],[141,-76,-80,-85,-86,-87,-88,-89,-90,-91,-77,-81,-59,-78,-79,-82,-83,-84,-92,]),'PLUS':([102,103,105,106,107,108,109,110,127,145,160,174,175,176,189,],[143,-80,-85,-86,-87,-88,-89,-90,-91,-81,-59,-82,-83,-84,-92,]),'MINUS':([102,103,105,106,107,108,109,110,127,145,160,174,175,176,189,],[144,-80,-85,-86,-87,-88,-89,-90,-91,-81,-59,-82,-83,-84,-92,]),'MULTIPLIES':([103,105,106,107,108,109,110,127,160,176,189,],[146,-85,-86,-87,-88,-89,-90,-91,-59,-84,-92,]),'DIVIDE':([103,105,106,107,108,109,110,127,160,176,189,],[147,-85,-86,-87,-88,-89,-90,-91,-59,-84,-92,]),'THEN':([156,],[183,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'add_program':([3,],[4,]),'vars':([5,85,199,],[6,123,203,]),'empty':([5,6,22,36,39,40,50,66,69,70,71,73,74,83,85,86,111,112,113,119,162,167,178,180,181,188,199,],[8,11,29,29,53,64,53,29,53,53,53,53,53,121,8,126,151,154,154,121,121,64,151,154,154,126,8,]),'funcs':([6,],[9,]),'func_type':([6,],[10,]),'var_type':([6,7,34,40,125,131,167,],[12,18,41,63,165,41,63,]),'var_comp':([7,],[17,]),'main':([9,],[19,]),'ids_dec':([18,28,41,],[22,36,66,]),'end_program':([19,],[24,]),'var_comp_2':([22,36,66,],[27,44,90,]),'add_module':([26,89,],[32,129,]),'var_comp_final':([27,90,],[33,130,]),'var_module_trans':([27,90,],[35,35,]),'block':([31,123,183,184,200,201,203,],[38,164,194,195,204,205,206,]),'var_comp_recursive':([34,131,],[42,168,]),'var_comp_3':([36,],[43,]),'statements':([39,50,69,70,71,73,74,],[46,72,92,93,94,95,96,]),'assignment':([39,50,69,70,71,73,74,],[47,47,47,47,47,47,47,]),'read':([39,50,69,70,71,73,74,],[48,48,48,48,48,48,48,]),'write':([39,50,69,70,71,73,74,],[49,49,49,49,49,49,49,]),'condition':([39,50,69,70,71,73,74,],[50,50,50,50,50,50,50,]),'return':([39,50,69,70,71,73,74,],[51,51,51,51,51,51,51,]),'func_call':([39,50,69,70,71,73,74,75,77,78,79,82,83,84,104,116,119,120,128,133,134,135,143,144,146,147,153,162,185,187,],[52,52,52,52,52,52,52,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,]),'ids':([39,50,59,69,70,71,73,74,76,150,],[54,54,80,54,54,54,54,54,111,178,]),'funcs_params':([40,167,],[62,190,]),'variable':([63,75,77,78,79,82,83,84,104,116,119,120,128,133,134,135,143,144,146,147,153,162,185,187,],[86,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),'funcs_comp':([65,],[88,]),'expressions':([75,77,78,79,83,104,116,119,120,153,162,185,],[97,113,114,115,119,148,158,119,162,181,119,196,]),'expressions_comp':([75,77,78,79,83,104,116,119,120,133,153,162,185,],[98,98,98,98,98,98,98,98,98,169,98,98,98,]),'expression_comp_2':([75,77,78,79,83,104,116,119,120,133,134,153,162,185,],[99,99,99,99,99,99,99,99,99,99,170,99,99,99,]),'expression_comp_3':([75,77,78,79,83,104,116,119,120,133,134,153,162,185,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,]),'exp':([75,77,78,79,82,83,84,104,116,119,120,128,133,134,135,143,144,153,162,185,187,],[101,101,101,101,117,101,122,101,101,101,101,166,101,101,171,172,173,101,101,101,197,]),'term':([75,77,78,79,82,83,84,104,116,119,120,128,133,134,135,143,144,146,147,153,162,185,187,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,174,175,102,102,102,102,]),'factor':([75,77,78,79,82,83,84,104,116,119,120,128,133,134,135,143,144,146,147,153,162,185,187,],[103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,]),'func_call_comp':([83,119,162,],[118,161,186,]),'funcs_params_comp':([86,188,],[124,198,]),'dim':([87,110,],[127,127,]),'expressions_op':([101,],[135,]),'exp_comp':([102,],[142,]),'term_comp':([103,],[145,]),'read_comp':([111,178,],[149,191,]),'write_comp':([112,113,180,181,],[152,155,192,193,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID add_program SEMICOLON vars funcs main end_program','program',8,'p_program','parser_copy.py',48),
  ('add_program -> <empty>','add_program',0,'p_add_program','parser_copy.py',51),
  ('end_program -> <empty>','end_program',0,'p_end_program','parser_copy.py',58),
  ('main -> MAIN OPEN_PAREN CLOSE_PAREN block','main',4,'p_main','parser_copy.py',63),
  ('funcs -> func_type MODULE ID add_module OPEN_PAREN funcs_params CLOSE_PAREN vars block','funcs',9,'p_funcs','parser_copy.py',67),
  ('funcs -> empty','funcs',1,'p_funcs','parser_copy.py',68),
  ('add_module -> <empty>','add_module',0,'p_add_module','parser_copy.py',72),
  ('funcs_comp -> ID add_module OPEN_PAREN funcs_params CLOSE_PAREN vars block','funcs_comp',7,'p_funcs_comp','parser_copy.py',85),
  ('funcs_params -> var_type variable funcs_params_comp','funcs_params',3,'p_funcs_params','parser_copy.py',89),
  ('funcs_params -> empty','funcs_params',1,'p_funcs_params','parser_copy.py',90),
  ('funcs_params_comp -> COMMA var_type ID funcs_params_comp','funcs_params_comp',4,'p_funcs_params_comp','parser_copy.py',95),
  ('funcs_params_comp -> empty','funcs_params_comp',1,'p_funcs_params_comp','parser_copy.py',96),
  ('block -> OPEN_BRACES statements CLOSE_BRACES','block',3,'p_block','parser_copy.py',102),
  ('func_type -> var_type','func_type',1,'p_func_type','parser_copy.py',106),
  ('func_type -> VOID','func_type',1,'p_func_type','parser_copy.py',107),
  ('var_type -> INT','var_type',1,'p_var_type','parser_copy.py',115),
  ('var_type -> FLOAT','var_type',1,'p_var_type','parser_copy.py',116),
  ('var_type -> CHAR','var_type',1,'p_var_type','parser_copy.py',117),
  ('vars -> VARS var_comp','vars',2,'p_vars','parser_copy.py',125),
  ('vars -> empty','vars',1,'p_vars','parser_copy.py',126),
  ('var_comp -> var_type ids_dec var_comp_2 var_comp_final','var_comp',4,'p_var_comp','parser_copy.py',132),
  ('var_comp -> var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive','var_comp',5,'p_var_comp','parser_copy.py',133),
  ('create_var_table -> empty','create_var_table',1,'p_create_var_table','parser_copy.py',137),
  ('var_comp_2 -> COMMA ids_dec var_comp_3','var_comp_2',3,'p_var_comp_2','parser_copy.py',144),
  ('var_comp_2 -> empty','var_comp_2',1,'p_var_comp_2','parser_copy.py',145),
  ('var_comp_3 -> var_comp_2','var_comp_3',1,'p_var_comp_3','parser_copy.py',149),
  ('var_comp_recursive -> var_type ids_dec var_comp_2 var_comp_final','var_comp_recursive',4,'p_var_comp_recursive','parser_copy.py',152),
  ('var_comp_recursive -> var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive','var_comp_recursive',5,'p_var_comp_recursive','parser_copy.py',153),
  ('var_comp_final -> SEMICOLON','var_comp_final',1,'p_var_comp_final','parser_copy.py',157),
  ('var_comp_final -> var_module_trans','var_comp_final',1,'p_var_comp_final','parser_copy.py',158),
  ('var_module_trans -> SEMICOLON var_type MODULE funcs_comp','var_module_trans',4,'p_var_module_trans','parser_copy.py',164),
  ('ids_dec -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS','ids_dec',7,'p_ids_dec','parser_copy.py',169),
  ('ids_dec -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS','ids_dec',4,'p_ids_dec','parser_copy.py',170),
  ('ids_dec -> ID','ids_dec',1,'p_ids_dec','parser_copy.py',171),
  ('ids -> ID OPEN_BRACKETS exp CLOSE_BRACKETS OPEN_BRACKETS exp CLOSE_BRACKETS','ids',7,'p_ids','parser_copy.py',185),
  ('ids -> ID OPEN_BRACKETS exp CLOSE_BRACKETS','ids',4,'p_ids','parser_copy.py',186),
  ('ids -> ID','ids',1,'p_ids','parser_copy.py',187),
  ('statements -> assignment SEMICOLON statements','statements',3,'p_statements','parser_copy.py',201),
  ('statements -> read SEMICOLON statements','statements',3,'p_statements','parser_copy.py',202),
  ('statements -> write SEMICOLON statements','statements',3,'p_statements','parser_copy.py',203),
  ('statements -> condition statements','statements',2,'p_statements','parser_copy.py',204),
  ('statements -> return SEMICOLON statements','statements',3,'p_statements','parser_copy.py',205),
  ('statements -> func_call SEMICOLON statements','statements',3,'p_statements','parser_copy.py',206),
  ('statements -> empty','statements',1,'p_statements','parser_copy.py',207),
  ('assignment -> ids ASSIGN expressions','assignment',3,'p_assignment','parser_copy.py',212),
  ('read -> READ OPEN_PAREN ids read_comp CLOSE_PAREN','read',5,'p_read','parser_copy.py',216),
  ('read_comp -> COMMA ids read_comp','read_comp',3,'p_read_comp','parser_copy.py',220),
  ('read_comp -> empty','read_comp',1,'p_read_comp','parser_copy.py',221),
  ('write -> WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN','write',5,'p_write','parser_copy.py',226),
  ('write -> WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN','write',5,'p_write','parser_copy.py',227),
  ('write_comp -> COMMA CT_STRING write_comp','write_comp',3,'p_write_comp','parser_copy.py',232),
  ('write_comp -> COMMA expressions write_comp','write_comp',3,'p_write_comp','parser_copy.py',233),
  ('write_comp -> empty','write_comp',1,'p_write_comp','parser_copy.py',234),
  ('condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block','condition',8,'p_condition','parser_copy.py',239),
  ('condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block','condition',6,'p_condition','parser_copy.py',240),
  ('condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN DO block','condition',6,'p_condition','parser_copy.py',241),
  ('condition -> FOR ids ASSIGN expressions TO expressions DO block','condition',8,'p_condition','parser_copy.py',242),
  ('return -> RETURN OPEN_PAREN exp CLOSE_PAREN','return',4,'p_return','parser_copy.py',247),
  ('func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN','func_call',4,'p_func_call','parser_copy.py',251),
  ('func_call_comp -> expressions func_call_comp','func_call_comp',2,'p_func_call_comp','parser_copy.py',256),
  ('func_call_comp -> COMMA expressions func_call_comp','func_call_comp',3,'p_func_call_comp','parser_copy.py',257),
  ('func_call_comp -> empty','func_call_comp',1,'p_func_call_comp','parser_copy.py',258),
  ('expressions -> expressions_comp','expressions',1,'p_expressions','parser_copy.py',263),
  ('expressions_comp -> expression_comp_2','expressions_comp',1,'p_expressions_comp','parser_copy.py',267),
  ('expressions_comp -> expression_comp_2 OR expressions_comp','expressions_comp',3,'p_expressions_comp','parser_copy.py',268),
  ('expression_comp_2 -> expression_comp_3','expression_comp_2',1,'p_expression_comp_2','parser_copy.py',273),
  ('expression_comp_2 -> expression_comp_3 AND expression_comp_2','expression_comp_2',3,'p_expression_comp_2','parser_copy.py',274),
  ('expression_comp_3 -> exp','expression_comp_3',1,'p_expression_comp_3','parser_copy.py',279),
  ('expression_comp_3 -> exp expressions_op exp','expression_comp_3',3,'p_expression_comp_3','parser_copy.py',280),
  ('expressions_op -> LESS_THAN','expressions_op',1,'p_expressions_op','parser_copy.py',285),
  ('expressions_op -> LESS_THAN_EQUAL','expressions_op',1,'p_expressions_op','parser_copy.py',286),
  ('expressions_op -> MORE_THAN','expressions_op',1,'p_expressions_op','parser_copy.py',287),
  ('expressions_op -> MORE_THAN_EQUAL','expressions_op',1,'p_expressions_op','parser_copy.py',288),
  ('expressions_op -> EQUALS','expressions_op',1,'p_expressions_op','parser_copy.py',289),
  ('expressions_op -> NOT_EQUALS','expressions_op',1,'p_expressions_op','parser_copy.py',290),
  ('exp -> term','exp',1,'p_exp','parser_copy.py',295),
  ('exp -> term exp_comp','exp',2,'p_exp','parser_copy.py',296),
  ('exp_comp -> PLUS exp','exp_comp',2,'p_exp_comp','parser_copy.py',301),
  ('exp_comp -> MINUS exp','exp_comp',2,'p_exp_comp','parser_copy.py',302),
  ('term -> factor','term',1,'p_term','parser_copy.py',307),
  ('term -> factor term_comp','term',2,'p_term','parser_copy.py',308),
  ('term_comp -> MULTIPLIES term','term_comp',2,'p_term_comp','parser_copy.py',313),
  ('term_comp -> DIVIDE term','term_comp',2,'p_term_comp','parser_copy.py',314),
  ('factor -> OPEN_PAREN expressions CLOSE_PAREN','factor',3,'p_factor','parser_copy.py',319),
  ('factor -> variable','factor',1,'p_factor','parser_copy.py',320),
  ('factor -> func_call','factor',1,'p_factor','parser_copy.py',321),
  ('factor -> CT_INT','factor',1,'p_factor','parser_copy.py',322),
  ('factor -> CT_FLOAT','factor',1,'p_factor','parser_copy.py',323),
  ('factor -> CT_CHAR','factor',1,'p_factor','parser_copy.py',324),
  ('variable -> ID','variable',1,'p_variable','parser_copy.py',329),
  ('variable -> ID dim','variable',2,'p_variable','parser_copy.py',330),
  ('dim -> OPEN_BRACKETS exp CLOSE_BRACKETS','dim',3,'p_dim','parser_copy.py',335),
  ('empty -> <empty>','empty',0,'p_empty','parser_copy.py',340),
]
