
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BOOLEAN CHAR CLOSE_BRACES CLOSE_BRACKETS CLOSE_PAREN COMMA CT_CHAR CT_FLOAT CT_INT CT_STRING DIVIDE DO ELSE EQUALS FLOAT FOR ID IF INT LESS_THAN MAIN MINUS MODULE MORE_THAN MULTIPLIES NOT_EQUALS OPEN_BRACES OPEN_BRACKETS OPEN_PAREN OR PLUS PROGRAM READ RETURN SEMICOLON THEN TO VARS VOID WHILE WRITEprogram : PROGRAM ID SEMICOLON main\n    | PROGRAM ID SEMICOLON vars main\n    | PROGRAM ID SEMICOLON funcs main\n    | PROGRAM ID SEMICOLON vars funcs main\n    main : MAIN OPEN_PAREN CLOSE_PAREN blockfuncs : func_type MODULE ID OPEN_PAREN var_type ID CLOSE_PAREN vars blockblock : OPEN_BRACES statements CLOSE_BRACESfunc_type : var_type\n    | VOID\n    var_type : INT\n    | FLOAT\n    | CHAR\n    vars : VARS var_compvar_comp : var_type ids var_comp SEMICOLON var_comp\n    | COMMA ids var_comp\n    | empty\n    ids : ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS\n    | ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS\n    | ID\n    statements : assignment statements\n    | read statements\n    | write statements\n    | condition statements\n    | return statements\n    | func_call statements\n    | empty\n    assignment : ids ASSIGN expressions SEMICOLONread : READ OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLONread_comp : COMMA ids read_comp\n    | empty\n    write : WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN\n    | WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN\n    write_comp : COMMA CT_STRING write_comp\n    | COMMA expressions write_comp\n    | empty\n    condition : IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block\n    | IF OPEN_PAREN expressions CLOSE_PAREN THEN block\n    | WHILE OPEN_PAREN expressions CLOSE_PAREN DO block\n    | FOR ids ASSIGN expressions TO expressions DO block\n    return : RETURN OPEN_PAREN exp CLOSE_PAREN SEMICOLONfunc_call : ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLONfunc_call_comp : ID func_call_comp\n    | COMMA ID func_call_comp\n    | empty\n    expressions : exp expressions_op expexpressions_op : LESS_THAN\n    | MORE_THAN\n    | EQUALS\n    | NOT_EQUALS\n    | AND\n    | OR\n    exp : term exp_compexp_comp : PLUS exp\n    | MINUS exp\n    | empty\n    term : factor term_compterm_comp : MULTIPLIES term\n    | DIVIDE term\n    | empty\n    factor : OPEN_PAREN expressions CLOSE_PAREN\n    | factor_comp ID\n    | factor_comp func_call\n    factor_comp : PLUS\n    | MINUS\n    empty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,5,16,18,25,31,56,],[0,-1,-2,-3,-4,-5,-7,]),'ID':([2,13,14,15,21,22,24,32,38,39,40,41,42,43,50,55,56,64,70,79,80,81,89,91,95,115,127,138,141,145,146,150,154,155,159,160,],[3,-10,-11,-12,28,28,30,52,52,52,52,52,52,52,28,73,-7,28,89,112,-63,-64,89,127,-27,28,89,-31,-32,-40,-41,-28,-37,-38,-36,-39,]),'SEMICOLON':([3,23,27,28,29,33,35,53,71,72,74,76,77,103,106,107,110,112,113,124,126,130,131,132,133,134,135,136,146,148,],[4,-16,-65,-19,-65,53,-15,-65,-14,-18,95,-65,-65,-52,-55,-56,-59,-61,-62,145,146,-45,-53,-54,-57,-58,-60,150,-41,-17,]),'MAIN':([4,6,7,9,17,20,23,28,29,35,53,56,71,72,148,149,],[8,8,8,-65,8,-13,-16,-19,-65,-15,-65,-7,-14,-18,-17,-6,]),'VARS':([4,94,],[9,9,]),'VOID':([4,6,9,20,23,28,29,35,53,71,72,148,],[12,12,-65,-13,-16,-19,-65,-15,-65,-14,-18,-17,]),'INT':([4,6,9,20,23,27,28,29,35,36,53,71,72,148,],[13,13,13,-13,-16,13,-19,13,-15,13,13,-14,-18,-17,]),'FLOAT':([4,6,9,20,23,27,28,29,35,36,53,71,72,148,],[14,14,14,-13,-16,14,-19,14,-15,14,14,-14,-18,-17,]),'CHAR':([4,6,9,20,23,27,28,29,35,36,53,71,72,148,],[15,15,15,-13,-16,15,-19,15,-15,15,15,-14,-18,-17,]),'OPEN_PAREN':([8,30,46,47,48,49,51,52,63,65,66,67,69,78,87,96,97,98,99,100,101,102,104,105,108,109,112,118,144,],[19,36,64,65,66,67,69,70,78,78,78,78,78,78,78,78,-46,-47,-48,-49,-50,-51,78,78,78,78,70,78,78,]),'COMMA':([9,27,28,29,53,70,72,76,77,82,83,84,89,103,106,107,110,112,113,127,130,131,132,133,134,135,137,139,140,146,148,],[22,22,-19,22,22,91,-18,-65,-65,115,118,118,91,-52,-55,-56,-59,-61,-62,91,-45,-53,-54,-57,-58,-60,115,118,118,-41,-17,]),'OPEN_BRACES':([9,20,23,26,28,29,35,53,71,72,129,142,143,148,157,158,],[-65,-13,-16,32,-19,-65,-15,-65,-14,-18,32,32,32,-17,32,32,]),'MODULE':([10,11,12,13,14,15,],[24,-8,-9,-10,-11,-12,]),'CLOSE_PAREN':([19,28,70,72,73,76,77,82,83,84,85,86,88,89,90,92,103,106,107,110,111,112,113,114,116,117,119,120,125,127,130,131,132,133,134,135,137,139,140,146,147,148,151,152,153,],[26,-19,-65,-18,94,-65,-65,-65,-65,-65,121,122,124,-65,126,-44,-52,-55,-56,-59,135,-61,-62,136,-30,138,-35,141,-42,-65,-45,-53,-54,-57,-58,-60,-65,-65,-65,-41,-43,-17,-29,-33,-34,]),'OPEN_BRACKETS':([28,52,72,],[34,34,93,]),'ASSIGN':([28,45,52,68,72,148,],[-19,63,-19,87,-18,-17,]),'READ':([32,38,39,40,41,42,43,56,95,138,141,145,146,150,154,155,159,160,],[46,46,46,46,46,46,46,-7,-27,-31,-32,-40,-41,-28,-37,-38,-36,-39,]),'WRITE':([32,38,39,40,41,42,43,56,95,138,141,145,146,150,154,155,159,160,],[47,47,47,47,47,47,47,-7,-27,-31,-32,-40,-41,-28,-37,-38,-36,-39,]),'IF':([32,38,39,40,41,42,43,56,95,138,141,145,146,150,154,155,159,160,],[48,48,48,48,48,48,48,-7,-27,-31,-32,-40,-41,-28,-37,-38,-36,-39,]),'WHILE':([32,38,39,40,41,42,43,56,95,138,141,145,146,150,154,155,159,160,],[49,49,49,49,49,49,49,-7,-27,-31,-32,-40,-41,-28,-37,-38,-36,-39,]),'FOR':([32,38,39,40,41,42,43,56,95,138,141,145,146,150,154,155,159,160,],[50,50,50,50,50,50,50,-7,-27,-31,-32,-40,-41,-28,-37,-38,-36,-39,]),'RETURN':([32,38,39,40,41,42,43,56,95,138,141,145,146,150,154,155,159,160,],[51,51,51,51,51,51,51,-7,-27,-31,-32,-40,-41,-28,-37,-38,-36,-39,]),'CLOSE_BRACES':([32,37,38,39,40,41,42,43,44,56,57,58,59,60,61,62,95,138,141,145,146,150,154,155,159,160,],[-65,56,-65,-65,-65,-65,-65,-65,-26,-7,-20,-21,-22,-23,-24,-25,-27,-31,-32,-40,-41,-28,-37,-38,-36,-39,]),'CT_INT':([34,93,],[54,128,]),'CLOSE_BRACKETS':([54,128,],[72,148,]),'ELSE':([56,154,],[-7,157,]),'PLUS':([63,65,66,67,69,76,77,78,87,96,97,98,99,100,101,102,104,105,107,108,109,110,112,113,118,133,134,135,144,146,],[80,80,80,80,80,104,-65,80,80,80,-46,-47,-48,-49,-50,-51,80,80,-56,80,80,-59,-61,-62,80,-57,-58,-60,80,-41,]),'MINUS':([63,65,66,67,69,76,77,78,87,96,97,98,99,100,101,102,104,105,107,108,109,110,112,113,118,133,134,135,144,146,],[81,81,81,81,81,105,-65,81,81,81,-46,-47,-48,-49,-50,-51,81,81,-56,81,81,-59,-61,-62,81,-57,-58,-60,81,-41,]),'CT_STRING':([65,118,],[83,139,]),'LESS_THAN':([75,76,77,103,106,107,110,112,113,131,132,133,134,135,146,],[97,-65,-65,-52,-55,-56,-59,-61,-62,-53,-54,-57,-58,-60,-41,]),'MORE_THAN':([75,76,77,103,106,107,110,112,113,131,132,133,134,135,146,],[98,-65,-65,-52,-55,-56,-59,-61,-62,-53,-54,-57,-58,-60,-41,]),'EQUALS':([75,76,77,103,106,107,110,112,113,131,132,133,134,135,146,],[99,-65,-65,-52,-55,-56,-59,-61,-62,-53,-54,-57,-58,-60,-41,]),'NOT_EQUALS':([75,76,77,103,106,107,110,112,113,131,132,133,134,135,146,],[100,-65,-65,-52,-55,-56,-59,-61,-62,-53,-54,-57,-58,-60,-41,]),'AND':([75,76,77,103,106,107,110,112,113,131,132,133,134,135,146,],[101,-65,-65,-52,-55,-56,-59,-61,-62,-53,-54,-57,-58,-60,-41,]),'OR':([75,76,77,103,106,107,110,112,113,131,132,133,134,135,146,],[102,-65,-65,-52,-55,-56,-59,-61,-62,-53,-54,-57,-58,-60,-41,]),'TO':([76,77,103,106,107,110,112,113,123,130,131,132,133,134,135,146,],[-65,-65,-52,-55,-56,-59,-61,-62,144,-45,-53,-54,-57,-58,-60,-41,]),'DO':([76,77,103,106,107,110,112,113,122,130,131,132,133,134,135,146,156,],[-65,-65,-52,-55,-56,-59,-61,-62,143,-45,-53,-54,-57,-58,-60,-41,158,]),'MULTIPLIES':([77,112,113,135,146,],[108,-61,-62,-60,-41,]),'DIVIDE':([77,112,113,135,146,],[109,-61,-62,-60,-41,]),'THEN':([121,],[142,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'main':([4,6,7,17,],[5,16,18,25,]),'vars':([4,94,],[6,129,]),'funcs':([4,6,],[7,17,]),'func_type':([4,6,],[10,10,]),'var_type':([4,6,9,27,29,36,53,],[11,11,21,21,21,55,21,]),'var_comp':([9,27,29,53,],[20,33,35,71,]),'empty':([9,27,29,32,38,39,40,41,42,43,53,70,76,77,82,83,84,89,127,137,139,140,],[23,23,23,44,44,44,44,44,44,44,23,92,106,110,116,119,119,92,92,116,119,119,]),'ids':([21,22,32,38,39,40,41,42,43,50,64,115,],[27,29,45,45,45,45,45,45,45,68,82,137,]),'block':([26,129,142,143,157,158,],[31,149,154,155,159,160,]),'statements':([32,38,39,40,41,42,43,],[37,57,58,59,60,61,62,]),'assignment':([32,38,39,40,41,42,43,],[38,38,38,38,38,38,38,]),'read':([32,38,39,40,41,42,43,],[39,39,39,39,39,39,39,]),'write':([32,38,39,40,41,42,43,],[40,40,40,40,40,40,40,]),'condition':([32,38,39,40,41,42,43,],[41,41,41,41,41,41,41,]),'return':([32,38,39,40,41,42,43,],[42,42,42,42,42,42,42,]),'func_call':([32,38,39,40,41,42,43,79,],[43,43,43,43,43,43,43,113,]),'expressions':([63,65,66,67,78,87,118,144,],[74,84,85,86,111,123,140,156,]),'exp':([63,65,66,67,69,78,87,96,104,105,118,144,],[75,75,75,75,88,75,75,130,131,132,75,75,]),'term':([63,65,66,67,69,78,87,96,104,105,108,109,118,144,],[76,76,76,76,76,76,76,76,76,76,133,134,76,76,]),'factor':([63,65,66,67,69,78,87,96,104,105,108,109,118,144,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'factor_comp':([63,65,66,67,69,78,87,96,104,105,108,109,118,144,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'func_call_comp':([70,89,127,],[90,125,147,]),'expressions_op':([75,],[96,]),'exp_comp':([76,],[103,]),'term_comp':([77,],[107,]),'read_comp':([82,137,],[114,151,]),'write_comp':([83,84,139,140,],[117,120,152,153,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON main','program',4,'p_program','parser.py',7),
  ('program -> PROGRAM ID SEMICOLON vars main','program',5,'p_program','parser.py',8),
  ('program -> PROGRAM ID SEMICOLON funcs main','program',5,'p_program','parser.py',9),
  ('program -> PROGRAM ID SEMICOLON vars funcs main','program',6,'p_program','parser.py',10),
  ('main -> MAIN OPEN_PAREN CLOSE_PAREN block','main',4,'p_main','parser.py',15),
  ('funcs -> func_type MODULE ID OPEN_PAREN var_type ID CLOSE_PAREN vars block','funcs',9,'p_funcs','parser.py',19),
  ('block -> OPEN_BRACES statements CLOSE_BRACES','block',3,'p_block','parser.py',23),
  ('func_type -> var_type','func_type',1,'p_func_type','parser.py',27),
  ('func_type -> VOID','func_type',1,'p_func_type','parser.py',28),
  ('var_type -> INT','var_type',1,'p_var_type','parser.py',33),
  ('var_type -> FLOAT','var_type',1,'p_var_type','parser.py',34),
  ('var_type -> CHAR','var_type',1,'p_var_type','parser.py',35),
  ('vars -> VARS var_comp','vars',2,'p_vars','parser.py',40),
  ('var_comp -> var_type ids var_comp SEMICOLON var_comp','var_comp',5,'p_var_comp','parser.py',44),
  ('var_comp -> COMMA ids var_comp','var_comp',3,'p_var_comp','parser.py',45),
  ('var_comp -> empty','var_comp',1,'p_var_comp','parser.py',46),
  ('ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS','ids',7,'p_ids','parser.py',51),
  ('ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS','ids',4,'p_ids','parser.py',52),
  ('ids -> ID','ids',1,'p_ids','parser.py',53),
  ('statements -> assignment statements','statements',2,'p_statements','parser.py',58),
  ('statements -> read statements','statements',2,'p_statements','parser.py',59),
  ('statements -> write statements','statements',2,'p_statements','parser.py',60),
  ('statements -> condition statements','statements',2,'p_statements','parser.py',61),
  ('statements -> return statements','statements',2,'p_statements','parser.py',62),
  ('statements -> func_call statements','statements',2,'p_statements','parser.py',63),
  ('statements -> empty','statements',1,'p_statements','parser.py',64),
  ('assignment -> ids ASSIGN expressions SEMICOLON','assignment',4,'p_assignment','parser.py',69),
  ('read -> READ OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLON','read',6,'p_read','parser.py',73),
  ('read_comp -> COMMA ids read_comp','read_comp',3,'p_read_comp','parser.py',77),
  ('read_comp -> empty','read_comp',1,'p_read_comp','parser.py',78),
  ('write -> WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN','write',5,'p_write','parser.py',83),
  ('write -> WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN','write',5,'p_write','parser.py',84),
  ('write_comp -> COMMA CT_STRING write_comp','write_comp',3,'p_write_comp','parser.py',89),
  ('write_comp -> COMMA expressions write_comp','write_comp',3,'p_write_comp','parser.py',90),
  ('write_comp -> empty','write_comp',1,'p_write_comp','parser.py',91),
  ('condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block','condition',8,'p_condition','parser.py',96),
  ('condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block','condition',6,'p_condition','parser.py',97),
  ('condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN DO block','condition',6,'p_condition','parser.py',98),
  ('condition -> FOR ids ASSIGN expressions TO expressions DO block','condition',8,'p_condition','parser.py',99),
  ('return -> RETURN OPEN_PAREN exp CLOSE_PAREN SEMICOLON','return',5,'p_return','parser.py',104),
  ('func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON','func_call',5,'p_func_call','parser.py',108),
  ('func_call_comp -> ID func_call_comp','func_call_comp',2,'p_func_call_comp','parser.py',112),
  ('func_call_comp -> COMMA ID func_call_comp','func_call_comp',3,'p_func_call_comp','parser.py',113),
  ('func_call_comp -> empty','func_call_comp',1,'p_func_call_comp','parser.py',114),
  ('expressions -> exp expressions_op exp','expressions',3,'p_expressions','parser.py',119),
  ('expressions_op -> LESS_THAN','expressions_op',1,'p_expressions_op','parser.py',123),
  ('expressions_op -> MORE_THAN','expressions_op',1,'p_expressions_op','parser.py',124),
  ('expressions_op -> EQUALS','expressions_op',1,'p_expressions_op','parser.py',125),
  ('expressions_op -> NOT_EQUALS','expressions_op',1,'p_expressions_op','parser.py',126),
  ('expressions_op -> AND','expressions_op',1,'p_expressions_op','parser.py',127),
  ('expressions_op -> OR','expressions_op',1,'p_expressions_op','parser.py',128),
  ('exp -> term exp_comp','exp',2,'p_exp','parser.py',133),
  ('exp_comp -> PLUS exp','exp_comp',2,'p_exp_comp','parser.py',137),
  ('exp_comp -> MINUS exp','exp_comp',2,'p_exp_comp','parser.py',138),
  ('exp_comp -> empty','exp_comp',1,'p_exp_comp','parser.py',139),
  ('term -> factor term_comp','term',2,'p_term','parser.py',144),
  ('term_comp -> MULTIPLIES term','term_comp',2,'p_term_comp','parser.py',148),
  ('term_comp -> DIVIDE term','term_comp',2,'p_term_comp','parser.py',149),
  ('term_comp -> empty','term_comp',1,'p_term_comp','parser.py',150),
  ('factor -> OPEN_PAREN expressions CLOSE_PAREN','factor',3,'p_factor','parser.py',155),
  ('factor -> factor_comp ID','factor',2,'p_factor','parser.py',156),
  ('factor -> factor_comp func_call','factor',2,'p_factor','parser.py',157),
  ('factor_comp -> PLUS','factor_comp',1,'p_factor_comp','parser.py',162),
  ('factor_comp -> MINUS','factor_comp',1,'p_factor_comp','parser.py',163),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',168),
]
