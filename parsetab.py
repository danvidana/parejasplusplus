
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN CHAR CLOSE_BRACES CLOSE_BRACKETS CLOSE_PAREN COMMA CT_CHAR CT_FLOAT CT_INT CT_STRING DIVIDE DO ELSE EQUALS FLOAT FOR ID IF INT LESS_THAN LESS_THAN_EQUAL MAIN MINUS MODULE MORE_THAN MORE_THAN_EQUAL MULTIPLIES NOT_EQUALS OPEN_BRACES OPEN_BRACKETS OPEN_PAREN OR PLUS PROGRAM READ RETURN SEMICOLON THEN TO VARS VOID WHILE WRITEprogram : PROGRAM ID add_program SEMICOLON vars funcs main end_programadd_program : end_program :main : MAIN OPEN_PAREN CLOSE_PAREN blockfuncs : func_type MODULE ID add_module OPEN_PAREN funcs_params CLOSE_PAREN vars block\n    | empty\n    add_module :funcs_comp : ID add_module OPEN_PAREN funcs_params CLOSE_PAREN vars blockfuncs_params : var_type variable_params funcs_params_comp\n    | empty\n    funcs_params_comp : COMMA var_type variable_params funcs_params_comp\n    | empty\n    block : OPEN_BRACES statements CLOSE_BRACESfunc_type : var_type\n    | VOID\n    var_type : INT\n    | FLOAT\n    | CHAR\n    vars : VARS var_comp\n    | empty\n    var_comp : var_type ids_dec var_comp_2 var_comp_final\n    | var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive\n    create_var_table : emptyvar_comp_2 : COMMA ids_dec var_comp_3\n    | empty\n    var_comp_3 : var_comp_2var_comp_recursive : var_type ids_dec var_comp_2 var_comp_final\n    | var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive\n    var_comp_final : SEMICOLON\n    | var_module_trans\n    var_module_trans : SEMICOLON var_type MODULE funcs_comp\n    ids_dec : ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS\n    | ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS\n    | ID\n    ids : ID OPEN_BRACKETS exp CLOSE_BRACKETS OPEN_BRACKETS exp CLOSE_BRACKETS\n    | ID OPEN_BRACKETS exp CLOSE_BRACKETS\n    | ID\n    statements : assignment SEMICOLON statements\n    | read SEMICOLON statements \n    | write SEMICOLON statements\n    | condition statements\n    | return SEMICOLON statements\n    | func_call SEMICOLON statements\n    | empty\n    assignment : ids ASSIGN expressionsread : READ OPEN_PAREN ids read_comp CLOSE_PARENread_comp : COMMA ids read_comp\n    | empty\n    write : WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN\n    | WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN\n    write_comp : COMMA CT_STRING write_comp\n    | COMMA expressions write_comp\n    | empty\n    end_if :condition : IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE g_else_quad block end_if\n    | IF OPEN_PAREN expressions CLOSE_PAREN g_if_quad THEN block end_if\n    | WHILE while_jump OPEN_PAREN expressions CLOSE_PAREN DO block\n    | FOR ids ASSIGN expressions TO expressions DO block\n    g_if_quad :g_else_quad :while_jump :return : RETURN OPEN_PAREN exp CLOSE_PARENfunc_call : ID OPEN_PAREN func_call_comp CLOSE_PAREN\n    func_call_comp : expressions func_call_comp\n    | COMMA expressions func_call_comp\n    | empty\n    expressions : expressions_compexpressions_comp : expression_comp_2\n    | expression_comp_2 OR expressions_comp\n    expression_comp_2 : expression_comp_3\n    | expression_comp_3 AND expression_comp_2\n    expression_comp_3 : exp\n    | exp expressions_op exp\n    expressions_op : LESS_THAN\n    | LESS_THAN_EQUAL\n    | MORE_THAN\n    | MORE_THAN_EQUAL\n    | EQUALS\n    | NOT_EQUALS\n    exp : term g_quad_exp_as\n    | term g_quad_exp_as exp_comp\n    g_quad_exp_as : exp_comp : PLUS add_op exp\n    | MINUS add_op exp\n    term : factor g_quad_exp_md\n    | factor g_quad_exp_md term_comp\n    g_quad_exp_md : term_comp : MULTIPLIES add_op term\n    | DIVIDE add_op term\n    add_op : factor : OPEN_PAREN add_fake expressions CLOSE_PAREN rem_fake\n    | variable \n    | func_call\n    | CT_INT add_ct_int\n    | CT_FLOAT add_ct_float\n    | CT_CHAR add_ct_char\n    add_fake : rem_fake : add_ct_int : add_ct_float : add_ct_char : variable_params : ID\n    | ID dim\n    variable : ID add_id\n    | ID dim\n    add_id : dim : OPEN_BRACKETS exp CLOSE_BRACKETSempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,19,24,38,68,],[0,-3,-1,-4,-13,]),'ID':([2,14,15,16,18,21,28,39,41,50,59,63,65,68,69,70,71,73,74,75,76,77,78,82,83,84,98,99,100,101,102,103,104,105,106,107,108,109,110,115,116,119,120,128,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,154,161,163,166,170,171,172,173,174,175,176,177,178,189,191,193,195,196,197,198,199,210,211,212,213,214,216,217,222,223,225,226,],[3,-16,-17,-18,23,26,23,61,23,61,81,87,89,-13,61,61,61,61,61,110,81,110,110,110,110,110,-67,-68,-70,-72,-82,-87,-97,-92,-93,-99,-100,-101,-106,110,110,110,110,110,110,110,110,-74,-75,-76,-77,-78,-79,-80,-85,110,-94,-95,-96,-104,-105,81,110,-63,110,87,-69,-71,-73,-81,-90,-90,-86,-90,-90,110,110,-107,110,110,110,110,-98,-83,-84,-88,-89,-91,-54,-57,-56,-58,-54,-55,]),'SEMICOLON':([3,4,22,23,27,29,36,43,44,45,47,48,49,51,52,66,90,97,98,99,100,101,102,103,105,106,107,108,109,110,132,142,143,145,146,147,148,149,160,161,170,171,172,173,176,180,182,185,193,199,210,211,212,213,214,],[-2,5,-108,-34,34,-25,-108,-24,-26,-33,69,70,71,73,74,-108,131,-45,-67,-68,-70,-72,-82,-87,-92,-93,-99,-100,-101,-106,-32,-80,-85,-94,-95,-96,-104,-105,-62,-63,-69,-71,-73,-81,-86,-46,-49,-50,-107,-98,-83,-84,-88,-89,-91,]),'VARS':([5,85,209,],[7,7,7,]),'VOID':([5,6,8,17,33,34,35,42,68,88,130,131,169,224,],[-108,13,-20,-19,-21,-29,-30,-22,-13,-31,-27,-29,-28,-8,]),'INT':([5,6,7,8,17,33,34,35,40,42,68,88,125,130,131,168,169,224,],[-108,14,14,-20,-19,-21,14,-30,14,-22,-13,-31,14,-27,14,14,-28,-8,]),'FLOAT':([5,6,7,8,17,33,34,35,40,42,68,88,125,130,131,168,169,224,],[-108,15,15,-20,-19,-21,15,-30,15,-22,-13,-31,15,-27,15,15,-28,-8,]),'CHAR':([5,6,7,8,17,33,34,35,40,42,68,88,125,130,131,168,169,224,],[-108,16,16,-20,-19,-21,16,-30,16,-22,-13,-31,16,-27,16,16,-28,-8,]),'MAIN':([5,6,8,9,11,17,33,34,35,42,68,88,130,131,165,169,224,],[-108,-108,-20,20,-6,-19,-21,-29,-30,-22,-13,-31,-27,-29,-5,-28,-8,]),'OPEN_BRACES':([8,17,31,33,34,35,42,68,85,88,123,130,131,169,186,204,205,209,215,218,220,221,224,],[-20,-19,39,-21,-29,-30,-22,-13,-108,-31,39,-27,-29,-28,39,39,39,-108,-60,39,39,39,-8,]),'MODULE':([10,12,13,14,15,16,41,],[21,-14,-15,-16,-17,-18,65,]),'OPEN_PAREN':([20,26,32,55,56,57,58,60,61,75,77,78,79,82,83,84,89,98,99,100,101,102,103,104,105,106,107,108,109,110,115,116,119,120,128,129,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,154,161,163,170,171,172,173,174,175,176,177,178,189,191,193,195,196,197,198,199,210,211,212,213,214,],[25,-7,40,76,77,78,-61,82,83,104,104,104,115,104,104,104,-7,-67,-68,-70,-72,-82,-87,-97,-92,-93,-99,-100,-101,83,104,104,104,104,104,168,104,104,104,-74,-75,-76,-77,-78,-79,-80,-85,104,-94,-95,-96,-104,-105,104,-63,104,-69,-71,-73,-81,-90,-90,-86,-90,-90,104,104,-107,104,104,104,104,-98,-83,-84,-88,-89,-91,]),'COMMA':([22,23,36,45,66,81,83,86,87,98,99,100,101,102,103,105,106,107,108,109,110,111,112,113,119,127,132,142,143,145,146,147,148,149,161,163,164,170,171,172,173,176,181,183,184,192,193,199,210,211,212,213,214,219,],[28,-34,28,-33,28,-37,120,125,-102,-67,-68,-70,-72,-82,-87,-92,-93,-99,-100,-101,-106,151,154,154,120,-103,-32,-80,-85,-94,-95,-96,-104,-105,-63,120,-36,-69,-71,-73,-81,-86,151,154,154,125,-107,-98,-83,-84,-88,-89,-91,-35,]),'OPEN_BRACKETS':([23,45,61,81,87,110,164,],[30,67,84,84,128,128,191,]),'CLOSE_PAREN':([25,40,62,64,81,83,86,87,98,99,100,101,102,103,105,106,107,108,109,110,111,112,113,114,117,118,119,121,124,126,127,142,143,145,146,147,148,149,150,152,153,155,156,158,161,162,163,164,168,170,171,172,173,176,179,181,183,184,190,192,193,194,199,200,201,202,208,210,211,212,213,214,219,],[31,-108,85,-10,-37,-108,-108,-102,-67,-68,-70,-72,-82,-87,-92,-93,-99,-100,-101,-106,-108,-108,-108,157,160,161,-108,-66,-9,-12,-103,-80,-85,-94,-95,-96,-104,-105,180,-48,182,-53,185,188,-63,-64,-108,-36,-108,-69,-71,-73,-81,-86,199,-108,-108,-108,-65,-108,-107,209,-98,-47,-51,-52,-11,-83,-84,-88,-89,-91,-35,]),'CT_INT':([30,67,75,77,78,82,83,84,98,99,100,101,102,103,104,105,106,107,108,109,110,115,116,119,120,128,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,154,161,163,170,171,172,173,174,175,176,177,178,189,191,193,195,196,197,198,199,210,211,212,213,214,],[37,91,107,107,107,107,107,107,-67,-68,-70,-72,-82,-87,-97,-92,-93,-99,-100,-101,-106,107,107,107,107,107,107,107,107,-74,-75,-76,-77,-78,-79,-80,-85,107,-94,-95,-96,-104,-105,107,-63,107,-69,-71,-73,-81,-90,-90,-86,-90,-90,107,107,-107,107,107,107,107,-98,-83,-84,-88,-89,-91,]),'CLOSE_BRACKETS':([37,91,102,103,105,106,107,108,109,110,122,142,143,145,146,147,148,149,161,167,173,176,193,199,207,210,211,212,213,214,],[45,132,-82,-87,-92,-93,-99,-100,-101,-106,164,-80,-85,-94,-95,-96,-104,-105,-63,193,-81,-86,-107,-98,219,-83,-84,-88,-89,-91,]),'READ':([39,50,68,69,70,71,73,74,216,217,222,223,225,226,],[55,55,-13,55,55,55,55,55,-54,-57,-56,-58,-54,-55,]),'WRITE':([39,50,68,69,70,71,73,74,216,217,222,223,225,226,],[56,56,-13,56,56,56,56,56,-54,-57,-56,-58,-54,-55,]),'IF':([39,50,68,69,70,71,73,74,216,217,222,223,225,226,],[57,57,-13,57,57,57,57,57,-54,-57,-56,-58,-54,-55,]),'WHILE':([39,50,68,69,70,71,73,74,216,217,222,223,225,226,],[58,58,-13,58,58,58,58,58,-54,-57,-56,-58,-54,-55,]),'FOR':([39,50,68,69,70,71,73,74,216,217,222,223,225,226,],[59,59,-13,59,59,59,59,59,-54,-57,-56,-58,-54,-55,]),'RETURN':([39,50,68,69,70,71,73,74,216,217,222,223,225,226,],[60,60,-13,60,60,60,60,60,-54,-57,-56,-58,-54,-55,]),'CLOSE_BRACES':([39,46,50,53,68,69,70,71,72,73,74,92,93,94,95,96,216,217,222,223,225,226,],[-108,68,-108,-44,-13,-108,-108,-108,-41,-108,-108,-38,-39,-40,-42,-43,-54,-57,-56,-58,-54,-55,]),'ASSIGN':([54,61,80,81,164,219,],[75,-37,116,-37,-36,-35,]),'ELSE':([68,203,],[-13,215,]),'CT_FLOAT':([75,77,78,82,83,84,98,99,100,101,102,103,104,105,106,107,108,109,110,115,116,119,120,128,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,154,161,163,170,171,172,173,174,175,176,177,178,189,191,193,195,196,197,198,199,210,211,212,213,214,],[108,108,108,108,108,108,-67,-68,-70,-72,-82,-87,-97,-92,-93,-99,-100,-101,-106,108,108,108,108,108,108,108,108,-74,-75,-76,-77,-78,-79,-80,-85,108,-94,-95,-96,-104,-105,108,-63,108,-69,-71,-73,-81,-90,-90,-86,-90,-90,108,108,-107,108,108,108,108,-98,-83,-84,-88,-89,-91,]),'CT_CHAR':([75,77,78,82,83,84,98,99,100,101,102,103,104,105,106,107,108,109,110,115,116,119,120,128,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,154,161,163,170,171,172,173,174,175,176,177,178,189,191,193,195,196,197,198,199,210,211,212,213,214,],[109,109,109,109,109,109,-67,-68,-70,-72,-82,-87,-97,-92,-93,-99,-100,-101,-106,109,109,109,109,109,109,109,109,-74,-75,-76,-77,-78,-79,-80,-85,109,-94,-95,-96,-104,-105,109,-63,109,-69,-71,-73,-81,-90,-90,-86,-90,-90,109,109,-107,109,109,109,109,-98,-83,-84,-88,-89,-91,]),'CT_STRING':([77,154,],[112,183,]),'TO':([98,99,100,101,102,103,105,106,107,108,109,110,142,143,145,146,147,148,149,159,161,170,171,172,173,176,193,199,210,211,212,213,214,],[-67,-68,-70,-72,-82,-87,-92,-93,-99,-100,-101,-106,-80,-85,-94,-95,-96,-104,-105,189,-63,-69,-71,-73,-81,-86,-107,-98,-83,-84,-88,-89,-91,]),'DO':([98,99,100,101,102,103,105,106,107,108,109,110,142,143,145,146,147,148,149,161,170,171,172,173,176,188,193,199,206,210,211,212,213,214,],[-67,-68,-70,-72,-82,-87,-92,-93,-99,-100,-101,-106,-80,-85,-94,-95,-96,-104,-105,-63,-69,-71,-73,-81,-86,205,-107,-98,218,-83,-84,-88,-89,-91,]),'OR':([99,100,101,102,103,105,106,107,108,109,110,142,143,145,146,147,148,149,161,171,172,173,176,193,199,210,211,212,213,214,],[133,-70,-72,-82,-87,-92,-93,-99,-100,-101,-106,-80,-85,-94,-95,-96,-104,-105,-63,-71,-73,-81,-86,-107,-98,-83,-84,-88,-89,-91,]),'AND':([100,101,102,103,105,106,107,108,109,110,142,143,145,146,147,148,149,161,172,173,176,193,199,210,211,212,213,214,],[134,-72,-82,-87,-92,-93,-99,-100,-101,-106,-80,-85,-94,-95,-96,-104,-105,-63,-73,-81,-86,-107,-98,-83,-84,-88,-89,-91,]),'LESS_THAN':([101,102,103,105,106,107,108,109,110,142,143,145,146,147,148,149,161,173,176,193,199,210,211,212,213,214,],[136,-82,-87,-92,-93,-99,-100,-101,-106,-80,-85,-94,-95,-96,-104,-105,-63,-81,-86,-107,-98,-83,-84,-88,-89,-91,]),'LESS_THAN_EQUAL':([101,102,103,105,106,107,108,109,110,142,143,145,146,147,148,149,161,173,176,193,199,210,211,212,213,214,],[137,-82,-87,-92,-93,-99,-100,-101,-106,-80,-85,-94,-95,-96,-104,-105,-63,-81,-86,-107,-98,-83,-84,-88,-89,-91,]),'MORE_THAN':([101,102,103,105,106,107,108,109,110,142,143,145,146,147,148,149,161,173,176,193,199,210,211,212,213,214,],[138,-82,-87,-92,-93,-99,-100,-101,-106,-80,-85,-94,-95,-96,-104,-105,-63,-81,-86,-107,-98,-83,-84,-88,-89,-91,]),'MORE_THAN_EQUAL':([101,102,103,105,106,107,108,109,110,142,143,145,146,147,148,149,161,173,176,193,199,210,211,212,213,214,],[139,-82,-87,-92,-93,-99,-100,-101,-106,-80,-85,-94,-95,-96,-104,-105,-63,-81,-86,-107,-98,-83,-84,-88,-89,-91,]),'EQUALS':([101,102,103,105,106,107,108,109,110,142,143,145,146,147,148,149,161,173,176,193,199,210,211,212,213,214,],[140,-82,-87,-92,-93,-99,-100,-101,-106,-80,-85,-94,-95,-96,-104,-105,-63,-81,-86,-107,-98,-83,-84,-88,-89,-91,]),'NOT_EQUALS':([101,102,103,105,106,107,108,109,110,142,143,145,146,147,148,149,161,173,176,193,199,210,211,212,213,214,],[141,-82,-87,-92,-93,-99,-100,-101,-106,-80,-85,-94,-95,-96,-104,-105,-63,-81,-86,-107,-98,-83,-84,-88,-89,-91,]),'PLUS':([102,103,105,106,107,108,109,110,142,143,145,146,147,148,149,161,176,193,199,212,213,214,],[-82,-87,-92,-93,-99,-100,-101,-106,174,-85,-94,-95,-96,-104,-105,-63,-86,-107,-98,-88,-89,-91,]),'MINUS':([102,103,105,106,107,108,109,110,142,143,145,146,147,148,149,161,176,193,199,212,213,214,],[-82,-87,-92,-93,-99,-100,-101,-106,175,-85,-94,-95,-96,-104,-105,-63,-86,-107,-98,-88,-89,-91,]),'MULTIPLIES':([103,105,106,107,108,109,110,143,145,146,147,148,149,161,193,199,214,],[-87,-92,-93,-99,-100,-101,-106,177,-94,-95,-96,-104,-105,-63,-107,-98,-91,]),'DIVIDE':([103,105,106,107,108,109,110,143,145,146,147,148,149,161,193,199,214,],[-87,-92,-93,-99,-100,-101,-106,178,-94,-95,-96,-104,-105,-63,-107,-98,-91,]),'THEN':([157,187,],[186,204,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'add_program':([3,],[4,]),'vars':([5,85,209,],[6,123,220,]),'empty':([5,6,22,36,39,40,50,66,69,70,71,73,74,83,85,86,111,112,113,119,163,168,181,183,184,192,209,],[8,11,29,29,53,64,53,29,53,53,53,53,53,121,8,126,152,155,155,121,121,64,152,155,155,126,8,]),'funcs':([6,],[9,]),'func_type':([6,],[10,]),'var_type':([6,7,34,40,125,131,168,],[12,18,41,63,166,41,63,]),'var_comp':([7,],[17,]),'main':([9,],[19,]),'ids_dec':([18,28,41,],[22,36,66,]),'end_program':([19,],[24,]),'var_comp_2':([22,36,66,],[27,44,90,]),'add_module':([26,89,],[32,129,]),'var_comp_final':([27,90,],[33,130,]),'var_module_trans':([27,90,],[35,35,]),'block':([31,123,186,204,205,218,220,221,],[38,165,203,216,217,223,224,225,]),'var_comp_recursive':([34,131,],[42,169,]),'var_comp_3':([36,],[43,]),'statements':([39,50,69,70,71,73,74,],[46,72,92,93,94,95,96,]),'assignment':([39,50,69,70,71,73,74,],[47,47,47,47,47,47,47,]),'read':([39,50,69,70,71,73,74,],[48,48,48,48,48,48,48,]),'write':([39,50,69,70,71,73,74,],[49,49,49,49,49,49,49,]),'condition':([39,50,69,70,71,73,74,],[50,50,50,50,50,50,50,]),'return':([39,50,69,70,71,73,74,],[51,51,51,51,51,51,51,]),'func_call':([39,50,69,70,71,73,74,75,77,78,82,83,84,115,116,119,120,128,133,134,135,144,154,163,189,191,195,196,197,198,],[52,52,52,52,52,52,52,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,]),'ids':([39,50,59,69,70,71,73,74,76,151,],[54,54,80,54,54,54,54,54,111,181,]),'funcs_params':([40,168,],[62,194,]),'while_jump':([58,],[79,]),'variable_params':([63,166,],[86,192,]),'funcs_comp':([65,],[88,]),'expressions':([75,77,78,83,115,116,119,120,144,154,163,189,],[97,113,114,119,158,159,119,163,179,184,119,206,]),'expressions_comp':([75,77,78,83,115,116,119,120,133,144,154,163,189,],[98,98,98,98,98,98,98,98,170,98,98,98,98,]),'expression_comp_2':([75,77,78,83,115,116,119,120,133,134,144,154,163,189,],[99,99,99,99,99,99,99,99,99,171,99,99,99,99,]),'expression_comp_3':([75,77,78,83,115,116,119,120,133,134,144,154,163,189,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,]),'exp':([75,77,78,82,83,84,115,116,119,120,128,133,134,135,144,154,163,189,191,195,196,],[101,101,101,117,101,122,101,101,101,101,167,101,101,172,101,101,101,101,207,210,211,]),'term':([75,77,78,82,83,84,115,116,119,120,128,133,134,135,144,154,163,189,191,195,196,197,198,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,212,213,]),'factor':([75,77,78,82,83,84,115,116,119,120,128,133,134,135,144,154,163,189,191,195,196,197,198,],[103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,]),'variable':([75,77,78,82,83,84,115,116,119,120,128,133,134,135,144,154,163,189,191,195,196,197,198,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),'func_call_comp':([83,119,163,],[118,162,190,]),'funcs_params_comp':([86,192,],[124,208,]),'dim':([87,110,],[127,149,]),'expressions_op':([101,],[135,]),'g_quad_exp_as':([102,],[142,]),'g_quad_exp_md':([103,],[143,]),'add_fake':([104,],[144,]),'add_ct_int':([107,],[145,]),'add_ct_float':([108,],[146,]),'add_ct_char':([109,],[147,]),'add_id':([110,],[148,]),'read_comp':([111,181,],[150,200,]),'write_comp':([112,113,183,184,],[153,156,201,202,]),'exp_comp':([142,],[173,]),'term_comp':([143,],[176,]),'g_if_quad':([157,],[187,]),'add_op':([174,175,177,178,],[195,196,197,198,]),'rem_fake':([199,],[214,]),'g_else_quad':([215,],[221,]),'end_if':([216,225,],[222,226,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID add_program SEMICOLON vars funcs main end_program','program',8,'p_program','parser.py',52),
  ('add_program -> <empty>','add_program',0,'p_add_program','parser.py',55),
  ('end_program -> <empty>','end_program',0,'p_end_program','parser.py',72),
  ('main -> MAIN OPEN_PAREN CLOSE_PAREN block','main',4,'p_main','parser.py',77),
  ('funcs -> func_type MODULE ID add_module OPEN_PAREN funcs_params CLOSE_PAREN vars block','funcs',9,'p_funcs','parser.py',81),
  ('funcs -> empty','funcs',1,'p_funcs','parser.py',82),
  ('add_module -> <empty>','add_module',0,'p_add_module','parser.py',86),
  ('funcs_comp -> ID add_module OPEN_PAREN funcs_params CLOSE_PAREN vars block','funcs_comp',7,'p_funcs_comp','parser.py',97),
  ('funcs_params -> var_type variable_params funcs_params_comp','funcs_params',3,'p_funcs_params','parser.py',101),
  ('funcs_params -> empty','funcs_params',1,'p_funcs_params','parser.py',102),
  ('funcs_params_comp -> COMMA var_type variable_params funcs_params_comp','funcs_params_comp',4,'p_funcs_params_comp','parser.py',107),
  ('funcs_params_comp -> empty','funcs_params_comp',1,'p_funcs_params_comp','parser.py',108),
  ('block -> OPEN_BRACES statements CLOSE_BRACES','block',3,'p_block','parser.py',114),
  ('func_type -> var_type','func_type',1,'p_func_type','parser.py',118),
  ('func_type -> VOID','func_type',1,'p_func_type','parser.py',119),
  ('var_type -> INT','var_type',1,'p_var_type','parser.py',127),
  ('var_type -> FLOAT','var_type',1,'p_var_type','parser.py',128),
  ('var_type -> CHAR','var_type',1,'p_var_type','parser.py',129),
  ('vars -> VARS var_comp','vars',2,'p_vars','parser.py',137),
  ('vars -> empty','vars',1,'p_vars','parser.py',138),
  ('var_comp -> var_type ids_dec var_comp_2 var_comp_final','var_comp',4,'p_var_comp','parser.py',143),
  ('var_comp -> var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive','var_comp',5,'p_var_comp','parser.py',144),
  ('create_var_table -> empty','create_var_table',1,'p_create_var_table','parser.py',148),
  ('var_comp_2 -> COMMA ids_dec var_comp_3','var_comp_2',3,'p_var_comp_2','parser.py',155),
  ('var_comp_2 -> empty','var_comp_2',1,'p_var_comp_2','parser.py',156),
  ('var_comp_3 -> var_comp_2','var_comp_3',1,'p_var_comp_3','parser.py',160),
  ('var_comp_recursive -> var_type ids_dec var_comp_2 var_comp_final','var_comp_recursive',4,'p_var_comp_recursive','parser.py',163),
  ('var_comp_recursive -> var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive','var_comp_recursive',5,'p_var_comp_recursive','parser.py',164),
  ('var_comp_final -> SEMICOLON','var_comp_final',1,'p_var_comp_final','parser.py',168),
  ('var_comp_final -> var_module_trans','var_comp_final',1,'p_var_comp_final','parser.py',169),
  ('var_module_trans -> SEMICOLON var_type MODULE funcs_comp','var_module_trans',4,'p_var_module_trans','parser.py',174),
  ('ids_dec -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS','ids_dec',7,'p_ids_dec','parser.py',179),
  ('ids_dec -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS','ids_dec',4,'p_ids_dec','parser.py',180),
  ('ids_dec -> ID','ids_dec',1,'p_ids_dec','parser.py',181),
  ('ids -> ID OPEN_BRACKETS exp CLOSE_BRACKETS OPEN_BRACKETS exp CLOSE_BRACKETS','ids',7,'p_ids','parser.py',191),
  ('ids -> ID OPEN_BRACKETS exp CLOSE_BRACKETS','ids',4,'p_ids','parser.py',192),
  ('ids -> ID','ids',1,'p_ids','parser.py',193),
  ('statements -> assignment SEMICOLON statements','statements',3,'p_statements','parser.py',207),
  ('statements -> read SEMICOLON statements','statements',3,'p_statements','parser.py',208),
  ('statements -> write SEMICOLON statements','statements',3,'p_statements','parser.py',209),
  ('statements -> condition statements','statements',2,'p_statements','parser.py',210),
  ('statements -> return SEMICOLON statements','statements',3,'p_statements','parser.py',211),
  ('statements -> func_call SEMICOLON statements','statements',3,'p_statements','parser.py',212),
  ('statements -> empty','statements',1,'p_statements','parser.py',213),
  ('assignment -> ids ASSIGN expressions','assignment',3,'p_assignment','parser.py',218),
  ('read -> READ OPEN_PAREN ids read_comp CLOSE_PAREN','read',5,'p_read','parser.py',222),
  ('read_comp -> COMMA ids read_comp','read_comp',3,'p_read_comp','parser.py',226),
  ('read_comp -> empty','read_comp',1,'p_read_comp','parser.py',227),
  ('write -> WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN','write',5,'p_write','parser.py',232),
  ('write -> WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN','write',5,'p_write','parser.py',233),
  ('write_comp -> COMMA CT_STRING write_comp','write_comp',3,'p_write_comp','parser.py',238),
  ('write_comp -> COMMA expressions write_comp','write_comp',3,'p_write_comp','parser.py',239),
  ('write_comp -> empty','write_comp',1,'p_write_comp','parser.py',240),
  ('end_if -> <empty>','end_if',0,'p_end_if','parser.py',245),
  ('condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE g_else_quad block end_if','condition',10,'p_condition','parser.py',251),
  ('condition -> IF OPEN_PAREN expressions CLOSE_PAREN g_if_quad THEN block end_if','condition',8,'p_condition','parser.py',252),
  ('condition -> WHILE while_jump OPEN_PAREN expressions CLOSE_PAREN DO block','condition',7,'p_condition','parser.py',253),
  ('condition -> FOR ids ASSIGN expressions TO expressions DO block','condition',8,'p_condition','parser.py',254),
  ('g_if_quad -> <empty>','g_if_quad',0,'p_g_if_quad','parser.py',259),
  ('g_else_quad -> <empty>','g_else_quad',0,'p_g_else_quad','parser.py',272),
  ('while_jump -> <empty>','while_jump',0,'p_while_jump','parser.py',285),
  ('return -> RETURN OPEN_PAREN exp CLOSE_PAREN','return',4,'p_return','parser.py',291),
  ('func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN','func_call',4,'p_func_call','parser.py',295),
  ('func_call_comp -> expressions func_call_comp','func_call_comp',2,'p_func_call_comp','parser.py',300),
  ('func_call_comp -> COMMA expressions func_call_comp','func_call_comp',3,'p_func_call_comp','parser.py',301),
  ('func_call_comp -> empty','func_call_comp',1,'p_func_call_comp','parser.py',302),
  ('expressions -> expressions_comp','expressions',1,'p_expressions','parser.py',307),
  ('expressions_comp -> expression_comp_2','expressions_comp',1,'p_expressions_comp','parser.py',311),
  ('expressions_comp -> expression_comp_2 OR expressions_comp','expressions_comp',3,'p_expressions_comp','parser.py',312),
  ('expression_comp_2 -> expression_comp_3','expression_comp_2',1,'p_expression_comp_2','parser.py',317),
  ('expression_comp_2 -> expression_comp_3 AND expression_comp_2','expression_comp_2',3,'p_expression_comp_2','parser.py',318),
  ('expression_comp_3 -> exp','expression_comp_3',1,'p_expression_comp_3','parser.py',323),
  ('expression_comp_3 -> exp expressions_op exp','expression_comp_3',3,'p_expression_comp_3','parser.py',324),
  ('expressions_op -> LESS_THAN','expressions_op',1,'p_expressions_op','parser.py',329),
  ('expressions_op -> LESS_THAN_EQUAL','expressions_op',1,'p_expressions_op','parser.py',330),
  ('expressions_op -> MORE_THAN','expressions_op',1,'p_expressions_op','parser.py',331),
  ('expressions_op -> MORE_THAN_EQUAL','expressions_op',1,'p_expressions_op','parser.py',332),
  ('expressions_op -> EQUALS','expressions_op',1,'p_expressions_op','parser.py',333),
  ('expressions_op -> NOT_EQUALS','expressions_op',1,'p_expressions_op','parser.py',334),
  ('exp -> term g_quad_exp_as','exp',2,'p_exp','parser.py',339),
  ('exp -> term g_quad_exp_as exp_comp','exp',3,'p_exp','parser.py',340),
  ('g_quad_exp_as -> <empty>','g_quad_exp_as',0,'p_g_quad_exp_as','parser.py',345),
  ('exp_comp -> PLUS add_op exp','exp_comp',3,'p_exp_comp','parser.py',350),
  ('exp_comp -> MINUS add_op exp','exp_comp',3,'p_exp_comp','parser.py',351),
  ('term -> factor g_quad_exp_md','term',2,'p_term','parser.py',356),
  ('term -> factor g_quad_exp_md term_comp','term',3,'p_term','parser.py',357),
  ('g_quad_exp_md -> <empty>','g_quad_exp_md',0,'p_g_quad_exp_md','parser.py',362),
  ('term_comp -> MULTIPLIES add_op term','term_comp',3,'p_term_comp','parser.py',367),
  ('term_comp -> DIVIDE add_op term','term_comp',3,'p_term_comp','parser.py',368),
  ('add_op -> <empty>','add_op',0,'p_add_op','parser.py',372),
  ('factor -> OPEN_PAREN add_fake expressions CLOSE_PAREN rem_fake','factor',5,'p_factor','parser.py',465),
  ('factor -> variable','factor',1,'p_factor','parser.py',466),
  ('factor -> func_call','factor',1,'p_factor','parser.py',467),
  ('factor -> CT_INT add_ct_int','factor',2,'p_factor','parser.py',468),
  ('factor -> CT_FLOAT add_ct_float','factor',2,'p_factor','parser.py',469),
  ('factor -> CT_CHAR add_ct_char','factor',2,'p_factor','parser.py',470),
  ('add_fake -> <empty>','add_fake',0,'p_add_fake','parser.py',474),
  ('rem_fake -> <empty>','rem_fake',0,'p_rem_fake','parser.py',479),
  ('add_ct_int -> <empty>','add_ct_int',0,'p_add_ct_int','parser.py',485),
  ('add_ct_float -> <empty>','add_ct_float',0,'p_add_ct_float','parser.py',493),
  ('add_ct_char -> <empty>','add_ct_char',0,'p_add_ct_char','parser.py',501),
  ('variable_params -> ID','variable_params',1,'p_variable_params','parser.py',511),
  ('variable_params -> ID dim','variable_params',2,'p_variable_params','parser.py',512),
  ('variable -> ID add_id','variable',2,'p_variable','parser.py',517),
  ('variable -> ID dim','variable',2,'p_variable','parser.py',518),
  ('add_id -> <empty>','add_id',0,'p_add_id','parser.py',523),
  ('dim -> OPEN_BRACKETS exp CLOSE_BRACKETS','dim',3,'p_dim','parser.py',544),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',549),
]
