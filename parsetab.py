
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN CHAR CLOSE_BRACES CLOSE_BRACKETS CLOSE_PAREN COMMA CT_CHAR CT_FLOAT CT_INT CT_STRING DIVIDE DO ELSE EQUALS FLOAT FOR ID IF INT LESS_THAN LESS_THAN_EQUAL MAIN MINUS MODULE MORE_THAN MORE_THAN_EQUAL MULTIPLIES NOT_EQUALS OPEN_BRACES OPEN_BRACKETS OPEN_PAREN OR PLUS PROGRAM READ RETURN SEMICOLON THEN TO VARS VOID WHILE WRITEprogram : PROGRAM ID SEMICOLON vars funcs mainmain : MAIN OPEN_PAREN CLOSE_PAREN blockfuncs : func_type MODULE ID OPEN_PAREN funcs_params CLOSE_PAREN vars block\n    | empty\n    funcs_comp : ID OPEN_PAREN funcs_params CLOSE_PAREN vars blockfuncs_params : var_type variable funcs_params_comp\n    | empty\n    funcs_params_comp : COMMA var_type ID funcs_params_comp\n    | empty\n    block : OPEN_BRACES statements CLOSE_BRACESfunc_type : var_type\n    | VOID\n    var_type : INT\n    | FLOAT\n    | CHAR\n    vars : VARS create_var_table var_comp\n    | empty\n    create_var_table : var_comp : var_type ids_dec var_comp_2 var_comp_final\n    | var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive\n    var_comp_2 : COMMA ids_dec var_comp_3\n    | empty\n    var_comp_3 : var_comp_2var_comp_recursive : var_type ids_dec var_comp_2 var_comp_final\n    | var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive\n    var_comp_final : SEMICOLON\n    | var_module_trans\n    var_module_trans : SEMICOLON var_type MODULE funcs_comp\n    ids_dec : ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS\n    | ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS\n    | ID\n    ids : ID OPEN_BRACKETS exp CLOSE_BRACKETS OPEN_BRACKETS exp CLOSE_BRACKETS\n    | ID OPEN_BRACKETS exp CLOSE_BRACKETS\n    | ID\n    statements : assignment SEMICOLON statements\n    | read SEMICOLON statements \n    | write SEMICOLON statements\n    | condition statements\n    | return SEMICOLON statements\n    | func_call SEMICOLON statements\n    | empty\n    assignment : ids ASSIGN expressionsread : READ OPEN_PAREN ids read_comp CLOSE_PARENread_comp : COMMA ids read_comp\n    | empty\n    write : WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN\n    | WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN\n    write_comp : COMMA CT_STRING write_comp\n    | COMMA expressions write_comp\n    | empty\n    condition : IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block\n    | IF OPEN_PAREN expressions CLOSE_PAREN THEN block\n    | WHILE OPEN_PAREN expressions CLOSE_PAREN DO block\n    | FOR ids_dec ASSIGN expressions TO expressions DO block\n    return : RETURN OPEN_PAREN exp CLOSE_PARENfunc_call : ID OPEN_PAREN func_call_comp CLOSE_PAREN\n    func_call_comp : expressions func_call_comp\n    | COMMA expressions func_call_comp\n    | empty\n    expressions : expressions_compexpressions_comp : expression_comp_2\n    | expression_comp_2 OR expressions_comp\n    expression_comp_2 : expression_comp_3\n    | expression_comp_3 AND expression_comp_2\n    expression_comp_3 : exp\n    | exp expressions_op exp\n    expressions_op : LESS_THAN\n    | LESS_THAN_EQUAL\n    | MORE_THAN\n    | MORE_THAN_EQUAL\n    | EQUALS\n    | NOT_EQUALS\n    exp : term\n    | term exp_comp\n    exp_comp : PLUS exp\n    | MINUS exp\n    term : factor \n    | factor term_comp\n    term_comp : MULTIPLIES term\n    | DIVIDE term\n    factor : OPEN_PAREN expressions CLOSE_PAREN\n    | variable\n    | func_call\n    | CT_INT\n    | CT_FLOAT\n    | CT_CHAR\n    variable : ID\n    | ID dim\n    dim : OPEN_BRACKETS exp CLOSE_BRACKETSempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,17,32,66,],[0,-1,-2,-10,]),'ID':([2,13,14,15,19,21,29,33,35,46,55,61,66,67,68,69,71,72,73,74,75,76,77,79,80,81,86,87,88,97,98,99,100,101,102,103,104,105,106,107,108,109,116,119,120,124,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,147,150,157,159,162,167,168,169,170,171,172,173,174,183,185,192,193,201,202,],[3,-13,-14,-15,23,25,25,57,60,57,25,25,-10,57,57,57,57,57,109,111,109,109,109,109,109,109,-88,109,127,-60,-61,-63,-65,-73,-77,109,-82,-83,-84,-85,-86,-87,109,109,109,161,109,109,109,-67,-68,-69,-70,-71,-72,-74,109,109,-78,109,109,111,109,-56,109,-89,-62,-64,-66,-75,-76,-79,-80,-81,109,109,-52,-53,-51,-54,]),'SEMICOLON':([3,24,25,28,30,40,43,44,45,47,48,63,64,65,86,89,96,97,98,99,100,101,102,104,105,106,107,108,109,128,139,142,156,157,162,166,167,168,169,170,171,172,173,174,175,177,180,],[4,-90,-31,38,-22,-90,67,68,69,71,72,-21,-23,-30,-88,-90,-42,-60,-61,-63,-65,-73,-77,-82,-83,-84,-85,-86,-87,165,-74,-78,-55,-56,-89,-29,-62,-64,-66,-75,-76,-79,-80,-81,-43,-46,-47,]),'VARS':([4,58,196,],[6,6,6,]),'VOID':([4,5,7,20,37,38,39,62,66,126,164,165,188,203,],[-90,12,-17,-16,-19,-26,-27,-20,-10,-28,-24,-26,-25,-5,]),'INT':([4,5,6,7,16,20,27,37,38,39,62,66,84,126,163,164,165,188,203,],[-90,13,-18,-17,13,-16,13,-19,13,-27,-20,-10,13,-28,13,-24,13,-25,-5,]),'FLOAT':([4,5,6,7,16,20,27,37,38,39,62,66,84,126,163,164,165,188,203,],[-90,14,-18,-17,14,-16,14,-19,14,-27,-20,-10,14,-28,14,-24,14,-25,-5,]),'CHAR':([4,5,6,7,16,20,27,37,38,39,62,66,84,126,163,164,165,188,203,],[-90,15,-18,-17,15,-16,15,-19,15,-27,-20,-10,15,-28,15,-24,15,-25,-5,]),'MAIN':([4,5,7,8,10,20,37,38,39,62,66,123,126,164,165,188,203,],[-90,-90,-17,18,-4,-16,-19,-26,-27,-20,-10,-3,-28,-24,-26,-25,-5,]),'OPEN_BRACES':([7,20,26,37,38,39,58,62,66,82,126,164,165,181,182,188,196,197,198,200,203,],[-17,-16,33,-19,-26,-27,-90,-20,-10,33,-28,-24,-26,33,33,-25,-90,33,33,33,-5,]),'MODULE':([9,11,12,13,14,15,61,],[19,-11,-12,-13,-14,-15,88,]),'OPEN_PAREN':([18,23,51,52,53,54,56,57,73,75,76,77,79,80,81,86,87,97,98,99,100,101,102,103,104,105,106,107,108,109,116,119,120,127,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,150,157,159,162,167,168,169,170,171,172,173,174,183,185,],[22,27,74,75,76,77,79,80,103,103,103,103,103,103,103,-88,103,-60,-61,-63,-65,-73,-77,103,-82,-83,-84,-85,-86,80,103,103,103,163,103,103,103,-67,-68,-69,-70,-71,-72,-74,103,103,-78,103,103,103,-56,103,-89,-62,-64,-66,-75,-76,-79,-80,-81,103,103,]),'CLOSE_PAREN':([22,27,34,36,59,60,80,83,85,86,97,98,99,100,101,102,104,105,106,107,108,109,110,111,112,113,114,115,117,118,119,121,139,142,145,146,148,149,151,152,157,158,159,160,161,162,163,167,168,169,170,171,172,173,174,176,178,179,184,186,187,189,190,191,199,],[26,-90,58,-7,-90,-87,-90,-6,-9,-88,-60,-61,-63,-65,-73,-77,-82,-83,-84,-85,-86,-87,-90,-34,-90,-90,153,154,156,157,-90,-59,-74,-78,174,175,-45,177,-50,180,-56,-57,-90,-33,-90,-89,-90,-62,-64,-66,-75,-76,-79,-80,-81,-90,-90,-90,-58,-8,196,-44,-48,-49,-32,]),'COMMA':([24,25,40,59,60,65,80,86,89,97,98,99,100,101,102,104,105,106,107,108,109,110,111,112,113,119,139,142,157,159,160,161,162,166,167,168,169,170,171,172,173,174,176,178,179,199,],[29,-31,29,84,-87,-30,120,-88,29,-60,-61,-63,-65,-73,-77,-82,-83,-84,-85,-86,-87,147,-34,150,150,120,-74,-78,-56,120,-33,84,-89,-29,-62,-64,-66,-75,-76,-79,-80,-81,147,150,150,-32,]),'OPEN_BRACKETS':([25,57,60,65,109,111,160,],[31,81,87,90,87,81,185,]),'ASSIGN':([25,50,57,65,78,160,166,199,],[-31,73,-34,-30,116,-33,-29,-32,]),'CT_INT':([31,73,75,76,77,79,80,81,86,87,90,97,98,99,100,101,102,103,104,105,106,107,108,109,116,119,120,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,150,157,159,162,167,168,169,170,171,172,173,174,183,185,],[41,106,106,106,106,106,106,106,-88,106,129,-60,-61,-63,-65,-73,-77,106,-82,-83,-84,-85,-86,-87,106,106,106,106,106,106,-67,-68,-69,-70,-71,-72,-74,106,106,-78,106,106,106,-56,106,-89,-62,-64,-66,-75,-76,-79,-80,-81,106,106,]),'READ':([33,46,66,67,68,69,71,72,192,193,201,202,],[51,51,-10,51,51,51,51,51,-52,-53,-51,-54,]),'WRITE':([33,46,66,67,68,69,71,72,192,193,201,202,],[52,52,-10,52,52,52,52,52,-52,-53,-51,-54,]),'IF':([33,46,66,67,68,69,71,72,192,193,201,202,],[53,53,-10,53,53,53,53,53,-52,-53,-51,-54,]),'WHILE':([33,46,66,67,68,69,71,72,192,193,201,202,],[54,54,-10,54,54,54,54,54,-52,-53,-51,-54,]),'FOR':([33,46,66,67,68,69,71,72,192,193,201,202,],[55,55,-10,55,55,55,55,55,-52,-53,-51,-54,]),'RETURN':([33,46,66,67,68,69,71,72,192,193,201,202,],[56,56,-10,56,56,56,56,56,-52,-53,-51,-54,]),'CLOSE_BRACES':([33,42,46,49,66,67,68,69,70,71,72,91,92,93,94,95,192,193,201,202,],[-90,66,-90,-41,-10,-90,-90,-90,-38,-90,-90,-35,-36,-37,-39,-40,-52,-53,-51,-54,]),'CLOSE_BRACKETS':([41,86,101,102,104,105,106,107,108,109,122,125,129,139,142,157,162,170,171,172,173,174,195,],[65,-88,-73,-77,-82,-83,-84,-85,-86,-87,160,162,166,-74,-78,-56,-89,-75,-76,-79,-80,-81,199,]),'ELSE':([66,192,],[-10,197,]),'CT_FLOAT':([73,75,76,77,79,80,81,86,87,97,98,99,100,101,102,103,104,105,106,107,108,109,116,119,120,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,150,157,159,162,167,168,169,170,171,172,173,174,183,185,],[107,107,107,107,107,107,107,-88,107,-60,-61,-63,-65,-73,-77,107,-82,-83,-84,-85,-86,-87,107,107,107,107,107,107,-67,-68,-69,-70,-71,-72,-74,107,107,-78,107,107,107,-56,107,-89,-62,-64,-66,-75,-76,-79,-80,-81,107,107,]),'CT_CHAR':([73,75,76,77,79,80,81,86,87,97,98,99,100,101,102,103,104,105,106,107,108,109,116,119,120,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,150,157,159,162,167,168,169,170,171,172,173,174,183,185,],[108,108,108,108,108,108,108,-88,108,-60,-61,-63,-65,-73,-77,108,-82,-83,-84,-85,-86,-87,108,108,108,108,108,108,-67,-68,-69,-70,-71,-72,-74,108,108,-78,108,108,108,-56,108,-89,-62,-64,-66,-75,-76,-79,-80,-81,108,108,]),'CT_STRING':([75,150,],[112,178,]),'MULTIPLIES':([86,102,104,105,106,107,108,109,157,162,174,],[-88,143,-82,-83,-84,-85,-86,-87,-56,-89,-81,]),'DIVIDE':([86,102,104,105,106,107,108,109,157,162,174,],[-88,144,-82,-83,-84,-85,-86,-87,-56,-89,-81,]),'PLUS':([86,101,102,104,105,106,107,108,109,142,157,162,172,173,174,],[-88,140,-77,-82,-83,-84,-85,-86,-87,-78,-56,-89,-79,-80,-81,]),'MINUS':([86,101,102,104,105,106,107,108,109,142,157,162,172,173,174,],[-88,141,-77,-82,-83,-84,-85,-86,-87,-78,-56,-89,-79,-80,-81,]),'LESS_THAN':([86,100,101,102,104,105,106,107,108,109,139,142,157,162,170,171,172,173,174,],[-88,133,-73,-77,-82,-83,-84,-85,-86,-87,-74,-78,-56,-89,-75,-76,-79,-80,-81,]),'LESS_THAN_EQUAL':([86,100,101,102,104,105,106,107,108,109,139,142,157,162,170,171,172,173,174,],[-88,134,-73,-77,-82,-83,-84,-85,-86,-87,-74,-78,-56,-89,-75,-76,-79,-80,-81,]),'MORE_THAN':([86,100,101,102,104,105,106,107,108,109,139,142,157,162,170,171,172,173,174,],[-88,135,-73,-77,-82,-83,-84,-85,-86,-87,-74,-78,-56,-89,-75,-76,-79,-80,-81,]),'MORE_THAN_EQUAL':([86,100,101,102,104,105,106,107,108,109,139,142,157,162,170,171,172,173,174,],[-88,136,-73,-77,-82,-83,-84,-85,-86,-87,-74,-78,-56,-89,-75,-76,-79,-80,-81,]),'EQUALS':([86,100,101,102,104,105,106,107,108,109,139,142,157,162,170,171,172,173,174,],[-88,137,-73,-77,-82,-83,-84,-85,-86,-87,-74,-78,-56,-89,-75,-76,-79,-80,-81,]),'NOT_EQUALS':([86,100,101,102,104,105,106,107,108,109,139,142,157,162,170,171,172,173,174,],[-88,138,-73,-77,-82,-83,-84,-85,-86,-87,-74,-78,-56,-89,-75,-76,-79,-80,-81,]),'AND':([86,99,100,101,102,104,105,106,107,108,109,139,142,157,162,169,170,171,172,173,174,],[-88,131,-65,-73,-77,-82,-83,-84,-85,-86,-87,-74,-78,-56,-89,-66,-75,-76,-79,-80,-81,]),'OR':([86,98,99,100,101,102,104,105,106,107,108,109,139,142,157,162,168,169,170,171,172,173,174,],[-88,130,-63,-65,-73,-77,-82,-83,-84,-85,-86,-87,-74,-78,-56,-89,-64,-66,-75,-76,-79,-80,-81,]),'TO':([86,97,98,99,100,101,102,104,105,106,107,108,109,139,142,155,157,162,167,168,169,170,171,172,173,174,],[-88,-60,-61,-63,-65,-73,-77,-82,-83,-84,-85,-86,-87,-74,-78,183,-56,-89,-62,-64,-66,-75,-76,-79,-80,-81,]),'DO':([86,97,98,99,100,101,102,104,105,106,107,108,109,139,142,154,157,162,167,168,169,170,171,172,173,174,194,],[-88,-60,-61,-63,-65,-73,-77,-82,-83,-84,-85,-86,-87,-74,-78,182,-56,-89,-62,-64,-66,-75,-76,-79,-80,-81,198,]),'THEN':([153,],[181,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'vars':([4,58,196,],[5,82,200,]),'empty':([4,5,24,27,33,40,46,58,59,67,68,69,71,72,80,89,110,112,113,119,159,161,163,176,178,179,196,],[7,10,30,36,49,30,49,7,85,49,49,49,49,49,121,30,148,151,151,121,121,85,36,148,151,151,7,]),'funcs':([5,],[8,]),'func_type':([5,],[9,]),'var_type':([5,16,27,38,84,163,165,],[11,21,35,61,124,35,61,]),'create_var_table':([6,],[16,]),'main':([8,],[17,]),'var_comp':([16,],[20,]),'ids_dec':([21,29,55,61,],[24,40,78,89,]),'var_comp_2':([24,40,89,],[28,64,128,]),'block':([26,82,181,182,197,198,200,],[32,123,192,193,201,202,203,]),'funcs_params':([27,163,],[34,187,]),'var_comp_final':([28,128,],[37,164,]),'var_module_trans':([28,128,],[39,39,]),'statements':([33,46,67,68,69,71,72,],[42,70,91,92,93,94,95,]),'assignment':([33,46,67,68,69,71,72,],[43,43,43,43,43,43,43,]),'read':([33,46,67,68,69,71,72,],[44,44,44,44,44,44,44,]),'write':([33,46,67,68,69,71,72,],[45,45,45,45,45,45,45,]),'condition':([33,46,67,68,69,71,72,],[46,46,46,46,46,46,46,]),'return':([33,46,67,68,69,71,72,],[47,47,47,47,47,47,47,]),'func_call':([33,46,67,68,69,71,72,73,75,76,77,79,80,81,87,103,116,119,120,130,131,132,140,141,143,144,150,159,183,185,],[48,48,48,48,48,48,48,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),'ids':([33,46,67,68,69,71,72,74,147,],[50,50,50,50,50,50,50,110,176,]),'variable':([35,73,75,76,77,79,80,81,87,103,116,119,120,130,131,132,140,141,143,144,150,159,183,185,],[59,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,]),'var_comp_recursive':([38,165,],[62,188,]),'var_comp_3':([40,],[63,]),'funcs_params_comp':([59,161,],[83,186,]),'dim':([60,109,],[86,86,]),'expressions':([73,75,76,77,80,103,116,119,120,150,159,183,],[96,113,114,115,119,145,155,119,159,179,119,194,]),'expressions_comp':([73,75,76,77,80,103,116,119,120,130,150,159,183,],[97,97,97,97,97,97,97,97,97,167,97,97,97,]),'expression_comp_2':([73,75,76,77,80,103,116,119,120,130,131,150,159,183,],[98,98,98,98,98,98,98,98,98,98,168,98,98,98,]),'expression_comp_3':([73,75,76,77,80,103,116,119,120,130,131,150,159,183,],[99,99,99,99,99,99,99,99,99,99,99,99,99,99,]),'exp':([73,75,76,77,79,80,81,87,103,116,119,120,130,131,132,140,141,150,159,183,185,],[100,100,100,100,117,100,122,125,100,100,100,100,100,100,169,170,171,100,100,100,195,]),'term':([73,75,76,77,79,80,81,87,103,116,119,120,130,131,132,140,141,143,144,150,159,183,185,],[101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,172,173,101,101,101,101,]),'factor':([73,75,76,77,79,80,81,87,103,116,119,120,130,131,132,140,141,143,144,150,159,183,185,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'func_call_comp':([80,119,159,],[118,158,184,]),'funcs_comp':([88,],[126,]),'expressions_op':([100,],[132,]),'exp_comp':([101,],[139,]),'term_comp':([102,],[142,]),'read_comp':([110,176,],[146,189,]),'write_comp':([112,113,178,179,],[149,152,190,191,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON vars funcs main','program',6,'p_program','parser.py',17),
  ('main -> MAIN OPEN_PAREN CLOSE_PAREN block','main',4,'p_main','parser.py',26),
  ('funcs -> func_type MODULE ID OPEN_PAREN funcs_params CLOSE_PAREN vars block','funcs',8,'p_funcs','parser.py',30),
  ('funcs -> empty','funcs',1,'p_funcs','parser.py',31),
  ('funcs_comp -> ID OPEN_PAREN funcs_params CLOSE_PAREN vars block','funcs_comp',6,'p_funcs_comp','parser.py',36),
  ('funcs_params -> var_type variable funcs_params_comp','funcs_params',3,'p_funcs_params','parser.py',40),
  ('funcs_params -> empty','funcs_params',1,'p_funcs_params','parser.py',41),
  ('funcs_params_comp -> COMMA var_type ID funcs_params_comp','funcs_params_comp',4,'p_funcs_params_comp','parser.py',46),
  ('funcs_params_comp -> empty','funcs_params_comp',1,'p_funcs_params_comp','parser.py',47),
  ('block -> OPEN_BRACES statements CLOSE_BRACES','block',3,'p_block','parser.py',53),
  ('func_type -> var_type','func_type',1,'p_func_type','parser.py',57),
  ('func_type -> VOID','func_type',1,'p_func_type','parser.py',58),
  ('var_type -> INT','var_type',1,'p_var_type','parser.py',63),
  ('var_type -> FLOAT','var_type',1,'p_var_type','parser.py',64),
  ('var_type -> CHAR','var_type',1,'p_var_type','parser.py',65),
  ('vars -> VARS create_var_table var_comp','vars',3,'p_vars','parser.py',70),
  ('vars -> empty','vars',1,'p_vars','parser.py',71),
  ('create_var_table -> <empty>','create_var_table',0,'p_create_var_table','parser.py',75),
  ('var_comp -> var_type ids_dec var_comp_2 var_comp_final','var_comp',4,'p_var_comp','parser.py',82),
  ('var_comp -> var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive','var_comp',5,'p_var_comp','parser.py',83),
  ('var_comp_2 -> COMMA ids_dec var_comp_3','var_comp_2',3,'p_var_comp_2','parser.py',87),
  ('var_comp_2 -> empty','var_comp_2',1,'p_var_comp_2','parser.py',88),
  ('var_comp_3 -> var_comp_2','var_comp_3',1,'p_var_comp_3','parser.py',92),
  ('var_comp_recursive -> var_type ids_dec var_comp_2 var_comp_final','var_comp_recursive',4,'p_var_comp_recursive','parser.py',95),
  ('var_comp_recursive -> var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive','var_comp_recursive',5,'p_var_comp_recursive','parser.py',96),
  ('var_comp_final -> SEMICOLON','var_comp_final',1,'p_var_comp_final','parser.py',100),
  ('var_comp_final -> var_module_trans','var_comp_final',1,'p_var_comp_final','parser.py',101),
  ('var_module_trans -> SEMICOLON var_type MODULE funcs_comp','var_module_trans',4,'p_var_module_trans','parser.py',106),
  ('ids_dec -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS','ids_dec',7,'p_ids_dec','parser.py',111),
  ('ids_dec -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS','ids_dec',4,'p_ids_dec','parser.py',112),
  ('ids_dec -> ID','ids_dec',1,'p_ids_dec','parser.py',113),
  ('ids -> ID OPEN_BRACKETS exp CLOSE_BRACKETS OPEN_BRACKETS exp CLOSE_BRACKETS','ids',7,'p_ids','parser.py',118),
  ('ids -> ID OPEN_BRACKETS exp CLOSE_BRACKETS','ids',4,'p_ids','parser.py',119),
  ('ids -> ID','ids',1,'p_ids','parser.py',120),
  ('statements -> assignment SEMICOLON statements','statements',3,'p_statements','parser.py',134),
  ('statements -> read SEMICOLON statements','statements',3,'p_statements','parser.py',135),
  ('statements -> write SEMICOLON statements','statements',3,'p_statements','parser.py',136),
  ('statements -> condition statements','statements',2,'p_statements','parser.py',137),
  ('statements -> return SEMICOLON statements','statements',3,'p_statements','parser.py',138),
  ('statements -> func_call SEMICOLON statements','statements',3,'p_statements','parser.py',139),
  ('statements -> empty','statements',1,'p_statements','parser.py',140),
  ('assignment -> ids ASSIGN expressions','assignment',3,'p_assignment','parser.py',145),
  ('read -> READ OPEN_PAREN ids read_comp CLOSE_PAREN','read',5,'p_read','parser.py',149),
  ('read_comp -> COMMA ids read_comp','read_comp',3,'p_read_comp','parser.py',153),
  ('read_comp -> empty','read_comp',1,'p_read_comp','parser.py',154),
  ('write -> WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN','write',5,'p_write','parser.py',159),
  ('write -> WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN','write',5,'p_write','parser.py',160),
  ('write_comp -> COMMA CT_STRING write_comp','write_comp',3,'p_write_comp','parser.py',165),
  ('write_comp -> COMMA expressions write_comp','write_comp',3,'p_write_comp','parser.py',166),
  ('write_comp -> empty','write_comp',1,'p_write_comp','parser.py',167),
  ('condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block','condition',8,'p_condition','parser.py',172),
  ('condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block','condition',6,'p_condition','parser.py',173),
  ('condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN DO block','condition',6,'p_condition','parser.py',174),
  ('condition -> FOR ids_dec ASSIGN expressions TO expressions DO block','condition',8,'p_condition','parser.py',175),
  ('return -> RETURN OPEN_PAREN exp CLOSE_PAREN','return',4,'p_return','parser.py',180),
  ('func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN','func_call',4,'p_func_call','parser.py',184),
  ('func_call_comp -> expressions func_call_comp','func_call_comp',2,'p_func_call_comp','parser.py',189),
  ('func_call_comp -> COMMA expressions func_call_comp','func_call_comp',3,'p_func_call_comp','parser.py',190),
  ('func_call_comp -> empty','func_call_comp',1,'p_func_call_comp','parser.py',191),
  ('expressions -> expressions_comp','expressions',1,'p_expressions','parser.py',196),
  ('expressions_comp -> expression_comp_2','expressions_comp',1,'p_expressions_comp','parser.py',200),
  ('expressions_comp -> expression_comp_2 OR expressions_comp','expressions_comp',3,'p_expressions_comp','parser.py',201),
  ('expression_comp_2 -> expression_comp_3','expression_comp_2',1,'p_expression_comp_2','parser.py',206),
  ('expression_comp_2 -> expression_comp_3 AND expression_comp_2','expression_comp_2',3,'p_expression_comp_2','parser.py',207),
  ('expression_comp_3 -> exp','expression_comp_3',1,'p_expression_comp_3','parser.py',212),
  ('expression_comp_3 -> exp expressions_op exp','expression_comp_3',3,'p_expression_comp_3','parser.py',213),
  ('expressions_op -> LESS_THAN','expressions_op',1,'p_expressions_op','parser.py',218),
  ('expressions_op -> LESS_THAN_EQUAL','expressions_op',1,'p_expressions_op','parser.py',219),
  ('expressions_op -> MORE_THAN','expressions_op',1,'p_expressions_op','parser.py',220),
  ('expressions_op -> MORE_THAN_EQUAL','expressions_op',1,'p_expressions_op','parser.py',221),
  ('expressions_op -> EQUALS','expressions_op',1,'p_expressions_op','parser.py',222),
  ('expressions_op -> NOT_EQUALS','expressions_op',1,'p_expressions_op','parser.py',223),
  ('exp -> term','exp',1,'p_exp','parser.py',228),
  ('exp -> term exp_comp','exp',2,'p_exp','parser.py',229),
  ('exp_comp -> PLUS exp','exp_comp',2,'p_exp_comp','parser.py',234),
  ('exp_comp -> MINUS exp','exp_comp',2,'p_exp_comp','parser.py',235),
  ('term -> factor','term',1,'p_term','parser.py',240),
  ('term -> factor term_comp','term',2,'p_term','parser.py',241),
  ('term_comp -> MULTIPLIES term','term_comp',2,'p_term_comp','parser.py',246),
  ('term_comp -> DIVIDE term','term_comp',2,'p_term_comp','parser.py',247),
  ('factor -> OPEN_PAREN expressions CLOSE_PAREN','factor',3,'p_factor','parser.py',252),
  ('factor -> variable','factor',1,'p_factor','parser.py',253),
  ('factor -> func_call','factor',1,'p_factor','parser.py',254),
  ('factor -> CT_INT','factor',1,'p_factor','parser.py',255),
  ('factor -> CT_FLOAT','factor',1,'p_factor','parser.py',256),
  ('factor -> CT_CHAR','factor',1,'p_factor','parser.py',257),
  ('variable -> ID','variable',1,'p_variable','parser.py',262),
  ('variable -> ID dim','variable',2,'p_variable','parser.py',263),
  ('dim -> OPEN_BRACKETS exp CLOSE_BRACKETS','dim',3,'p_dim','parser.py',268),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',273),
]
