
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BOOLEAN CHAR CLOSE_BRACES CLOSE_BRACKETS CLOSE_PAREN COMMA CT_CHAR CT_FLOAT CT_INT CT_STRING DIVIDE DO ELSE EQUALS FLOAT FOR ID IF INT LESS_THAN MAIN MINUS MODULE MORE_THAN MULTIPLIES NOT_EQUALS OPEN_BRACES OPEN_BRACKETS OPEN_PAREN OR PLUS PROGRAM READ RETURN SEMICOLON THEN TO VARS VOID WHILE WRITEprogram : PROGRAM ID SEMICOLON main\n    | PROGRAM ID SEMICOLON vars main\n    | PROGRAM ID SEMICOLON funcs main\n    | PROGRAM ID SEMICOLON vars funcs main\n    main : MAIN OPEN_PAREN CLOSE_PAREN blockfuncs : func_type MODULE ID OPEN_PAREN var_type ID CLOSE_PAREN vars blockblock : OPEN_BRACES statements CLOSE_BRACESfunc_type : var_type\n    | VOID\n    var_type : INT\n    | FLOAT\n    | CHAR\n    vars : VARS var_compvar_comp : var_type ids var_comp SEMICOLON var_comp\n    | COMMA ids var_comp\n    | empty\n    ids : ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS\n    | ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS\n    | ID\n    statements : assignment statements\n    | read statements\n    | write statements\n    | condition statements\n    | return statements\n    | func_call statements\n    | empty\n    assignment : ids ASSIGN expressions SEMICOLONread : READ OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLONread_comp : COMMA ids read_comp\n    | empty\n    write : WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN\n    | WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN\n    write_comp : COMMA CT_STRING write_comp\n    | COMMA expressions write_comp\n    | empty\n    condition : IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block\n    | IF OPEN_PAREN expressions CLOSE_PAREN THEN block\n    | WHILE OPEN_PAREN expressions CLOSE_PAREN DO block\n    | FOR ids ASSIGN expressions TO expressions DO block\n    return : RETURN OPEN_PAREN exp CLOSE_PAREN SEMICOLONfunc_call : ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLONfunc_call_comp : ID func_call_comp\n    | COMMA ID func_call_comp\n    | expressions\n    expressions : exp expressions_op exp\n    | exp\n    expressions_op : LESS_THAN\n    | MORE_THAN\n    | EQUALS\n    | NOT_EQUALS\n    | AND\n    | OR\n    exp : term exp_compexp_comp : PLUS exp\n    | MINUS exp\n    | empty\n    term : factor term_compterm_comp : MULTIPLIES term\n    | DIVIDE term\n    | empty\n    factor : OPEN_PAREN expressions CLOSE_PAREN\n    | factor_comp ID\n    | factor_comp func_call\n    | ID\n    | func_call\n    | CT_INT\n    | CT_FLOAT\n    | CT_CHAR\n    factor_comp : PLUS\n    | MINUS\n    empty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,5,16,18,25,31,56,],[0,-1,-2,-3,-4,-5,-7,]),'ID':([2,13,14,15,21,22,24,32,38,39,40,41,42,43,50,55,56,63,64,65,66,67,69,70,78,79,85,86,92,94,96,100,101,102,103,104,105,106,107,109,110,113,114,120,123,131,133,144,147,150,151,153,157,161,162,166,167,],[3,-10,-11,-12,28,28,30,52,52,52,52,52,52,52,28,73,-7,80,28,80,80,80,80,94,80,117,-69,-70,80,94,133,-27,80,-47,-48,-49,-50,-51,-52,80,80,80,80,28,80,94,94,-31,-32,80,-40,-41,-28,-37,-38,-36,-39,]),'SEMICOLON':([3,23,27,28,29,33,35,53,71,72,74,75,76,77,80,81,82,83,84,108,111,112,115,117,118,129,132,136,137,138,139,140,141,142,153,155,],[4,-16,-71,-19,-71,53,-15,-71,-14,-18,100,-46,-71,-71,-64,-65,-66,-67,-68,-53,-56,-57,-60,-62,-63,151,153,-45,-54,-55,-58,-59,-61,157,-41,-17,]),'MAIN':([4,6,7,9,17,20,23,28,29,35,53,56,71,72,155,156,],[8,8,8,-71,8,-13,-16,-19,-71,-15,-71,-7,-14,-18,-17,-6,]),'VARS':([4,99,],[9,9,]),'VOID':([4,6,9,20,23,28,29,35,53,71,72,155,],[12,12,-71,-13,-16,-19,-71,-15,-71,-14,-18,-17,]),'INT':([4,6,9,20,23,27,28,29,35,36,53,71,72,155,],[13,13,13,-13,-16,13,-19,13,-15,13,13,-14,-18,-17,]),'FLOAT':([4,6,9,20,23,27,28,29,35,36,53,71,72,155,],[14,14,14,-13,-16,14,-19,14,-15,14,14,-14,-18,-17,]),'CHAR':([4,6,9,20,23,27,28,29,35,36,53,71,72,155,],[15,15,15,-13,-16,15,-19,15,-15,15,15,-14,-18,-17,]),'OPEN_PAREN':([8,30,46,47,48,49,51,52,63,65,66,67,69,70,78,80,92,94,101,102,103,104,105,106,107,109,110,113,114,117,123,131,133,150,],[19,36,64,65,66,67,69,70,78,78,78,78,78,78,78,70,78,131,78,-47,-48,-49,-50,-51,-52,78,78,78,78,70,78,78,78,78,]),'COMMA':([9,27,28,29,53,70,72,75,76,77,80,81,82,83,84,87,88,89,94,108,111,112,115,117,118,131,133,136,137,138,139,140,141,143,145,146,153,155,],[22,22,-19,22,22,96,-18,-46,-71,-71,-64,-65,-66,-67,-68,120,123,123,96,-53,-56,-57,-60,-62,-63,96,96,-45,-54,-55,-58,-59,-61,120,123,123,-41,-17,]),'OPEN_BRACES':([9,20,23,26,28,29,35,53,71,72,135,148,149,155,164,165,],[-71,-13,-16,32,-19,-71,-15,-71,-14,-18,32,32,32,-17,32,32,]),'MODULE':([10,11,12,13,14,15,],[24,-8,-9,-10,-11,-12,]),'CLOSE_PAREN':([19,28,72,73,75,76,77,80,81,82,83,84,87,88,89,90,91,93,94,95,97,108,111,112,115,116,117,118,119,121,122,124,125,130,136,137,138,139,140,141,143,145,146,152,153,154,155,158,159,160,],[26,-19,-18,99,-46,-71,-71,-64,-65,-66,-67,-68,-71,-71,-71,126,127,129,-64,132,-44,-53,-56,-57,-60,141,-62,-63,142,-30,144,-35,147,-42,-45,-54,-55,-58,-59,-61,-71,-71,-71,141,-41,-43,-17,-29,-33,-34,]),'OPEN_BRACKETS':([28,52,72,],[34,34,98,]),'ASSIGN':([28,45,52,68,72,155,],[-19,63,-19,92,-18,-17,]),'READ':([32,38,39,40,41,42,43,56,100,144,147,151,153,157,161,162,166,167,],[46,46,46,46,46,46,46,-7,-27,-31,-32,-40,-41,-28,-37,-38,-36,-39,]),'WRITE':([32,38,39,40,41,42,43,56,100,144,147,151,153,157,161,162,166,167,],[47,47,47,47,47,47,47,-7,-27,-31,-32,-40,-41,-28,-37,-38,-36,-39,]),'IF':([32,38,39,40,41,42,43,56,100,144,147,151,153,157,161,162,166,167,],[48,48,48,48,48,48,48,-7,-27,-31,-32,-40,-41,-28,-37,-38,-36,-39,]),'WHILE':([32,38,39,40,41,42,43,56,100,144,147,151,153,157,161,162,166,167,],[49,49,49,49,49,49,49,-7,-27,-31,-32,-40,-41,-28,-37,-38,-36,-39,]),'FOR':([32,38,39,40,41,42,43,56,100,144,147,151,153,157,161,162,166,167,],[50,50,50,50,50,50,50,-7,-27,-31,-32,-40,-41,-28,-37,-38,-36,-39,]),'RETURN':([32,38,39,40,41,42,43,56,100,144,147,151,153,157,161,162,166,167,],[51,51,51,51,51,51,51,-7,-27,-31,-32,-40,-41,-28,-37,-38,-36,-39,]),'CLOSE_BRACES':([32,37,38,39,40,41,42,43,44,56,57,58,59,60,61,62,100,144,147,151,153,157,161,162,166,167,],[-71,56,-71,-71,-71,-71,-71,-71,-26,-7,-20,-21,-22,-23,-24,-25,-27,-31,-32,-40,-41,-28,-37,-38,-36,-39,]),'CT_INT':([34,63,65,66,67,69,70,78,92,94,98,101,102,103,104,105,106,107,109,110,113,114,123,131,133,150,],[54,82,82,82,82,82,82,82,82,82,134,82,-47,-48,-49,-50,-51,-52,82,82,82,82,82,82,82,82,]),'CLOSE_BRACKETS':([54,134,],[72,155,]),'ELSE':([56,161,],[-7,164,]),'CT_FLOAT':([63,65,66,67,69,70,78,92,94,101,102,103,104,105,106,107,109,110,113,114,123,131,133,150,],[83,83,83,83,83,83,83,83,83,83,-47,-48,-49,-50,-51,-52,83,83,83,83,83,83,83,83,]),'CT_CHAR':([63,65,66,67,69,70,78,92,94,101,102,103,104,105,106,107,109,110,113,114,123,131,133,150,],[84,84,84,84,84,84,84,84,84,84,-47,-48,-49,-50,-51,-52,84,84,84,84,84,84,84,84,]),'PLUS':([63,65,66,67,69,70,76,77,78,80,81,82,83,84,92,94,101,102,103,104,105,106,107,109,110,112,113,114,115,117,118,123,131,133,139,140,141,150,153,],[85,85,85,85,85,85,109,-71,85,-64,-65,-66,-67,-68,85,85,85,-47,-48,-49,-50,-51,-52,85,85,-57,85,85,-60,-62,-63,85,85,85,-58,-59,-61,85,-41,]),'MINUS':([63,65,66,67,69,70,76,77,78,80,81,82,83,84,92,94,101,102,103,104,105,106,107,109,110,112,113,114,115,117,118,123,131,133,139,140,141,150,153,],[86,86,86,86,86,86,110,-71,86,-64,-65,-66,-67,-68,86,86,86,-47,-48,-49,-50,-51,-52,86,86,-57,86,86,-60,-62,-63,86,86,86,-58,-59,-61,86,-41,]),'CT_STRING':([65,123,],[88,145,]),'TO':([75,76,77,80,81,82,83,84,108,111,112,115,117,118,128,136,137,138,139,140,141,153,],[-46,-71,-71,-64,-65,-66,-67,-68,-53,-56,-57,-60,-62,-63,150,-45,-54,-55,-58,-59,-61,-41,]),'DO':([75,76,77,80,81,82,83,84,108,111,112,115,117,118,127,136,137,138,139,140,141,153,163,],[-46,-71,-71,-64,-65,-66,-67,-68,-53,-56,-57,-60,-62,-63,149,-45,-54,-55,-58,-59,-61,-41,165,]),'LESS_THAN':([75,76,77,80,81,82,83,84,94,108,111,112,115,117,118,137,138,139,140,141,153,],[102,-71,-71,-64,-65,-66,-67,-68,-64,-53,-56,-57,-60,-62,-63,-54,-55,-58,-59,-61,-41,]),'MORE_THAN':([75,76,77,80,81,82,83,84,94,108,111,112,115,117,118,137,138,139,140,141,153,],[103,-71,-71,-64,-65,-66,-67,-68,-64,-53,-56,-57,-60,-62,-63,-54,-55,-58,-59,-61,-41,]),'EQUALS':([75,76,77,80,81,82,83,84,94,108,111,112,115,117,118,137,138,139,140,141,153,],[104,-71,-71,-64,-65,-66,-67,-68,-64,-53,-56,-57,-60,-62,-63,-54,-55,-58,-59,-61,-41,]),'NOT_EQUALS':([75,76,77,80,81,82,83,84,94,108,111,112,115,117,118,137,138,139,140,141,153,],[105,-71,-71,-64,-65,-66,-67,-68,-64,-53,-56,-57,-60,-62,-63,-54,-55,-58,-59,-61,-41,]),'AND':([75,76,77,80,81,82,83,84,94,108,111,112,115,117,118,137,138,139,140,141,153,],[106,-71,-71,-64,-65,-66,-67,-68,-64,-53,-56,-57,-60,-62,-63,-54,-55,-58,-59,-61,-41,]),'OR':([75,76,77,80,81,82,83,84,94,108,111,112,115,117,118,137,138,139,140,141,153,],[107,-71,-71,-64,-65,-66,-67,-68,-64,-53,-56,-57,-60,-62,-63,-54,-55,-58,-59,-61,-41,]),'MULTIPLIES':([77,80,81,82,83,84,94,117,118,141,153,],[113,-64,-65,-66,-67,-68,-64,-62,-63,-61,-41,]),'DIVIDE':([77,80,81,82,83,84,94,117,118,141,153,],[114,-64,-65,-66,-67,-68,-64,-62,-63,-61,-41,]),'THEN':([126,],[148,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'main':([4,6,7,17,],[5,16,18,25,]),'vars':([4,99,],[6,135,]),'funcs':([4,6,],[7,17,]),'func_type':([4,6,],[10,10,]),'var_type':([4,6,9,27,29,36,53,],[11,11,21,21,21,55,21,]),'var_comp':([9,27,29,53,],[20,33,35,71,]),'empty':([9,27,29,32,38,39,40,41,42,43,53,76,77,87,88,89,143,145,146,],[23,23,23,44,44,44,44,44,44,44,23,111,115,121,124,124,121,124,124,]),'ids':([21,22,32,38,39,40,41,42,43,50,64,120,],[27,29,45,45,45,45,45,45,45,68,87,143,]),'block':([26,135,148,149,164,165,],[31,156,161,162,166,167,]),'statements':([32,38,39,40,41,42,43,],[37,57,58,59,60,61,62,]),'assignment':([32,38,39,40,41,42,43,],[38,38,38,38,38,38,38,]),'read':([32,38,39,40,41,42,43,],[39,39,39,39,39,39,39,]),'write':([32,38,39,40,41,42,43,],[40,40,40,40,40,40,40,]),'condition':([32,38,39,40,41,42,43,],[41,41,41,41,41,41,41,]),'return':([32,38,39,40,41,42,43,],[42,42,42,42,42,42,42,]),'func_call':([32,38,39,40,41,42,43,63,65,66,67,69,70,78,79,92,94,101,109,110,113,114,123,131,133,150,],[43,43,43,43,43,43,43,81,81,81,81,81,81,81,118,81,81,81,81,81,81,81,81,81,81,81,]),'expressions':([63,65,66,67,70,78,92,94,123,131,133,150,],[74,89,90,91,97,116,128,97,146,152,97,163,]),'exp':([63,65,66,67,69,70,78,92,94,101,109,110,123,131,133,150,],[75,75,75,75,93,75,75,75,75,136,137,138,75,75,75,75,]),'term':([63,65,66,67,69,70,78,92,94,101,109,110,113,114,123,131,133,150,],[76,76,76,76,76,76,76,76,76,76,76,76,139,140,76,76,76,76,]),'factor':([63,65,66,67,69,70,78,92,94,101,109,110,113,114,123,131,133,150,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'factor_comp':([63,65,66,67,69,70,78,92,94,101,109,110,113,114,123,131,133,150,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'func_call_comp':([70,94,131,133,],[95,130,95,154,]),'expressions_op':([75,],[101,]),'exp_comp':([76,],[108,]),'term_comp':([77,],[112,]),'read_comp':([87,143,],[119,158,]),'write_comp':([88,89,145,146,],[122,125,159,160,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON main','program',4,'p_program','parser.py',7),
  ('program -> PROGRAM ID SEMICOLON vars main','program',5,'p_program','parser.py',8),
  ('program -> PROGRAM ID SEMICOLON funcs main','program',5,'p_program','parser.py',9),
  ('program -> PROGRAM ID SEMICOLON vars funcs main','program',6,'p_program','parser.py',10),
  ('main -> MAIN OPEN_PAREN CLOSE_PAREN block','main',4,'p_main','parser.py',15),
  ('funcs -> func_type MODULE ID OPEN_PAREN var_type ID CLOSE_PAREN vars block','funcs',9,'p_funcs','parser.py',19),
  ('block -> OPEN_BRACES statements CLOSE_BRACES','block',3,'p_block','parser.py',23),
  ('func_type -> var_type','func_type',1,'p_func_type','parser.py',27),
  ('func_type -> VOID','func_type',1,'p_func_type','parser.py',28),
  ('var_type -> INT','var_type',1,'p_var_type','parser.py',33),
  ('var_type -> FLOAT','var_type',1,'p_var_type','parser.py',34),
  ('var_type -> CHAR','var_type',1,'p_var_type','parser.py',35),
  ('vars -> VARS var_comp','vars',2,'p_vars','parser.py',40),
  ('var_comp -> var_type ids var_comp SEMICOLON var_comp','var_comp',5,'p_var_comp','parser.py',44),
  ('var_comp -> COMMA ids var_comp','var_comp',3,'p_var_comp','parser.py',45),
  ('var_comp -> empty','var_comp',1,'p_var_comp','parser.py',46),
  ('ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS','ids',7,'p_ids','parser.py',51),
  ('ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS','ids',4,'p_ids','parser.py',52),
  ('ids -> ID','ids',1,'p_ids','parser.py',53),
  ('statements -> assignment statements','statements',2,'p_statements','parser.py',58),
  ('statements -> read statements','statements',2,'p_statements','parser.py',59),
  ('statements -> write statements','statements',2,'p_statements','parser.py',60),
  ('statements -> condition statements','statements',2,'p_statements','parser.py',61),
  ('statements -> return statements','statements',2,'p_statements','parser.py',62),
  ('statements -> func_call statements','statements',2,'p_statements','parser.py',63),
  ('statements -> empty','statements',1,'p_statements','parser.py',64),
  ('assignment -> ids ASSIGN expressions SEMICOLON','assignment',4,'p_assignment','parser.py',69),
  ('read -> READ OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLON','read',6,'p_read','parser.py',73),
  ('read_comp -> COMMA ids read_comp','read_comp',3,'p_read_comp','parser.py',77),
  ('read_comp -> empty','read_comp',1,'p_read_comp','parser.py',78),
  ('write -> WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN','write',5,'p_write','parser.py',83),
  ('write -> WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN','write',5,'p_write','parser.py',84),
  ('write_comp -> COMMA CT_STRING write_comp','write_comp',3,'p_write_comp','parser.py',89),
  ('write_comp -> COMMA expressions write_comp','write_comp',3,'p_write_comp','parser.py',90),
  ('write_comp -> empty','write_comp',1,'p_write_comp','parser.py',91),
  ('condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block','condition',8,'p_condition','parser.py',96),
  ('condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block','condition',6,'p_condition','parser.py',97),
  ('condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN DO block','condition',6,'p_condition','parser.py',98),
  ('condition -> FOR ids ASSIGN expressions TO expressions DO block','condition',8,'p_condition','parser.py',99),
  ('return -> RETURN OPEN_PAREN exp CLOSE_PAREN SEMICOLON','return',5,'p_return','parser.py',104),
  ('func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON','func_call',5,'p_func_call','parser.py',108),
  ('func_call_comp -> ID func_call_comp','func_call_comp',2,'p_func_call_comp','parser.py',112),
  ('func_call_comp -> COMMA ID func_call_comp','func_call_comp',3,'p_func_call_comp','parser.py',113),
  ('func_call_comp -> expressions','func_call_comp',1,'p_func_call_comp','parser.py',114),
  ('expressions -> exp expressions_op exp','expressions',3,'p_expressions','parser.py',119),
  ('expressions -> exp','expressions',1,'p_expressions','parser.py',120),
  ('expressions_op -> LESS_THAN','expressions_op',1,'p_expressions_op','parser.py',125),
  ('expressions_op -> MORE_THAN','expressions_op',1,'p_expressions_op','parser.py',126),
  ('expressions_op -> EQUALS','expressions_op',1,'p_expressions_op','parser.py',127),
  ('expressions_op -> NOT_EQUALS','expressions_op',1,'p_expressions_op','parser.py',128),
  ('expressions_op -> AND','expressions_op',1,'p_expressions_op','parser.py',129),
  ('expressions_op -> OR','expressions_op',1,'p_expressions_op','parser.py',130),
  ('exp -> term exp_comp','exp',2,'p_exp','parser.py',135),
  ('exp_comp -> PLUS exp','exp_comp',2,'p_exp_comp','parser.py',139),
  ('exp_comp -> MINUS exp','exp_comp',2,'p_exp_comp','parser.py',140),
  ('exp_comp -> empty','exp_comp',1,'p_exp_comp','parser.py',141),
  ('term -> factor term_comp','term',2,'p_term','parser.py',146),
  ('term_comp -> MULTIPLIES term','term_comp',2,'p_term_comp','parser.py',150),
  ('term_comp -> DIVIDE term','term_comp',2,'p_term_comp','parser.py',151),
  ('term_comp -> empty','term_comp',1,'p_term_comp','parser.py',152),
  ('factor -> OPEN_PAREN expressions CLOSE_PAREN','factor',3,'p_factor','parser.py',157),
  ('factor -> factor_comp ID','factor',2,'p_factor','parser.py',158),
  ('factor -> factor_comp func_call','factor',2,'p_factor','parser.py',159),
  ('factor -> ID','factor',1,'p_factor','parser.py',160),
  ('factor -> func_call','factor',1,'p_factor','parser.py',161),
  ('factor -> CT_INT','factor',1,'p_factor','parser.py',162),
  ('factor -> CT_FLOAT','factor',1,'p_factor','parser.py',163),
  ('factor -> CT_CHAR','factor',1,'p_factor','parser.py',164),
  ('factor_comp -> PLUS','factor_comp',1,'p_factor_comp','parser.py',169),
  ('factor_comp -> MINUS','factor_comp',1,'p_factor_comp','parser.py',170),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',175),
]
