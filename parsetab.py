
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN CHAR CLOSE_BRACES CLOSE_BRACKETS CLOSE_PAREN COMMA CT_CHAR CT_FLOAT CT_INT CT_STRING DIVIDE DO ELSE EQUALS FLOAT FOR ID IF INT LESS_THAN LESS_THAN_EQUAL MAIN MINUS MODULE MORE_THAN MORE_THAN_EQUAL MULTIPLIES NOT_EQUALS OPEN_BRACES OPEN_BRACKETS OPEN_PAREN OR PLUS PROGRAM READ RETURN SEMICOLON THEN TO VARS VOID WHILE WRITEprogram : PROGRAM ID add_program SEMICOLON vars funcs main end_programadd_program : end_program :main : MAIN OPEN_PAREN CLOSE_PAREN blockfuncs : func_type MODULE ID add_module OPEN_PAREN funcs_params CLOSE_PAREN vars block\n    | empty\n    add_module :funcs_comp : ID add_module OPEN_PAREN funcs_params CLOSE_PAREN vars blockfuncs_params : var_type variable_params funcs_params_comp\n    | empty\n    funcs_params_comp : COMMA var_type variable_params funcs_params_comp\n    | empty\n    block : OPEN_BRACES statements CLOSE_BRACESfunc_type : var_type\n    | VOID\n    var_type : INT\n    | FLOAT\n    | CHAR\n    vars : VARS var_comp\n    | empty\n    var_comp : var_type ids_dec var_comp_2 var_comp_final\n    | var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive\n    create_var_table : emptyvar_comp_2 : COMMA ids_dec var_comp_3\n    | empty\n    var_comp_3 : var_comp_2var_comp_recursive : var_type ids_dec var_comp_2 var_comp_final\n    | var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive\n    var_comp_final : SEMICOLON\n    | var_module_trans\n    var_module_trans : SEMICOLON var_type MODULE funcs_comp\n    ids_dec : ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS\n    | ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS\n    | ID\n    ids : ID OPEN_BRACKETS exp CLOSE_BRACKETS OPEN_BRACKETS exp CLOSE_BRACKETS\n    | ID OPEN_BRACKETS exp CLOSE_BRACKETS\n    | ID\n    statements : assignment SEMICOLON statements\n    | read SEMICOLON statements \n    | write SEMICOLON statements\n    | condition statements\n    | return SEMICOLON statements\n    | func_call SEMICOLON statements\n    | empty\n    assignment : ids ASSIGN expressionsread : READ OPEN_PAREN ids read_comp CLOSE_PARENread_comp : COMMA ids read_comp\n    | empty\n    write : WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN\n    | WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN\n    write_comp : COMMA CT_STRING write_comp\n    | COMMA expressions write_comp\n    | empty\n    end_if :condition : IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE g_else_quad block end_if\n    | IF OPEN_PAREN expressions CLOSE_PAREN g_if_quad THEN block end_if\n    | WHILE OPEN_PAREN expressions CLOSE_PAREN DO block\n    | FOR ids ASSIGN expressions TO expressions DO block\n    g_if_quad :g_else_quad :return : RETURN OPEN_PAREN exp CLOSE_PARENfunc_call : ID OPEN_PAREN func_call_comp CLOSE_PAREN\n    func_call_comp : expressions func_call_comp\n    | COMMA expressions func_call_comp\n    | empty\n    expressions : expressions_compexpressions_comp : expression_comp_2\n    | expression_comp_2 OR expressions_comp\n    expression_comp_2 : expression_comp_3\n    | expression_comp_3 AND expression_comp_2\n    expression_comp_3 : exp\n    | exp expressions_op exp\n    expressions_op : LESS_THAN\n    | LESS_THAN_EQUAL\n    | MORE_THAN\n    | MORE_THAN_EQUAL\n    | EQUALS\n    | NOT_EQUALS\n    exp : term \n    | term exp_comp\n    exp_comp : PLUS add_op exp\n    | MINUS add_op exp\n    term : factor \n    | factor term_comp\n    term_comp : MULTIPLIES add_op term\n    | DIVIDE add_op term\n    add_op : factor : OPEN_PAREN expressions CLOSE_PAREN\n    | variable \n    | func_call\n    | CT_INT add_ct_int\n    | CT_FLOAT add_ct_float\n    | CT_CHAR add_ct_char\n    add_ct_int : add_ct_float : add_ct_char : variable_params : ID\n    | ID dim\n    variable : ID add_id\n    | ID dim\n    add_id : dim : OPEN_BRACKETS exp CLOSE_BRACKETSempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,19,24,38,68,],[0,-3,-1,-4,-13,]),'ID':([2,14,15,16,18,21,28,39,41,50,59,63,65,68,69,70,71,73,74,75,76,77,78,79,82,83,84,98,99,100,101,102,103,104,105,106,107,108,109,110,116,119,120,128,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,149,150,151,152,153,155,158,165,167,170,174,175,176,177,178,179,180,181,191,193,195,197,198,199,200,206,212,217,218,220,221,],[3,-16,-17,-18,23,26,23,61,23,61,81,87,89,-13,61,61,61,61,61,110,81,110,110,110,110,110,110,-66,-67,-69,-71,-79,-83,110,-89,-90,-94,-95,-96,-101,110,110,110,110,110,110,110,-73,-74,-75,-76,-77,-78,-80,-87,-87,-84,-87,-87,-91,-92,-93,-99,-100,81,110,-62,110,87,-68,-70,-72,110,110,110,110,-88,110,110,-102,-81,-82,-85,-86,-57,-54,-56,-58,-54,-55,]),'SEMICOLON':([3,4,22,23,27,29,36,43,44,45,47,48,49,51,52,66,90,97,98,99,100,101,102,103,105,106,107,108,109,110,132,142,145,149,150,151,152,153,164,165,174,175,176,181,182,184,187,195,197,198,199,200,],[-2,5,-103,-34,34,-25,-103,-24,-26,-33,69,70,71,73,74,-103,131,-45,-66,-67,-69,-71,-79,-83,-89,-90,-94,-95,-96,-101,-32,-80,-84,-91,-92,-93,-99,-100,-61,-62,-68,-70,-72,-88,-46,-49,-50,-102,-81,-82,-85,-86,]),'VARS':([5,85,210,],[7,7,7,]),'VOID':([5,6,8,17,33,34,35,42,68,88,130,131,173,219,],[-103,13,-20,-19,-21,-29,-30,-22,-13,-31,-27,-29,-28,-8,]),'INT':([5,6,7,8,17,33,34,35,40,42,68,88,125,130,131,172,173,219,],[-103,14,14,-20,-19,-21,14,-30,14,-22,-13,-31,14,-27,14,14,-28,-8,]),'FLOAT':([5,6,7,8,17,33,34,35,40,42,68,88,125,130,131,172,173,219,],[-103,15,15,-20,-19,-21,15,-30,15,-22,-13,-31,15,-27,15,15,-28,-8,]),'CHAR':([5,6,7,8,17,33,34,35,40,42,68,88,125,130,131,172,173,219,],[-103,16,16,-20,-19,-21,16,-30,16,-22,-13,-31,16,-27,16,16,-28,-8,]),'MAIN':([5,6,8,9,11,17,33,34,35,42,68,88,130,131,169,173,219,],[-103,-103,-20,20,-6,-19,-21,-29,-30,-22,-13,-31,-27,-29,-5,-28,-8,]),'OPEN_BRACES':([8,17,31,33,34,35,42,68,85,88,123,130,131,173,188,190,205,210,211,213,215,216,219,],[-20,-19,39,-21,-29,-30,-22,-13,-103,-31,39,-27,-29,-28,39,39,39,-103,-60,39,39,39,-8,]),'MODULE':([10,12,13,14,15,16,41,],[21,-14,-15,-16,-17,-18,65,]),'OPEN_PAREN':([20,26,32,55,56,57,58,60,61,75,77,78,79,82,83,84,89,98,99,100,101,102,103,104,105,106,107,108,109,110,116,119,120,128,129,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,149,150,151,152,153,158,165,167,174,175,176,177,178,179,180,181,191,193,195,197,198,199,200,],[25,-7,40,76,77,78,79,82,83,104,104,104,104,104,104,104,-7,-66,-67,-69,-71,-79,-83,104,-89,-90,-94,-95,-96,83,104,104,104,104,172,104,104,104,-73,-74,-75,-76,-77,-78,-80,-87,-87,-84,-87,-87,-91,-92,-93,-99,-100,104,-62,104,-68,-70,-72,104,104,104,104,-88,104,104,-102,-81,-82,-85,-86,]),'COMMA':([22,23,36,45,66,81,83,86,87,98,99,100,101,102,103,105,106,107,108,109,110,111,112,113,119,127,132,142,145,149,150,151,152,153,165,167,168,174,175,176,181,183,185,186,194,195,197,198,199,200,214,],[28,-34,28,-33,28,-37,120,125,-97,-66,-67,-69,-71,-79,-83,-89,-90,-94,-95,-96,-101,155,158,158,120,-98,-32,-80,-84,-91,-92,-93,-99,-100,-62,120,-36,-68,-70,-72,-88,155,158,158,125,-102,-81,-82,-85,-86,-35,]),'OPEN_BRACKETS':([23,45,61,81,87,110,168,],[30,67,84,84,128,128,193,]),'CLOSE_PAREN':([25,40,62,64,81,83,86,87,98,99,100,101,102,103,105,106,107,108,109,110,111,112,113,114,115,117,118,119,121,124,126,127,142,145,148,149,150,151,152,153,154,156,157,159,160,165,166,167,168,172,174,175,176,181,183,185,186,192,194,195,196,197,198,199,200,201,202,203,209,214,],[31,-103,85,-10,-37,-103,-103,-97,-66,-67,-69,-71,-79,-83,-89,-90,-94,-95,-96,-101,-103,-103,-103,161,162,164,165,-103,-65,-9,-12,-98,-80,-84,181,-91,-92,-93,-99,-100,182,-48,184,-53,187,-62,-63,-103,-36,-103,-68,-70,-72,-88,-103,-103,-103,-64,-103,-102,210,-81,-82,-85,-86,-47,-51,-52,-11,-35,]),'CT_INT':([30,67,75,77,78,79,82,83,84,98,99,100,101,102,103,104,105,106,107,108,109,110,116,119,120,128,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,149,150,151,152,153,158,165,167,174,175,176,177,178,179,180,181,191,193,195,197,198,199,200,],[37,91,107,107,107,107,107,107,107,-66,-67,-69,-71,-79,-83,107,-89,-90,-94,-95,-96,-101,107,107,107,107,107,107,107,-73,-74,-75,-76,-77,-78,-80,-87,-87,-84,-87,-87,-91,-92,-93,-99,-100,107,-62,107,-68,-70,-72,107,107,107,107,-88,107,107,-102,-81,-82,-85,-86,]),'CLOSE_BRACKETS':([37,91,102,103,105,106,107,108,109,110,122,142,145,149,150,151,152,153,165,171,181,195,197,198,199,200,208,],[45,132,-79,-83,-89,-90,-94,-95,-96,-101,168,-80,-84,-91,-92,-93,-99,-100,-62,195,-88,-102,-81,-82,-85,-86,214,]),'READ':([39,50,68,69,70,71,73,74,206,212,217,218,220,221,],[55,55,-13,55,55,55,55,55,-57,-54,-56,-58,-54,-55,]),'WRITE':([39,50,68,69,70,71,73,74,206,212,217,218,220,221,],[56,56,-13,56,56,56,56,56,-57,-54,-56,-58,-54,-55,]),'IF':([39,50,68,69,70,71,73,74,206,212,217,218,220,221,],[57,57,-13,57,57,57,57,57,-57,-54,-56,-58,-54,-55,]),'WHILE':([39,50,68,69,70,71,73,74,206,212,217,218,220,221,],[58,58,-13,58,58,58,58,58,-57,-54,-56,-58,-54,-55,]),'FOR':([39,50,68,69,70,71,73,74,206,212,217,218,220,221,],[59,59,-13,59,59,59,59,59,-57,-54,-56,-58,-54,-55,]),'RETURN':([39,50,68,69,70,71,73,74,206,212,217,218,220,221,],[60,60,-13,60,60,60,60,60,-57,-54,-56,-58,-54,-55,]),'CLOSE_BRACES':([39,46,50,53,68,69,70,71,72,73,74,92,93,94,95,96,206,212,217,218,220,221,],[-103,68,-103,-44,-13,-103,-103,-103,-41,-103,-103,-38,-39,-40,-42,-43,-57,-54,-56,-58,-54,-55,]),'ASSIGN':([54,61,80,81,168,214,],[75,-37,116,-37,-36,-35,]),'ELSE':([68,204,],[-13,211,]),'CT_FLOAT':([75,77,78,79,82,83,84,98,99,100,101,102,103,104,105,106,107,108,109,110,116,119,120,128,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,149,150,151,152,153,158,165,167,174,175,176,177,178,179,180,181,191,193,195,197,198,199,200,],[108,108,108,108,108,108,108,-66,-67,-69,-71,-79,-83,108,-89,-90,-94,-95,-96,-101,108,108,108,108,108,108,108,-73,-74,-75,-76,-77,-78,-80,-87,-87,-84,-87,-87,-91,-92,-93,-99,-100,108,-62,108,-68,-70,-72,108,108,108,108,-88,108,108,-102,-81,-82,-85,-86,]),'CT_CHAR':([75,77,78,79,82,83,84,98,99,100,101,102,103,104,105,106,107,108,109,110,116,119,120,128,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,149,150,151,152,153,158,165,167,174,175,176,177,178,179,180,181,191,193,195,197,198,199,200,],[109,109,109,109,109,109,109,-66,-67,-69,-71,-79,-83,109,-89,-90,-94,-95,-96,-101,109,109,109,109,109,109,109,-73,-74,-75,-76,-77,-78,-80,-87,-87,-84,-87,-87,-91,-92,-93,-99,-100,109,-62,109,-68,-70,-72,109,109,109,109,-88,109,109,-102,-81,-82,-85,-86,]),'CT_STRING':([77,158,],[112,185,]),'TO':([98,99,100,101,102,103,105,106,107,108,109,110,142,145,149,150,151,152,153,163,165,174,175,176,181,195,197,198,199,200,],[-66,-67,-69,-71,-79,-83,-89,-90,-94,-95,-96,-101,-80,-84,-91,-92,-93,-99,-100,191,-62,-68,-70,-72,-88,-102,-81,-82,-85,-86,]),'DO':([98,99,100,101,102,103,105,106,107,108,109,110,142,145,149,150,151,152,153,162,165,174,175,176,181,195,197,198,199,200,207,],[-66,-67,-69,-71,-79,-83,-89,-90,-94,-95,-96,-101,-80,-84,-91,-92,-93,-99,-100,190,-62,-68,-70,-72,-88,-102,-81,-82,-85,-86,213,]),'OR':([99,100,101,102,103,105,106,107,108,109,110,142,145,149,150,151,152,153,165,175,176,181,195,197,198,199,200,],[133,-69,-71,-79,-83,-89,-90,-94,-95,-96,-101,-80,-84,-91,-92,-93,-99,-100,-62,-70,-72,-88,-102,-81,-82,-85,-86,]),'AND':([100,101,102,103,105,106,107,108,109,110,142,145,149,150,151,152,153,165,176,181,195,197,198,199,200,],[134,-71,-79,-83,-89,-90,-94,-95,-96,-101,-80,-84,-91,-92,-93,-99,-100,-62,-72,-88,-102,-81,-82,-85,-86,]),'LESS_THAN':([101,102,103,105,106,107,108,109,110,142,145,149,150,151,152,153,165,181,195,197,198,199,200,],[136,-79,-83,-89,-90,-94,-95,-96,-101,-80,-84,-91,-92,-93,-99,-100,-62,-88,-102,-81,-82,-85,-86,]),'LESS_THAN_EQUAL':([101,102,103,105,106,107,108,109,110,142,145,149,150,151,152,153,165,181,195,197,198,199,200,],[137,-79,-83,-89,-90,-94,-95,-96,-101,-80,-84,-91,-92,-93,-99,-100,-62,-88,-102,-81,-82,-85,-86,]),'MORE_THAN':([101,102,103,105,106,107,108,109,110,142,145,149,150,151,152,153,165,181,195,197,198,199,200,],[138,-79,-83,-89,-90,-94,-95,-96,-101,-80,-84,-91,-92,-93,-99,-100,-62,-88,-102,-81,-82,-85,-86,]),'MORE_THAN_EQUAL':([101,102,103,105,106,107,108,109,110,142,145,149,150,151,152,153,165,181,195,197,198,199,200,],[139,-79,-83,-89,-90,-94,-95,-96,-101,-80,-84,-91,-92,-93,-99,-100,-62,-88,-102,-81,-82,-85,-86,]),'EQUALS':([101,102,103,105,106,107,108,109,110,142,145,149,150,151,152,153,165,181,195,197,198,199,200,],[140,-79,-83,-89,-90,-94,-95,-96,-101,-80,-84,-91,-92,-93,-99,-100,-62,-88,-102,-81,-82,-85,-86,]),'NOT_EQUALS':([101,102,103,105,106,107,108,109,110,142,145,149,150,151,152,153,165,181,195,197,198,199,200,],[141,-79,-83,-89,-90,-94,-95,-96,-101,-80,-84,-91,-92,-93,-99,-100,-62,-88,-102,-81,-82,-85,-86,]),'PLUS':([102,103,105,106,107,108,109,110,145,149,150,151,152,153,165,181,195,199,200,],[143,-83,-89,-90,-94,-95,-96,-101,-84,-91,-92,-93,-99,-100,-62,-88,-102,-85,-86,]),'MINUS':([102,103,105,106,107,108,109,110,145,149,150,151,152,153,165,181,195,199,200,],[144,-83,-89,-90,-94,-95,-96,-101,-84,-91,-92,-93,-99,-100,-62,-88,-102,-85,-86,]),'MULTIPLIES':([103,105,106,107,108,109,110,149,150,151,152,153,165,181,195,],[146,-89,-90,-94,-95,-96,-101,-91,-92,-93,-99,-100,-62,-88,-102,]),'DIVIDE':([103,105,106,107,108,109,110,149,150,151,152,153,165,181,195,],[147,-89,-90,-94,-95,-96,-101,-91,-92,-93,-99,-100,-62,-88,-102,]),'THEN':([161,189,],[188,205,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'add_program':([3,],[4,]),'vars':([5,85,210,],[6,123,215,]),'empty':([5,6,22,36,39,40,50,66,69,70,71,73,74,83,85,86,111,112,113,119,167,172,183,185,186,194,210,],[8,11,29,29,53,64,53,29,53,53,53,53,53,121,8,126,156,159,159,121,121,64,156,159,159,126,8,]),'funcs':([6,],[9,]),'func_type':([6,],[10,]),'var_type':([6,7,34,40,125,131,172,],[12,18,41,63,170,41,63,]),'var_comp':([7,],[17,]),'main':([9,],[19,]),'ids_dec':([18,28,41,],[22,36,66,]),'end_program':([19,],[24,]),'var_comp_2':([22,36,66,],[27,44,90,]),'add_module':([26,89,],[32,129,]),'var_comp_final':([27,90,],[33,130,]),'var_module_trans':([27,90,],[35,35,]),'block':([31,123,188,190,205,213,215,216,],[38,169,204,206,212,218,219,220,]),'var_comp_recursive':([34,131,],[42,173,]),'var_comp_3':([36,],[43,]),'statements':([39,50,69,70,71,73,74,],[46,72,92,93,94,95,96,]),'assignment':([39,50,69,70,71,73,74,],[47,47,47,47,47,47,47,]),'read':([39,50,69,70,71,73,74,],[48,48,48,48,48,48,48,]),'write':([39,50,69,70,71,73,74,],[49,49,49,49,49,49,49,]),'condition':([39,50,69,70,71,73,74,],[50,50,50,50,50,50,50,]),'return':([39,50,69,70,71,73,74,],[51,51,51,51,51,51,51,]),'func_call':([39,50,69,70,71,73,74,75,77,78,79,82,83,84,104,116,119,120,128,133,134,135,158,167,177,178,179,180,191,193,],[52,52,52,52,52,52,52,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,]),'ids':([39,50,59,69,70,71,73,74,76,155,],[54,54,80,54,54,54,54,54,111,183,]),'funcs_params':([40,172,],[62,196,]),'variable_params':([63,170,],[86,194,]),'funcs_comp':([65,],[88,]),'expressions':([75,77,78,79,83,104,116,119,120,158,167,191,],[97,113,114,115,119,148,163,119,167,186,119,207,]),'expressions_comp':([75,77,78,79,83,104,116,119,120,133,158,167,191,],[98,98,98,98,98,98,98,98,98,174,98,98,98,]),'expression_comp_2':([75,77,78,79,83,104,116,119,120,133,134,158,167,191,],[99,99,99,99,99,99,99,99,99,99,175,99,99,99,]),'expression_comp_3':([75,77,78,79,83,104,116,119,120,133,134,158,167,191,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,]),'exp':([75,77,78,79,82,83,84,104,116,119,120,128,133,134,135,158,167,177,178,191,193,],[101,101,101,101,117,101,122,101,101,101,101,171,101,101,176,101,101,197,198,101,208,]),'term':([75,77,78,79,82,83,84,104,116,119,120,128,133,134,135,158,167,177,178,179,180,191,193,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,199,200,102,102,]),'factor':([75,77,78,79,82,83,84,104,116,119,120,128,133,134,135,158,167,177,178,179,180,191,193,],[103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,]),'variable':([75,77,78,79,82,83,84,104,116,119,120,128,133,134,135,158,167,177,178,179,180,191,193,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),'func_call_comp':([83,119,167,],[118,166,192,]),'funcs_params_comp':([86,194,],[124,209,]),'dim':([87,110,],[127,153,]),'expressions_op':([101,],[135,]),'exp_comp':([102,],[142,]),'term_comp':([103,],[145,]),'add_ct_int':([107,],[149,]),'add_ct_float':([108,],[150,]),'add_ct_char':([109,],[151,]),'add_id':([110,],[152,]),'read_comp':([111,183,],[154,201,]),'write_comp':([112,113,185,186,],[157,160,202,203,]),'add_op':([143,144,146,147,],[177,178,179,180,]),'g_if_quad':([161,],[189,]),'g_else_quad':([211,],[216,]),'end_if':([212,220,],[217,221,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID add_program SEMICOLON vars funcs main end_program','program',8,'p_program','parser.py',52),
  ('add_program -> <empty>','add_program',0,'p_add_program','parser.py',55),
  ('end_program -> <empty>','end_program',0,'p_end_program','parser.py',71),
  ('main -> MAIN OPEN_PAREN CLOSE_PAREN block','main',4,'p_main','parser.py',76),
  ('funcs -> func_type MODULE ID add_module OPEN_PAREN funcs_params CLOSE_PAREN vars block','funcs',9,'p_funcs','parser.py',80),
  ('funcs -> empty','funcs',1,'p_funcs','parser.py',81),
  ('add_module -> <empty>','add_module',0,'p_add_module','parser.py',85),
  ('funcs_comp -> ID add_module OPEN_PAREN funcs_params CLOSE_PAREN vars block','funcs_comp',7,'p_funcs_comp','parser.py',96),
  ('funcs_params -> var_type variable_params funcs_params_comp','funcs_params',3,'p_funcs_params','parser.py',100),
  ('funcs_params -> empty','funcs_params',1,'p_funcs_params','parser.py',101),
  ('funcs_params_comp -> COMMA var_type variable_params funcs_params_comp','funcs_params_comp',4,'p_funcs_params_comp','parser.py',106),
  ('funcs_params_comp -> empty','funcs_params_comp',1,'p_funcs_params_comp','parser.py',107),
  ('block -> OPEN_BRACES statements CLOSE_BRACES','block',3,'p_block','parser.py',113),
  ('func_type -> var_type','func_type',1,'p_func_type','parser.py',117),
  ('func_type -> VOID','func_type',1,'p_func_type','parser.py',118),
  ('var_type -> INT','var_type',1,'p_var_type','parser.py',126),
  ('var_type -> FLOAT','var_type',1,'p_var_type','parser.py',127),
  ('var_type -> CHAR','var_type',1,'p_var_type','parser.py',128),
  ('vars -> VARS var_comp','vars',2,'p_vars','parser.py',136),
  ('vars -> empty','vars',1,'p_vars','parser.py',137),
  ('var_comp -> var_type ids_dec var_comp_2 var_comp_final','var_comp',4,'p_var_comp','parser.py',142),
  ('var_comp -> var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive','var_comp',5,'p_var_comp','parser.py',143),
  ('create_var_table -> empty','create_var_table',1,'p_create_var_table','parser.py',147),
  ('var_comp_2 -> COMMA ids_dec var_comp_3','var_comp_2',3,'p_var_comp_2','parser.py',154),
  ('var_comp_2 -> empty','var_comp_2',1,'p_var_comp_2','parser.py',155),
  ('var_comp_3 -> var_comp_2','var_comp_3',1,'p_var_comp_3','parser.py',159),
  ('var_comp_recursive -> var_type ids_dec var_comp_2 var_comp_final','var_comp_recursive',4,'p_var_comp_recursive','parser.py',162),
  ('var_comp_recursive -> var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive','var_comp_recursive',5,'p_var_comp_recursive','parser.py',163),
  ('var_comp_final -> SEMICOLON','var_comp_final',1,'p_var_comp_final','parser.py',167),
  ('var_comp_final -> var_module_trans','var_comp_final',1,'p_var_comp_final','parser.py',168),
  ('var_module_trans -> SEMICOLON var_type MODULE funcs_comp','var_module_trans',4,'p_var_module_trans','parser.py',173),
  ('ids_dec -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS','ids_dec',7,'p_ids_dec','parser.py',178),
  ('ids_dec -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS','ids_dec',4,'p_ids_dec','parser.py',179),
  ('ids_dec -> ID','ids_dec',1,'p_ids_dec','parser.py',180),
  ('ids -> ID OPEN_BRACKETS exp CLOSE_BRACKETS OPEN_BRACKETS exp CLOSE_BRACKETS','ids',7,'p_ids','parser.py',190),
  ('ids -> ID OPEN_BRACKETS exp CLOSE_BRACKETS','ids',4,'p_ids','parser.py',191),
  ('ids -> ID','ids',1,'p_ids','parser.py',192),
  ('statements -> assignment SEMICOLON statements','statements',3,'p_statements','parser.py',206),
  ('statements -> read SEMICOLON statements','statements',3,'p_statements','parser.py',207),
  ('statements -> write SEMICOLON statements','statements',3,'p_statements','parser.py',208),
  ('statements -> condition statements','statements',2,'p_statements','parser.py',209),
  ('statements -> return SEMICOLON statements','statements',3,'p_statements','parser.py',210),
  ('statements -> func_call SEMICOLON statements','statements',3,'p_statements','parser.py',211),
  ('statements -> empty','statements',1,'p_statements','parser.py',212),
  ('assignment -> ids ASSIGN expressions','assignment',3,'p_assignment','parser.py',217),
  ('read -> READ OPEN_PAREN ids read_comp CLOSE_PAREN','read',5,'p_read','parser.py',221),
  ('read_comp -> COMMA ids read_comp','read_comp',3,'p_read_comp','parser.py',225),
  ('read_comp -> empty','read_comp',1,'p_read_comp','parser.py',226),
  ('write -> WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN','write',5,'p_write','parser.py',231),
  ('write -> WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN','write',5,'p_write','parser.py',232),
  ('write_comp -> COMMA CT_STRING write_comp','write_comp',3,'p_write_comp','parser.py',237),
  ('write_comp -> COMMA expressions write_comp','write_comp',3,'p_write_comp','parser.py',238),
  ('write_comp -> empty','write_comp',1,'p_write_comp','parser.py',239),
  ('end_if -> <empty>','end_if',0,'p_end_if','parser.py',244),
  ('condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE g_else_quad block end_if','condition',10,'p_condition','parser.py',250),
  ('condition -> IF OPEN_PAREN expressions CLOSE_PAREN g_if_quad THEN block end_if','condition',8,'p_condition','parser.py',251),
  ('condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN DO block','condition',6,'p_condition','parser.py',252),
  ('condition -> FOR ids ASSIGN expressions TO expressions DO block','condition',8,'p_condition','parser.py',253),
  ('g_if_quad -> <empty>','g_if_quad',0,'p_g_if_quad','parser.py',258),
  ('g_else_quad -> <empty>','g_else_quad',0,'p_g_else_quad','parser.py',271),
  ('return -> RETURN OPEN_PAREN exp CLOSE_PAREN','return',4,'p_return','parser.py',284),
  ('func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN','func_call',4,'p_func_call','parser.py',288),
  ('func_call_comp -> expressions func_call_comp','func_call_comp',2,'p_func_call_comp','parser.py',293),
  ('func_call_comp -> COMMA expressions func_call_comp','func_call_comp',3,'p_func_call_comp','parser.py',294),
  ('func_call_comp -> empty','func_call_comp',1,'p_func_call_comp','parser.py',295),
  ('expressions -> expressions_comp','expressions',1,'p_expressions','parser.py',300),
  ('expressions_comp -> expression_comp_2','expressions_comp',1,'p_expressions_comp','parser.py',304),
  ('expressions_comp -> expression_comp_2 OR expressions_comp','expressions_comp',3,'p_expressions_comp','parser.py',305),
  ('expression_comp_2 -> expression_comp_3','expression_comp_2',1,'p_expression_comp_2','parser.py',310),
  ('expression_comp_2 -> expression_comp_3 AND expression_comp_2','expression_comp_2',3,'p_expression_comp_2','parser.py',311),
  ('expression_comp_3 -> exp','expression_comp_3',1,'p_expression_comp_3','parser.py',316),
  ('expression_comp_3 -> exp expressions_op exp','expression_comp_3',3,'p_expression_comp_3','parser.py',317),
  ('expressions_op -> LESS_THAN','expressions_op',1,'p_expressions_op','parser.py',322),
  ('expressions_op -> LESS_THAN_EQUAL','expressions_op',1,'p_expressions_op','parser.py',323),
  ('expressions_op -> MORE_THAN','expressions_op',1,'p_expressions_op','parser.py',324),
  ('expressions_op -> MORE_THAN_EQUAL','expressions_op',1,'p_expressions_op','parser.py',325),
  ('expressions_op -> EQUALS','expressions_op',1,'p_expressions_op','parser.py',326),
  ('expressions_op -> NOT_EQUALS','expressions_op',1,'p_expressions_op','parser.py',327),
  ('exp -> term','exp',1,'p_exp','parser.py',332),
  ('exp -> term exp_comp','exp',2,'p_exp','parser.py',333),
  ('exp_comp -> PLUS add_op exp','exp_comp',3,'p_exp_comp','parser.py',338),
  ('exp_comp -> MINUS add_op exp','exp_comp',3,'p_exp_comp','parser.py',339),
  ('term -> factor','term',1,'p_term','parser.py',344),
  ('term -> factor term_comp','term',2,'p_term','parser.py',345),
  ('term_comp -> MULTIPLIES add_op term','term_comp',3,'p_term_comp','parser.py',350),
  ('term_comp -> DIVIDE add_op term','term_comp',3,'p_term_comp','parser.py',351),
  ('add_op -> <empty>','add_op',0,'p_add_op','parser.py',355),
  ('factor -> OPEN_PAREN expressions CLOSE_PAREN','factor',3,'p_factor','parser.py',426),
  ('factor -> variable','factor',1,'p_factor','parser.py',427),
  ('factor -> func_call','factor',1,'p_factor','parser.py',428),
  ('factor -> CT_INT add_ct_int','factor',2,'p_factor','parser.py',429),
  ('factor -> CT_FLOAT add_ct_float','factor',2,'p_factor','parser.py',430),
  ('factor -> CT_CHAR add_ct_char','factor',2,'p_factor','parser.py',431),
  ('add_ct_int -> <empty>','add_ct_int',0,'p_add_ct_int','parser.py',436),
  ('add_ct_float -> <empty>','add_ct_float',0,'p_add_ct_float','parser.py',444),
  ('add_ct_char -> <empty>','add_ct_char',0,'p_add_ct_char','parser.py',452),
  ('variable_params -> ID','variable_params',1,'p_variable_params','parser.py',462),
  ('variable_params -> ID dim','variable_params',2,'p_variable_params','parser.py',463),
  ('variable -> ID add_id','variable',2,'p_variable','parser.py',468),
  ('variable -> ID dim','variable',2,'p_variable','parser.py',469),
  ('add_id -> <empty>','add_id',0,'p_add_id','parser.py',474),
  ('dim -> OPEN_BRACKETS exp CLOSE_BRACKETS','dim',3,'p_dim','parser.py',495),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',500),
]
