Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM g_main_quad ID add_program SEMICOLON vars funcs main end_program
Rule 2     add_program -> <empty>
Rule 3     end_program -> <empty>
Rule 4     main -> MAIN OPEN_PAREN CLOSE_PAREN fill_main_quad block
Rule 5     g_main_quad -> <empty>
Rule 6     fill_main_quad -> <empty>
Rule 7     funcs -> func_type MODULE ID add_module OPEN_PAREN funcs_params CLOSE_PAREN add_parameter_amount vars count_local_vars block end_funcs funcs
Rule 8     funcs -> empty
Rule 9     end_funcs -> <empty>
Rule 10    count_local_vars -> <empty>
Rule 11    add_module -> <empty>
Rule 12    funcs_comp -> ID add_module OPEN_PAREN funcs_params CLOSE_PAREN add_parameter_amount vars count_local_vars block end_funcs funcs
Rule 13    add_parameter_amount -> <empty>
Rule 14    funcs_params -> var_type variable_params funcs_params_comp
Rule 15    funcs_params -> empty
Rule 16    funcs_params_comp -> COMMA var_type variable_params funcs_params_comp
Rule 17    funcs_params_comp -> empty
Rule 18    variable_params -> ID
Rule 19    variable_params -> ID dim
Rule 20    block -> OPEN_BRACES statements CLOSE_BRACES
Rule 21    func_type -> var_type
Rule 22    func_type -> VOID
Rule 23    var_type -> INT
Rule 24    var_type -> FLOAT
Rule 25    var_type -> CHAR
Rule 26    vars -> VARS var_comp
Rule 27    vars -> empty
Rule 28    var_comp -> var_type ids_dec var_comp_2 var_comp_final
Rule 29    var_comp -> var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive
Rule 30    var_comp_2 -> COMMA ids_dec var_comp_3
Rule 31    var_comp_2 -> empty
Rule 32    var_comp_3 -> var_comp_2
Rule 33    var_comp_recursive -> var_type ids_dec var_comp_2 var_comp_final
Rule 34    var_comp_recursive -> var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive
Rule 35    var_comp_final -> SEMICOLON
Rule 36    var_comp_final -> var_module_trans
Rule 37    var_module_trans -> SEMICOLON var_type MODULE funcs_comp
Rule 38    ids_dec -> ID OPEN_BRACKETS is_array CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
Rule 39    ids_dec -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS
Rule 40    ids_dec -> ID
Rule 41    ids -> ID OPEN_BRACKETS exp CLOSE_BRACKETS OPEN_BRACKETS exp CLOSE_BRACKETS
Rule 42    ids -> ID OPEN_BRACKETS exp CLOSE_BRACKETS
Rule 43    ids -> ID
Rule 44    statements -> assignment SEMICOLON statements
Rule 45    statements -> read SEMICOLON statements
Rule 46    statements -> write SEMICOLON statements
Rule 47    statements -> condition statements
Rule 48    statements -> return SEMICOLON statements
Rule 49    statements -> func_call SEMICOLON statements
Rule 50    statements -> empty
Rule 51    assignment -> ids ASSIGN expressions
Rule 52    read -> READ OPEN_PAREN ids g_quad_read read_comp CLOSE_PAREN
Rule 53    read_comp -> COMMA ids g_quad_read read_comp
Rule 54    read_comp -> empty
Rule 55    g_quad_read -> <empty>
Rule 56    write -> WRITE OPEN_PAREN CT_STRING g_quad_write_str write_comp CLOSE_PAREN
Rule 57    write -> WRITE OPEN_PAREN expressions g_quad_write write_comp CLOSE_PAREN
Rule 58    write_comp -> COMMA CT_STRING g_quad_write_str write_comp
Rule 59    write_comp -> COMMA expressions g_quad_write write_comp
Rule 60    write_comp -> empty
Rule 61    g_quad_write_str -> <empty>
Rule 62    g_quad_write -> <empty>
Rule 63    end_if -> <empty>
Rule 64    condition -> IF OPEN_PAREN expressions CLOSE_PAREN g_if_quad THEN block end_if
Rule 65    condition -> IF OPEN_PAREN expressions CLOSE_PAREN g_if_quad THEN block ELSE g_else_quad block end_if
Rule 66    condition -> WHILE while_jump OPEN_PAREN expressions CLOSE_PAREN g_while_quad DO block end_while
Rule 67    condition -> FOR ids validate_for ASSIGN expressions for_counter_control TO expressions for_counter_end DO block end_for
Rule 68    g_if_quad -> <empty>
Rule 69    g_else_quad -> <empty>
Rule 70    while_jump -> <empty>
Rule 71    g_while_quad -> <empty>
Rule 72    end_while -> <empty>
Rule 73    validate_for -> <empty>
Rule 74    for_counter_control -> <empty>
Rule 75    for_counter_end -> <empty>
Rule 76    end_for -> <empty>
Rule 77    return -> RETURN OPEN_PAREN expressions CLOSE_PAREN return_end
Rule 78    return_end -> <empty>
Rule 79    func_call -> ID verify_function_exists OPEN_PAREN era_activation func_call_comp CLOSE_PAREN g_gosub_quad change_to_global
Rule 80    g_gosub_quad -> <empty>
Rule 81    change_to_global -> <empty>
Rule 82    verify_function_exists -> <empty>
Rule 83    era_activation -> <empty>
Rule 84    func_call_comp -> expressions g_parameter_quad func_call_comp
Rule 85    func_call_comp -> COMMA expressions g_parameter_quad func_call_comp
Rule 86    func_call_comp -> empty
Rule 87    g_parameter_quad -> <empty>
Rule 88    parameter_check_comma -> <empty>
Rule 89    expressions -> expressions_comp
Rule 90    expressions_comp -> expression_comp_2
Rule 91    expressions_comp -> expression_comp_2 OR expressions_comp
Rule 92    expression_comp_2 -> expression_comp_3
Rule 93    expression_comp_2 -> expression_comp_3 AND expression_comp_2
Rule 94    expression_comp_3 -> exp expressions_op exp g_quad_logic
Rule 95    expression_comp_3 -> exp
Rule 96    g_quad_logic -> <empty>
Rule 97    expressions_op -> LESS_THAN add_op
Rule 98    expressions_op -> LESS_THAN_EQUAL add_op
Rule 99    expressions_op -> MORE_THAN add_op
Rule 100   expressions_op -> MORE_THAN_EQUAL add_op
Rule 101   expressions_op -> EQUALS add_op
Rule 102   expressions_op -> NOT_EQUALS add_op
Rule 103   exp -> term g_quad_exp_as_alone
Rule 104   exp -> term g_quad_exp_as exp_comp
Rule 105   g_quad_exp_as -> <empty>
Rule 106   g_quad_exp_as_alone -> <empty>
Rule 107   exp_comp -> PLUS add_op exp
Rule 108   exp_comp -> MINUS add_op exp
Rule 109   term -> factor g_quad_exp_md_alone
Rule 110   term -> factor g_quad_exp_md term_comp
Rule 111   g_quad_exp_md -> <empty>
Rule 112   g_quad_exp_md_alone -> <empty>
Rule 113   term_comp -> MULTIPLIES add_op term
Rule 114   term_comp -> DIVIDE add_op term
Rule 115   add_op -> <empty>
Rule 116   factor -> OPEN_PAREN add_fake expressions CLOSE_PAREN rem_fake
Rule 117   factor -> variable
Rule 118   factor -> func_call
Rule 119   factor -> CT_INT add_ct_int
Rule 120   factor -> CT_FLOAT add_ct_float
Rule 121   factor -> CT_CHAR add_ct_char
Rule 122   add_fake -> <empty>
Rule 123   rem_fake -> <empty>
Rule 124   add_ct_int -> <empty>
Rule 125   add_ct_float -> <empty>
Rule 126   add_ct_char -> <empty>
Rule 127   variable -> ID add_id
Rule 128   variable -> ID dim
Rule 129   add_id -> <empty>
Rule 130   dim -> OPEN_BRACKETS exp CLOSE_BRACKETS
Rule 131   empty -> <empty>

Terminals, with rules where they appear

AND                  : 93
ASSIGN               : 51 67
CHAR                 : 25
CLOSE_BRACES         : 20
CLOSE_BRACKETS       : 38 38 39 41 41 42 130
CLOSE_PAREN          : 4 7 12 52 56 57 64 65 66 77 79 116
COMMA                : 16 30 53 58 59 85
CT_CHAR              : 121
CT_FLOAT             : 120
CT_INT               : 38 38 39 119
CT_STRING            : 56 58
DIVIDE               : 114
DO                   : 66 67
ELSE                 : 65
EQUALS               : 101
FLOAT                : 24
FOR                  : 67
ID                   : 1 7 12 18 19 38 39 40 41 42 43 79 127 128
IF                   : 64 65
INT                  : 23
LESS_THAN            : 97
LESS_THAN_EQUAL      : 98
MAIN                 : 4
MINUS                : 108
MODULE               : 7 37
MORE_THAN            : 99
MORE_THAN_EQUAL      : 100
MULTIPLIES           : 113
NOT_EQUALS           : 102
OPEN_BRACES          : 20
OPEN_BRACKETS        : 38 38 39 41 41 42 130
OPEN_PAREN           : 4 7 12 52 56 57 64 65 66 77 79 116
OR                   : 91
PLUS                 : 107
PROGRAM              : 1
READ                 : 52
RETURN               : 77
SEMICOLON            : 1 29 34 35 37 44 45 46 48 49
THEN                 : 64 65
TO                   : 67
VARS                 : 26
VOID                 : 22
WHILE                : 66
WRITE                : 56 57
error                : 

Nonterminals, with rules where they appear

add_ct_char          : 121
add_ct_float         : 120
add_ct_int           : 119
add_fake             : 116
add_id               : 127
add_module           : 7 12
add_op               : 97 98 99 100 101 102 107 108 113 114
add_parameter_amount : 7 12
add_program          : 1
assignment           : 44
block                : 4 7 12 64 65 65 66 67
change_to_global     : 79
condition            : 47
count_local_vars     : 7 12
dim                  : 19 128
empty                : 8 15 17 27 31 50 54 60 86
end_for              : 67
end_funcs            : 7 12
end_if               : 64 65
end_program          : 1
end_while            : 66
era_activation       : 79
exp                  : 41 41 42 94 94 95 107 108 130
exp_comp             : 104
expression_comp_2    : 90 91 93
expression_comp_3    : 92 93
expressions          : 51 57 59 64 65 66 67 67 77 84 85 116
expressions_comp     : 89 91
expressions_op       : 94
factor               : 109 110
fill_main_quad       : 4
for_counter_control  : 67
for_counter_end      : 67
func_call            : 49 118
func_call_comp       : 79 84 85
func_type            : 7
funcs                : 1 7 12
funcs_comp           : 37
funcs_params         : 7 12
funcs_params_comp    : 14 16
g_else_quad          : 65
g_gosub_quad         : 79
g_if_quad            : 64 65
g_main_quad          : 1
g_parameter_quad     : 84 85
g_quad_exp_as        : 104
g_quad_exp_as_alone  : 103
g_quad_exp_md        : 110
g_quad_exp_md_alone  : 109
g_quad_logic         : 94
g_quad_read          : 52 53
g_quad_write         : 57 59
g_quad_write_str     : 56 58
g_while_quad         : 66
ids                  : 51 52 53 67
ids_dec              : 28 29 30 33 34
is_array             : 38
main                 : 1
parameter_check_comma : 
program              : 0
read                 : 45
read_comp            : 52 53
rem_fake             : 116
return               : 48
return_end           : 77
statements           : 20 44 45 46 47 48 49
term                 : 103 104 113 114
term_comp            : 110
validate_for         : 67
var_comp             : 26
var_comp_2           : 28 29 32 33 34
var_comp_3           : 30
var_comp_final       : 28 33
var_comp_recursive   : 29 34
var_module_trans     : 36
var_type             : 14 16 21 28 29 33 34 37
variable             : 117
variable_params      : 14 16
vars                 : 1 7 12
verify_function_exists : 79
while_jump           : 66
write                : 46
write_comp           : 56 57 58 59

