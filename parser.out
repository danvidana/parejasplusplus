Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BOOLEAN

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON vars funcs main
Rule 2     main -> MAIN OPEN_PAREN CLOSE_PAREN block
Rule 3     funcs -> func_type MODULE ID OPEN_PAREN var_type ID CLOSE_PAREN vars block
Rule 4     funcs -> empty
Rule 5     funcs_comp -> ID OPEN_PAREN var_type ID CLOSE_PAREN vars block
Rule 6     block -> OPEN_BRACES statements CLOSE_BRACES
Rule 7     func_type -> var_type
Rule 8     func_type -> VOID
Rule 9     var_type -> INT
Rule 10    var_type -> FLOAT
Rule 11    var_type -> CHAR
Rule 12    vars -> VARS var_comp
Rule 13    vars -> empty
Rule 14    var_comp -> var_type ids var_comp_2 var_comp_final
Rule 15    var_comp -> var_type ids var_comp_2 SEMICOLON var_comp_recursive
Rule 16    var_comp_2 -> COMMA ids var_comp_3
Rule 17    var_comp_2 -> empty
Rule 18    var_comp_3 -> var_comp_2
Rule 19    var_comp_recursive -> var_type ids var_comp_2 var_comp_final
Rule 20    var_comp_recursive -> var_type ids var_comp_2 SEMICOLON var_comp_recursive
Rule 21    var_comp_final -> SEMICOLON
Rule 22    var_comp_final -> var_module_trans
Rule 23    var_module_trans -> SEMICOLON var_type MODULE funcs_comp
Rule 24    ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
Rule 25    ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS
Rule 26    ids -> ID
Rule 27    statements -> assignment statements
Rule 28    statements -> read statements
Rule 29    statements -> write statements
Rule 30    statements -> condition statements
Rule 31    statements -> return statements
Rule 32    statements -> func_call statements
Rule 33    statements -> empty
Rule 34    assignment -> ids ASSIGN expressions SEMICOLON
Rule 35    read -> READ OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLON
Rule 36    read_comp -> COMMA ids read_comp
Rule 37    read_comp -> empty
Rule 38    write -> WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN
Rule 39    write -> WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN
Rule 40    write_comp -> COMMA CT_STRING write_comp
Rule 41    write_comp -> COMMA expressions write_comp
Rule 42    write_comp -> empty
Rule 43    condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block
Rule 44    condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block
Rule 45    condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN DO block
Rule 46    condition -> FOR ids ASSIGN expressions TO expressions DO block
Rule 47    return -> RETURN OPEN_PAREN exp CLOSE_PAREN SEMICOLON
Rule 48    func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON
Rule 49    func_call_comp -> ID func_call_comp
Rule 50    func_call_comp -> COMMA ID func_call_comp
Rule 51    func_call_comp -> expressions
Rule 52    expressions -> exp expressions_op exp
Rule 53    expressions -> exp
Rule 54    expressions_op -> LESS_THAN
Rule 55    expressions_op -> MORE_THAN
Rule 56    expressions_op -> EQUALS
Rule 57    expressions_op -> NOT_EQUALS
Rule 58    expressions_op -> AND
Rule 59    expressions_op -> OR
Rule 60    exp -> term exp_comp
Rule 61    exp_comp -> PLUS exp
Rule 62    exp_comp -> MINUS exp
Rule 63    exp_comp -> empty
Rule 64    term -> factor term_comp
Rule 65    term_comp -> MULTIPLIES term
Rule 66    term_comp -> DIVIDE term
Rule 67    term_comp -> empty
Rule 68    factor -> OPEN_PAREN expressions CLOSE_PAREN
Rule 69    factor -> factor_comp ID
Rule 70    factor -> factor_comp func_call
Rule 71    factor -> ID
Rule 72    factor -> func_call
Rule 73    factor -> CT_INT
Rule 74    factor -> CT_FLOAT
Rule 75    factor -> CT_CHAR
Rule 76    factor_comp -> PLUS
Rule 77    factor_comp -> MINUS
Rule 78    empty -> <empty>

Terminals, with rules where they appear

AND                  : 58
ASSIGN               : 34 46
BOOLEAN              : 
CHAR                 : 11
CLOSE_BRACES         : 6
CLOSE_BRACKETS       : 24 24 25
CLOSE_PAREN          : 2 3 5 35 38 39 43 44 45 47 48 68
COMMA                : 16 36 40 41 50
CT_CHAR              : 75
CT_FLOAT             : 74
CT_INT               : 24 24 25 73
CT_STRING            : 38 40
DIVIDE               : 66
DO                   : 45 46
ELSE                 : 43
EQUALS               : 56
FLOAT                : 10
FOR                  : 46
ID                   : 1 3 3 5 5 24 25 26 48 49 50 69 71
IF                   : 43 44
INT                  : 9
LESS_THAN            : 54
MAIN                 : 2
MINUS                : 62 77
MODULE               : 3 23
MORE_THAN            : 55
MULTIPLIES           : 65
NOT_EQUALS           : 57
OPEN_BRACES          : 6
OPEN_BRACKETS        : 24 24 25
OPEN_PAREN           : 2 3 5 35 38 39 43 44 45 47 48 68
OR                   : 59
PLUS                 : 61 76
PROGRAM              : 1
READ                 : 35
RETURN               : 47
SEMICOLON            : 1 15 20 21 23 34 35 47 48
THEN                 : 43 44
TO                   : 46
VARS                 : 12
VOID                 : 8
WHILE                : 45
WRITE                : 38 39
error                : 

Nonterminals, with rules where they appear

assignment           : 27
block                : 2 3 5 43 43 44 45 46
condition            : 30
empty                : 4 13 17 33 37 42 63 67
exp                  : 47 52 52 53 61 62
exp_comp             : 60
expressions          : 34 39 41 43 44 45 46 46 51 68
expressions_op       : 52
factor               : 64
factor_comp          : 69 70
func_call            : 32 70 72
func_call_comp       : 48 49 50
func_type            : 3
funcs                : 1
funcs_comp           : 23
ids                  : 14 15 16 19 20 34 35 36 46
main                 : 1
program              : 0
read                 : 28
read_comp            : 35 36
return               : 31
statements           : 6 27 28 29 30 31 32
term                 : 60 65 66
term_comp            : 64
var_comp             : 12
var_comp_2           : 14 15 18 19 20
var_comp_3           : 16
var_comp_final       : 14 19
var_comp_recursive   : 15 20
var_module_trans     : 22
var_type             : 3 5 7 14 15 19 20 23
vars                 : 1 3 5
write                : 29
write_comp           : 38 39 40 41

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON vars funcs main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON vars funcs main

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON vars funcs main

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . vars funcs main
    (12) vars -> . VARS var_comp
    (13) vars -> . empty
    (78) empty -> .

    VARS            shift and go to state 6
    VOID            reduce using rule 78 (empty -> .)
    INT             reduce using rule 78 (empty -> .)
    FLOAT           reduce using rule 78 (empty -> .)
    CHAR            reduce using rule 78 (empty -> .)
    MAIN            reduce using rule 78 (empty -> .)

    vars                           shift and go to state 5
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM ID SEMICOLON vars . funcs main
    (3) funcs -> . func_type MODULE ID OPEN_PAREN var_type ID CLOSE_PAREN vars block
    (4) funcs -> . empty
    (7) func_type -> . var_type
    (8) func_type -> . VOID
    (78) empty -> .
    (9) var_type -> . INT
    (10) var_type -> . FLOAT
    (11) var_type -> . CHAR

    VOID            shift and go to state 12
    MAIN            reduce using rule 78 (empty -> .)
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15

    funcs                          shift and go to state 8
    func_type                      shift and go to state 9
    var_type                       shift and go to state 10
    empty                          shift and go to state 11

state 6

    (12) vars -> VARS . var_comp
    (14) var_comp -> . var_type ids var_comp_2 var_comp_final
    (15) var_comp -> . var_type ids var_comp_2 SEMICOLON var_comp_recursive
    (9) var_type -> . INT
    (10) var_type -> . FLOAT
    (11) var_type -> . CHAR

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15

    var_comp                       shift and go to state 16
    var_type                       shift and go to state 17

state 7

    (13) vars -> empty .

    VOID            reduce using rule 13 (vars -> empty .)
    INT             reduce using rule 13 (vars -> empty .)
    FLOAT           reduce using rule 13 (vars -> empty .)
    CHAR            reduce using rule 13 (vars -> empty .)
    MAIN            reduce using rule 13 (vars -> empty .)
    OPEN_BRACES     reduce using rule 13 (vars -> empty .)


state 8

    (1) program -> PROGRAM ID SEMICOLON vars funcs . main
    (2) main -> . MAIN OPEN_PAREN CLOSE_PAREN block

    MAIN            shift and go to state 19

    main                           shift and go to state 18

state 9

    (3) funcs -> func_type . MODULE ID OPEN_PAREN var_type ID CLOSE_PAREN vars block

    MODULE          shift and go to state 20


state 10

    (7) func_type -> var_type .

    MODULE          reduce using rule 7 (func_type -> var_type .)


state 11

    (4) funcs -> empty .

    MAIN            reduce using rule 4 (funcs -> empty .)


state 12

    (8) func_type -> VOID .

    MODULE          reduce using rule 8 (func_type -> VOID .)


state 13

    (9) var_type -> INT .

    MODULE          reduce using rule 9 (var_type -> INT .)
    ID              reduce using rule 9 (var_type -> INT .)


state 14

    (10) var_type -> FLOAT .

    MODULE          reduce using rule 10 (var_type -> FLOAT .)
    ID              reduce using rule 10 (var_type -> FLOAT .)


state 15

    (11) var_type -> CHAR .

    MODULE          reduce using rule 11 (var_type -> CHAR .)
    ID              reduce using rule 11 (var_type -> CHAR .)


state 16

    (12) vars -> VARS var_comp .

    VOID            reduce using rule 12 (vars -> VARS var_comp .)
    INT             reduce using rule 12 (vars -> VARS var_comp .)
    FLOAT           reduce using rule 12 (vars -> VARS var_comp .)
    CHAR            reduce using rule 12 (vars -> VARS var_comp .)
    MAIN            reduce using rule 12 (vars -> VARS var_comp .)
    OPEN_BRACES     reduce using rule 12 (vars -> VARS var_comp .)


state 17

    (14) var_comp -> var_type . ids var_comp_2 var_comp_final
    (15) var_comp -> var_type . ids var_comp_2 SEMICOLON var_comp_recursive
    (24) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (25) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (26) ids -> . ID

    ID              shift and go to state 22

    ids                            shift and go to state 21

state 18

    (1) program -> PROGRAM ID SEMICOLON vars funcs main .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON vars funcs main .)


state 19

    (2) main -> MAIN . OPEN_PAREN CLOSE_PAREN block

    OPEN_PAREN      shift and go to state 23


state 20

    (3) funcs -> func_type MODULE . ID OPEN_PAREN var_type ID CLOSE_PAREN vars block

    ID              shift and go to state 24


state 21

    (14) var_comp -> var_type ids . var_comp_2 var_comp_final
    (15) var_comp -> var_type ids . var_comp_2 SEMICOLON var_comp_recursive
    (16) var_comp_2 -> . COMMA ids var_comp_3
    (17) var_comp_2 -> . empty
    (78) empty -> .

    COMMA           shift and go to state 26
    SEMICOLON       reduce using rule 78 (empty -> .)

    var_comp_2                     shift and go to state 25
    empty                          shift and go to state 27

state 22

    (24) ids -> ID . OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (25) ids -> ID . OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (26) ids -> ID .

    OPEN_BRACKETS   shift and go to state 28
    COMMA           reduce using rule 26 (ids -> ID .)
    SEMICOLON       reduce using rule 26 (ids -> ID .)
    ASSIGN          reduce using rule 26 (ids -> ID .)
    CLOSE_PAREN     reduce using rule 26 (ids -> ID .)


state 23

    (2) main -> MAIN OPEN_PAREN . CLOSE_PAREN block

    CLOSE_PAREN     shift and go to state 29


state 24

    (3) funcs -> func_type MODULE ID . OPEN_PAREN var_type ID CLOSE_PAREN vars block

    OPEN_PAREN      shift and go to state 30


state 25

    (14) var_comp -> var_type ids var_comp_2 . var_comp_final
    (15) var_comp -> var_type ids var_comp_2 . SEMICOLON var_comp_recursive
    (21) var_comp_final -> . SEMICOLON
    (22) var_comp_final -> . var_module_trans
    (23) var_module_trans -> . SEMICOLON var_type MODULE funcs_comp

    SEMICOLON       shift and go to state 32

    var_comp_final                 shift and go to state 31
    var_module_trans               shift and go to state 33

state 26

    (16) var_comp_2 -> COMMA . ids var_comp_3
    (24) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (25) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (26) ids -> . ID

    ID              shift and go to state 22

    ids                            shift and go to state 34

state 27

    (17) var_comp_2 -> empty .

    SEMICOLON       reduce using rule 17 (var_comp_2 -> empty .)


state 28

    (24) ids -> ID OPEN_BRACKETS . CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (25) ids -> ID OPEN_BRACKETS . CT_INT CLOSE_BRACKETS

    CT_INT          shift and go to state 35


state 29

    (2) main -> MAIN OPEN_PAREN CLOSE_PAREN . block
    (6) block -> . OPEN_BRACES statements CLOSE_BRACES

    OPEN_BRACES     shift and go to state 37

    block                          shift and go to state 36

state 30

    (3) funcs -> func_type MODULE ID OPEN_PAREN . var_type ID CLOSE_PAREN vars block
    (9) var_type -> . INT
    (10) var_type -> . FLOAT
    (11) var_type -> . CHAR

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15

    var_type                       shift and go to state 38

state 31

    (14) var_comp -> var_type ids var_comp_2 var_comp_final .

    VOID            reduce using rule 14 (var_comp -> var_type ids var_comp_2 var_comp_final .)
    INT             reduce using rule 14 (var_comp -> var_type ids var_comp_2 var_comp_final .)
    FLOAT           reduce using rule 14 (var_comp -> var_type ids var_comp_2 var_comp_final .)
    CHAR            reduce using rule 14 (var_comp -> var_type ids var_comp_2 var_comp_final .)
    MAIN            reduce using rule 14 (var_comp -> var_type ids var_comp_2 var_comp_final .)
    OPEN_BRACES     reduce using rule 14 (var_comp -> var_type ids var_comp_2 var_comp_final .)


state 32

    (15) var_comp -> var_type ids var_comp_2 SEMICOLON . var_comp_recursive
    (21) var_comp_final -> SEMICOLON .
    (23) var_module_trans -> SEMICOLON . var_type MODULE funcs_comp
    (19) var_comp_recursive -> . var_type ids var_comp_2 var_comp_final
    (20) var_comp_recursive -> . var_type ids var_comp_2 SEMICOLON var_comp_recursive
    (9) var_type -> . INT
    (10) var_type -> . FLOAT
    (11) var_type -> . CHAR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    VOID            reduce using rule 21 (var_comp_final -> SEMICOLON .)
    MAIN            reduce using rule 21 (var_comp_final -> SEMICOLON .)
    OPEN_BRACES     reduce using rule 21 (var_comp_final -> SEMICOLON .)
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15

  ! INT             [ reduce using rule 21 (var_comp_final -> SEMICOLON .) ]
  ! FLOAT           [ reduce using rule 21 (var_comp_final -> SEMICOLON .) ]
  ! CHAR            [ reduce using rule 21 (var_comp_final -> SEMICOLON .) ]

    var_type                       shift and go to state 39
    var_comp_recursive             shift and go to state 40

state 33

    (22) var_comp_final -> var_module_trans .

    VOID            reduce using rule 22 (var_comp_final -> var_module_trans .)
    INT             reduce using rule 22 (var_comp_final -> var_module_trans .)
    FLOAT           reduce using rule 22 (var_comp_final -> var_module_trans .)
    CHAR            reduce using rule 22 (var_comp_final -> var_module_trans .)
    MAIN            reduce using rule 22 (var_comp_final -> var_module_trans .)
    OPEN_BRACES     reduce using rule 22 (var_comp_final -> var_module_trans .)


state 34

    (16) var_comp_2 -> COMMA ids . var_comp_3
    (18) var_comp_3 -> . var_comp_2
    (16) var_comp_2 -> . COMMA ids var_comp_3
    (17) var_comp_2 -> . empty
    (78) empty -> .

    COMMA           shift and go to state 26
    SEMICOLON       reduce using rule 78 (empty -> .)

    var_comp_3                     shift and go to state 41
    var_comp_2                     shift and go to state 42
    empty                          shift and go to state 27

state 35

    (24) ids -> ID OPEN_BRACKETS CT_INT . CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (25) ids -> ID OPEN_BRACKETS CT_INT . CLOSE_BRACKETS

    CLOSE_BRACKETS  shift and go to state 43


state 36

    (2) main -> MAIN OPEN_PAREN CLOSE_PAREN block .

    $end            reduce using rule 2 (main -> MAIN OPEN_PAREN CLOSE_PAREN block .)


state 37

    (6) block -> OPEN_BRACES . statements CLOSE_BRACES
    (27) statements -> . assignment statements
    (28) statements -> . read statements
    (29) statements -> . write statements
    (30) statements -> . condition statements
    (31) statements -> . return statements
    (32) statements -> . func_call statements
    (33) statements -> . empty
    (34) assignment -> . ids ASSIGN expressions SEMICOLON
    (35) read -> . READ OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLON
    (38) write -> . WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN
    (39) write -> . WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN
    (43) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block
    (44) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block
    (45) condition -> . WHILE OPEN_PAREN expressions CLOSE_PAREN DO block
    (46) condition -> . FOR ids ASSIGN expressions TO expressions DO block
    (47) return -> . RETURN OPEN_PAREN exp CLOSE_PAREN SEMICOLON
    (48) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON
    (78) empty -> .
    (24) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (25) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (26) ids -> . ID

    READ            shift and go to state 53
    WRITE           shift and go to state 54
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    RETURN          shift and go to state 58
    ID              shift and go to state 59
    CLOSE_BRACES    reduce using rule 78 (empty -> .)

    statements                     shift and go to state 44
    assignment                     shift and go to state 45
    read                           shift and go to state 46
    write                          shift and go to state 47
    condition                      shift and go to state 48
    return                         shift and go to state 49
    func_call                      shift and go to state 50
    empty                          shift and go to state 51
    ids                            shift and go to state 52

state 38

    (3) funcs -> func_type MODULE ID OPEN_PAREN var_type . ID CLOSE_PAREN vars block

    ID              shift and go to state 60


state 39

    (23) var_module_trans -> SEMICOLON var_type . MODULE funcs_comp
    (19) var_comp_recursive -> var_type . ids var_comp_2 var_comp_final
    (20) var_comp_recursive -> var_type . ids var_comp_2 SEMICOLON var_comp_recursive
    (24) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (25) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (26) ids -> . ID

    MODULE          shift and go to state 61
    ID              shift and go to state 22

    ids                            shift and go to state 62

state 40

    (15) var_comp -> var_type ids var_comp_2 SEMICOLON var_comp_recursive .

    VOID            reduce using rule 15 (var_comp -> var_type ids var_comp_2 SEMICOLON var_comp_recursive .)
    INT             reduce using rule 15 (var_comp -> var_type ids var_comp_2 SEMICOLON var_comp_recursive .)
    FLOAT           reduce using rule 15 (var_comp -> var_type ids var_comp_2 SEMICOLON var_comp_recursive .)
    CHAR            reduce using rule 15 (var_comp -> var_type ids var_comp_2 SEMICOLON var_comp_recursive .)
    MAIN            reduce using rule 15 (var_comp -> var_type ids var_comp_2 SEMICOLON var_comp_recursive .)
    OPEN_BRACES     reduce using rule 15 (var_comp -> var_type ids var_comp_2 SEMICOLON var_comp_recursive .)


state 41

    (16) var_comp_2 -> COMMA ids var_comp_3 .

    SEMICOLON       reduce using rule 16 (var_comp_2 -> COMMA ids var_comp_3 .)


state 42

    (18) var_comp_3 -> var_comp_2 .

    SEMICOLON       reduce using rule 18 (var_comp_3 -> var_comp_2 .)


state 43

    (24) ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS . OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (25) ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS .

    OPEN_BRACKETS   shift and go to state 63
    COMMA           reduce using rule 25 (ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS .)
    SEMICOLON       reduce using rule 25 (ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS .)
    ASSIGN          reduce using rule 25 (ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS .)
    CLOSE_PAREN     reduce using rule 25 (ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS .)


state 44

    (6) block -> OPEN_BRACES statements . CLOSE_BRACES

    CLOSE_BRACES    shift and go to state 64


state 45

    (27) statements -> assignment . statements
    (27) statements -> . assignment statements
    (28) statements -> . read statements
    (29) statements -> . write statements
    (30) statements -> . condition statements
    (31) statements -> . return statements
    (32) statements -> . func_call statements
    (33) statements -> . empty
    (34) assignment -> . ids ASSIGN expressions SEMICOLON
    (35) read -> . READ OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLON
    (38) write -> . WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN
    (39) write -> . WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN
    (43) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block
    (44) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block
    (45) condition -> . WHILE OPEN_PAREN expressions CLOSE_PAREN DO block
    (46) condition -> . FOR ids ASSIGN expressions TO expressions DO block
    (47) return -> . RETURN OPEN_PAREN exp CLOSE_PAREN SEMICOLON
    (48) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON
    (78) empty -> .
    (24) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (25) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (26) ids -> . ID

    READ            shift and go to state 53
    WRITE           shift and go to state 54
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    RETURN          shift and go to state 58
    ID              shift and go to state 59
    CLOSE_BRACES    reduce using rule 78 (empty -> .)

    assignment                     shift and go to state 45
    statements                     shift and go to state 65
    read                           shift and go to state 46
    write                          shift and go to state 47
    condition                      shift and go to state 48
    return                         shift and go to state 49
    func_call                      shift and go to state 50
    empty                          shift and go to state 51
    ids                            shift and go to state 52

state 46

    (28) statements -> read . statements
    (27) statements -> . assignment statements
    (28) statements -> . read statements
    (29) statements -> . write statements
    (30) statements -> . condition statements
    (31) statements -> . return statements
    (32) statements -> . func_call statements
    (33) statements -> . empty
    (34) assignment -> . ids ASSIGN expressions SEMICOLON
    (35) read -> . READ OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLON
    (38) write -> . WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN
    (39) write -> . WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN
    (43) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block
    (44) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block
    (45) condition -> . WHILE OPEN_PAREN expressions CLOSE_PAREN DO block
    (46) condition -> . FOR ids ASSIGN expressions TO expressions DO block
    (47) return -> . RETURN OPEN_PAREN exp CLOSE_PAREN SEMICOLON
    (48) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON
    (78) empty -> .
    (24) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (25) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (26) ids -> . ID

    READ            shift and go to state 53
    WRITE           shift and go to state 54
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    RETURN          shift and go to state 58
    ID              shift and go to state 59
    CLOSE_BRACES    reduce using rule 78 (empty -> .)

    read                           shift and go to state 46
    statements                     shift and go to state 66
    assignment                     shift and go to state 45
    write                          shift and go to state 47
    condition                      shift and go to state 48
    return                         shift and go to state 49
    func_call                      shift and go to state 50
    empty                          shift and go to state 51
    ids                            shift and go to state 52

state 47

    (29) statements -> write . statements
    (27) statements -> . assignment statements
    (28) statements -> . read statements
    (29) statements -> . write statements
    (30) statements -> . condition statements
    (31) statements -> . return statements
    (32) statements -> . func_call statements
    (33) statements -> . empty
    (34) assignment -> . ids ASSIGN expressions SEMICOLON
    (35) read -> . READ OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLON
    (38) write -> . WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN
    (39) write -> . WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN
    (43) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block
    (44) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block
    (45) condition -> . WHILE OPEN_PAREN expressions CLOSE_PAREN DO block
    (46) condition -> . FOR ids ASSIGN expressions TO expressions DO block
    (47) return -> . RETURN OPEN_PAREN exp CLOSE_PAREN SEMICOLON
    (48) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON
    (78) empty -> .
    (24) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (25) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (26) ids -> . ID

    READ            shift and go to state 53
    WRITE           shift and go to state 54
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    RETURN          shift and go to state 58
    ID              shift and go to state 59
    CLOSE_BRACES    reduce using rule 78 (empty -> .)

    write                          shift and go to state 47
    statements                     shift and go to state 67
    assignment                     shift and go to state 45
    read                           shift and go to state 46
    condition                      shift and go to state 48
    return                         shift and go to state 49
    func_call                      shift and go to state 50
    empty                          shift and go to state 51
    ids                            shift and go to state 52

state 48

    (30) statements -> condition . statements
    (27) statements -> . assignment statements
    (28) statements -> . read statements
    (29) statements -> . write statements
    (30) statements -> . condition statements
    (31) statements -> . return statements
    (32) statements -> . func_call statements
    (33) statements -> . empty
    (34) assignment -> . ids ASSIGN expressions SEMICOLON
    (35) read -> . READ OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLON
    (38) write -> . WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN
    (39) write -> . WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN
    (43) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block
    (44) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block
    (45) condition -> . WHILE OPEN_PAREN expressions CLOSE_PAREN DO block
    (46) condition -> . FOR ids ASSIGN expressions TO expressions DO block
    (47) return -> . RETURN OPEN_PAREN exp CLOSE_PAREN SEMICOLON
    (48) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON
    (78) empty -> .
    (24) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (25) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (26) ids -> . ID

    READ            shift and go to state 53
    WRITE           shift and go to state 54
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    RETURN          shift and go to state 58
    ID              shift and go to state 59
    CLOSE_BRACES    reduce using rule 78 (empty -> .)

    condition                      shift and go to state 48
    statements                     shift and go to state 68
    assignment                     shift and go to state 45
    read                           shift and go to state 46
    write                          shift and go to state 47
    return                         shift and go to state 49
    func_call                      shift and go to state 50
    empty                          shift and go to state 51
    ids                            shift and go to state 52

state 49

    (31) statements -> return . statements
    (27) statements -> . assignment statements
    (28) statements -> . read statements
    (29) statements -> . write statements
    (30) statements -> . condition statements
    (31) statements -> . return statements
    (32) statements -> . func_call statements
    (33) statements -> . empty
    (34) assignment -> . ids ASSIGN expressions SEMICOLON
    (35) read -> . READ OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLON
    (38) write -> . WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN
    (39) write -> . WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN
    (43) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block
    (44) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block
    (45) condition -> . WHILE OPEN_PAREN expressions CLOSE_PAREN DO block
    (46) condition -> . FOR ids ASSIGN expressions TO expressions DO block
    (47) return -> . RETURN OPEN_PAREN exp CLOSE_PAREN SEMICOLON
    (48) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON
    (78) empty -> .
    (24) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (25) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (26) ids -> . ID

    READ            shift and go to state 53
    WRITE           shift and go to state 54
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    RETURN          shift and go to state 58
    ID              shift and go to state 59
    CLOSE_BRACES    reduce using rule 78 (empty -> .)

    return                         shift and go to state 49
    statements                     shift and go to state 69
    assignment                     shift and go to state 45
    read                           shift and go to state 46
    write                          shift and go to state 47
    condition                      shift and go to state 48
    func_call                      shift and go to state 50
    empty                          shift and go to state 51
    ids                            shift and go to state 52

state 50

    (32) statements -> func_call . statements
    (27) statements -> . assignment statements
    (28) statements -> . read statements
    (29) statements -> . write statements
    (30) statements -> . condition statements
    (31) statements -> . return statements
    (32) statements -> . func_call statements
    (33) statements -> . empty
    (34) assignment -> . ids ASSIGN expressions SEMICOLON
    (35) read -> . READ OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLON
    (38) write -> . WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN
    (39) write -> . WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN
    (43) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block
    (44) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block
    (45) condition -> . WHILE OPEN_PAREN expressions CLOSE_PAREN DO block
    (46) condition -> . FOR ids ASSIGN expressions TO expressions DO block
    (47) return -> . RETURN OPEN_PAREN exp CLOSE_PAREN SEMICOLON
    (48) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON
    (78) empty -> .
    (24) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (25) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (26) ids -> . ID

    READ            shift and go to state 53
    WRITE           shift and go to state 54
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    RETURN          shift and go to state 58
    ID              shift and go to state 59
    CLOSE_BRACES    reduce using rule 78 (empty -> .)

    func_call                      shift and go to state 50
    statements                     shift and go to state 70
    assignment                     shift and go to state 45
    read                           shift and go to state 46
    write                          shift and go to state 47
    condition                      shift and go to state 48
    return                         shift and go to state 49
    empty                          shift and go to state 51
    ids                            shift and go to state 52

state 51

    (33) statements -> empty .

    CLOSE_BRACES    reduce using rule 33 (statements -> empty .)


state 52

    (34) assignment -> ids . ASSIGN expressions SEMICOLON

    ASSIGN          shift and go to state 71


state 53

    (35) read -> READ . OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLON

    OPEN_PAREN      shift and go to state 72


state 54

    (38) write -> WRITE . OPEN_PAREN CT_STRING write_comp CLOSE_PAREN
    (39) write -> WRITE . OPEN_PAREN expressions write_comp CLOSE_PAREN

    OPEN_PAREN      shift and go to state 73


state 55

    (43) condition -> IF . OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block
    (44) condition -> IF . OPEN_PAREN expressions CLOSE_PAREN THEN block

    OPEN_PAREN      shift and go to state 74


state 56

    (45) condition -> WHILE . OPEN_PAREN expressions CLOSE_PAREN DO block

    OPEN_PAREN      shift and go to state 75


state 57

    (46) condition -> FOR . ids ASSIGN expressions TO expressions DO block
    (24) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (25) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (26) ids -> . ID

    ID              shift and go to state 22

    ids                            shift and go to state 76

state 58

    (47) return -> RETURN . OPEN_PAREN exp CLOSE_PAREN SEMICOLON

    OPEN_PAREN      shift and go to state 77


state 59

    (48) func_call -> ID . OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON
    (24) ids -> ID . OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (25) ids -> ID . OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (26) ids -> ID .

    OPEN_PAREN      shift and go to state 78
    OPEN_BRACKETS   shift and go to state 28
    ASSIGN          reduce using rule 26 (ids -> ID .)


state 60

    (3) funcs -> func_type MODULE ID OPEN_PAREN var_type ID . CLOSE_PAREN vars block

    CLOSE_PAREN     shift and go to state 79


state 61

    (23) var_module_trans -> SEMICOLON var_type MODULE . funcs_comp
    (5) funcs_comp -> . ID OPEN_PAREN var_type ID CLOSE_PAREN vars block

    ID              shift and go to state 81

    funcs_comp                     shift and go to state 80

state 62

    (19) var_comp_recursive -> var_type ids . var_comp_2 var_comp_final
    (20) var_comp_recursive -> var_type ids . var_comp_2 SEMICOLON var_comp_recursive
    (16) var_comp_2 -> . COMMA ids var_comp_3
    (17) var_comp_2 -> . empty
    (78) empty -> .

    COMMA           shift and go to state 26
    SEMICOLON       reduce using rule 78 (empty -> .)

    var_comp_2                     shift and go to state 82
    empty                          shift and go to state 27

state 63

    (24) ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS . CT_INT CLOSE_BRACKETS

    CT_INT          shift and go to state 83


state 64

    (6) block -> OPEN_BRACES statements CLOSE_BRACES .

    $end            reduce using rule 6 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    MAIN            reduce using rule 6 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    ELSE            reduce using rule 6 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    READ            reduce using rule 6 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    WRITE           reduce using rule 6 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    IF              reduce using rule 6 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    WHILE           reduce using rule 6 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    FOR             reduce using rule 6 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    RETURN          reduce using rule 6 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    ID              reduce using rule 6 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    CLOSE_BRACES    reduce using rule 6 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    VOID            reduce using rule 6 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    INT             reduce using rule 6 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    FLOAT           reduce using rule 6 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    CHAR            reduce using rule 6 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    OPEN_BRACES     reduce using rule 6 (block -> OPEN_BRACES statements CLOSE_BRACES .)


state 65

    (27) statements -> assignment statements .

    CLOSE_BRACES    reduce using rule 27 (statements -> assignment statements .)


state 66

    (28) statements -> read statements .

    CLOSE_BRACES    reduce using rule 28 (statements -> read statements .)


state 67

    (29) statements -> write statements .

    CLOSE_BRACES    reduce using rule 29 (statements -> write statements .)


state 68

    (30) statements -> condition statements .

    CLOSE_BRACES    reduce using rule 30 (statements -> condition statements .)


state 69

    (31) statements -> return statements .

    CLOSE_BRACES    reduce using rule 31 (statements -> return statements .)


state 70

    (32) statements -> func_call statements .

    CLOSE_BRACES    reduce using rule 32 (statements -> func_call statements .)


state 71

    (34) assignment -> ids ASSIGN . expressions SEMICOLON
    (52) expressions -> . exp expressions_op exp
    (53) expressions -> . exp
    (60) exp -> . term exp_comp
    (64) term -> . factor term_comp
    (68) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (69) factor -> . factor_comp ID
    (70) factor -> . factor_comp func_call
    (71) factor -> . ID
    (72) factor -> . func_call
    (73) factor -> . CT_INT
    (74) factor -> . CT_FLOAT
    (75) factor -> . CT_CHAR
    (76) factor_comp -> . PLUS
    (77) factor_comp -> . MINUS
    (48) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    OPEN_PAREN      shift and go to state 88
    ID              shift and go to state 90
    CT_INT          shift and go to state 92
    CT_FLOAT        shift and go to state 93
    CT_CHAR         shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96

    expressions                    shift and go to state 84
    exp                            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    factor_comp                    shift and go to state 89
    func_call                      shift and go to state 91

state 72

    (35) read -> READ OPEN_PAREN . ids read_comp CLOSE_PAREN SEMICOLON
    (24) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (25) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (26) ids -> . ID

    ID              shift and go to state 22

    ids                            shift and go to state 97

state 73

    (38) write -> WRITE OPEN_PAREN . CT_STRING write_comp CLOSE_PAREN
    (39) write -> WRITE OPEN_PAREN . expressions write_comp CLOSE_PAREN
    (52) expressions -> . exp expressions_op exp
    (53) expressions -> . exp
    (60) exp -> . term exp_comp
    (64) term -> . factor term_comp
    (68) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (69) factor -> . factor_comp ID
    (70) factor -> . factor_comp func_call
    (71) factor -> . ID
    (72) factor -> . func_call
    (73) factor -> . CT_INT
    (74) factor -> . CT_FLOAT
    (75) factor -> . CT_CHAR
    (76) factor_comp -> . PLUS
    (77) factor_comp -> . MINUS
    (48) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    CT_STRING       shift and go to state 98
    OPEN_PAREN      shift and go to state 88
    ID              shift and go to state 90
    CT_INT          shift and go to state 92
    CT_FLOAT        shift and go to state 93
    CT_CHAR         shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96

    expressions                    shift and go to state 99
    exp                            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    factor_comp                    shift and go to state 89
    func_call                      shift and go to state 91

state 74

    (43) condition -> IF OPEN_PAREN . expressions CLOSE_PAREN THEN block ELSE block
    (44) condition -> IF OPEN_PAREN . expressions CLOSE_PAREN THEN block
    (52) expressions -> . exp expressions_op exp
    (53) expressions -> . exp
    (60) exp -> . term exp_comp
    (64) term -> . factor term_comp
    (68) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (69) factor -> . factor_comp ID
    (70) factor -> . factor_comp func_call
    (71) factor -> . ID
    (72) factor -> . func_call
    (73) factor -> . CT_INT
    (74) factor -> . CT_FLOAT
    (75) factor -> . CT_CHAR
    (76) factor_comp -> . PLUS
    (77) factor_comp -> . MINUS
    (48) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    OPEN_PAREN      shift and go to state 88
    ID              shift and go to state 90
    CT_INT          shift and go to state 92
    CT_FLOAT        shift and go to state 93
    CT_CHAR         shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96

    expressions                    shift and go to state 100
    exp                            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    factor_comp                    shift and go to state 89
    func_call                      shift and go to state 91

state 75

    (45) condition -> WHILE OPEN_PAREN . expressions CLOSE_PAREN DO block
    (52) expressions -> . exp expressions_op exp
    (53) expressions -> . exp
    (60) exp -> . term exp_comp
    (64) term -> . factor term_comp
    (68) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (69) factor -> . factor_comp ID
    (70) factor -> . factor_comp func_call
    (71) factor -> . ID
    (72) factor -> . func_call
    (73) factor -> . CT_INT
    (74) factor -> . CT_FLOAT
    (75) factor -> . CT_CHAR
    (76) factor_comp -> . PLUS
    (77) factor_comp -> . MINUS
    (48) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    OPEN_PAREN      shift and go to state 88
    ID              shift and go to state 90
    CT_INT          shift and go to state 92
    CT_FLOAT        shift and go to state 93
    CT_CHAR         shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96

    expressions                    shift and go to state 101
    exp                            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    factor_comp                    shift and go to state 89
    func_call                      shift and go to state 91

state 76

    (46) condition -> FOR ids . ASSIGN expressions TO expressions DO block

    ASSIGN          shift and go to state 102


state 77

    (47) return -> RETURN OPEN_PAREN . exp CLOSE_PAREN SEMICOLON
    (60) exp -> . term exp_comp
    (64) term -> . factor term_comp
    (68) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (69) factor -> . factor_comp ID
    (70) factor -> . factor_comp func_call
    (71) factor -> . ID
    (72) factor -> . func_call
    (73) factor -> . CT_INT
    (74) factor -> . CT_FLOAT
    (75) factor -> . CT_CHAR
    (76) factor_comp -> . PLUS
    (77) factor_comp -> . MINUS
    (48) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    OPEN_PAREN      shift and go to state 88
    ID              shift and go to state 90
    CT_INT          shift and go to state 92
    CT_FLOAT        shift and go to state 93
    CT_CHAR         shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96

    exp                            shift and go to state 103
    term                           shift and go to state 86
    factor                         shift and go to state 87
    factor_comp                    shift and go to state 89
    func_call                      shift and go to state 91

state 78

    (48) func_call -> ID OPEN_PAREN . func_call_comp CLOSE_PAREN SEMICOLON
    (49) func_call_comp -> . ID func_call_comp
    (50) func_call_comp -> . COMMA ID func_call_comp
    (51) func_call_comp -> . expressions
    (52) expressions -> . exp expressions_op exp
    (53) expressions -> . exp
    (60) exp -> . term exp_comp
    (64) term -> . factor term_comp
    (68) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (69) factor -> . factor_comp ID
    (70) factor -> . factor_comp func_call
    (71) factor -> . ID
    (72) factor -> . func_call
    (73) factor -> . CT_INT
    (74) factor -> . CT_FLOAT
    (75) factor -> . CT_CHAR
    (76) factor_comp -> . PLUS
    (77) factor_comp -> . MINUS
    (48) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    ID              shift and go to state 104
    COMMA           shift and go to state 106
    OPEN_PAREN      shift and go to state 88
    CT_INT          shift and go to state 92
    CT_FLOAT        shift and go to state 93
    CT_CHAR         shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96

    func_call_comp                 shift and go to state 105
    expressions                    shift and go to state 107
    exp                            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    factor_comp                    shift and go to state 89
    func_call                      shift and go to state 91

state 79

    (3) funcs -> func_type MODULE ID OPEN_PAREN var_type ID CLOSE_PAREN . vars block
    (12) vars -> . VARS var_comp
    (13) vars -> . empty
    (78) empty -> .

    VARS            shift and go to state 6
    OPEN_BRACES     reduce using rule 78 (empty -> .)

    vars                           shift and go to state 108
    empty                          shift and go to state 7

state 80

    (23) var_module_trans -> SEMICOLON var_type MODULE funcs_comp .

    VOID            reduce using rule 23 (var_module_trans -> SEMICOLON var_type MODULE funcs_comp .)
    INT             reduce using rule 23 (var_module_trans -> SEMICOLON var_type MODULE funcs_comp .)
    FLOAT           reduce using rule 23 (var_module_trans -> SEMICOLON var_type MODULE funcs_comp .)
    CHAR            reduce using rule 23 (var_module_trans -> SEMICOLON var_type MODULE funcs_comp .)
    MAIN            reduce using rule 23 (var_module_trans -> SEMICOLON var_type MODULE funcs_comp .)
    OPEN_BRACES     reduce using rule 23 (var_module_trans -> SEMICOLON var_type MODULE funcs_comp .)


state 81

    (5) funcs_comp -> ID . OPEN_PAREN var_type ID CLOSE_PAREN vars block

    OPEN_PAREN      shift and go to state 109


state 82

    (19) var_comp_recursive -> var_type ids var_comp_2 . var_comp_final
    (20) var_comp_recursive -> var_type ids var_comp_2 . SEMICOLON var_comp_recursive
    (21) var_comp_final -> . SEMICOLON
    (22) var_comp_final -> . var_module_trans
    (23) var_module_trans -> . SEMICOLON var_type MODULE funcs_comp

    SEMICOLON       shift and go to state 111

    var_comp_final                 shift and go to state 110
    var_module_trans               shift and go to state 33

state 83

    (24) ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT . CLOSE_BRACKETS

    CLOSE_BRACKETS  shift and go to state 112


state 84

    (34) assignment -> ids ASSIGN expressions . SEMICOLON

    SEMICOLON       shift and go to state 113


state 85

    (52) expressions -> exp . expressions_op exp
    (53) expressions -> exp .
    (54) expressions_op -> . LESS_THAN
    (55) expressions_op -> . MORE_THAN
    (56) expressions_op -> . EQUALS
    (57) expressions_op -> . NOT_EQUALS
    (58) expressions_op -> . AND
    (59) expressions_op -> . OR

    SEMICOLON       reduce using rule 53 (expressions -> exp .)
    COMMA           reduce using rule 53 (expressions -> exp .)
    CLOSE_PAREN     reduce using rule 53 (expressions -> exp .)
    TO              reduce using rule 53 (expressions -> exp .)
    DO              reduce using rule 53 (expressions -> exp .)
    LESS_THAN       shift and go to state 115
    MORE_THAN       shift and go to state 116
    EQUALS          shift and go to state 117
    NOT_EQUALS      shift and go to state 118
    AND             shift and go to state 119
    OR              shift and go to state 120

    expressions_op                 shift and go to state 114

state 86

    (60) exp -> term . exp_comp
    (61) exp_comp -> . PLUS exp
    (62) exp_comp -> . MINUS exp
    (63) exp_comp -> . empty
    (78) empty -> .

    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    LESS_THAN       reduce using rule 78 (empty -> .)
    MORE_THAN       reduce using rule 78 (empty -> .)
    EQUALS          reduce using rule 78 (empty -> .)
    NOT_EQUALS      reduce using rule 78 (empty -> .)
    AND             reduce using rule 78 (empty -> .)
    OR              reduce using rule 78 (empty -> .)
    SEMICOLON       reduce using rule 78 (empty -> .)
    COMMA           reduce using rule 78 (empty -> .)
    CLOSE_PAREN     reduce using rule 78 (empty -> .)
    TO              reduce using rule 78 (empty -> .)
    DO              reduce using rule 78 (empty -> .)

    exp_comp                       shift and go to state 121
    empty                          shift and go to state 124

state 87

    (64) term -> factor . term_comp
    (65) term_comp -> . MULTIPLIES term
    (66) term_comp -> . DIVIDE term
    (67) term_comp -> . empty
    (78) empty -> .

    MULTIPLIES      shift and go to state 126
    DIVIDE          shift and go to state 127
    PLUS            reduce using rule 78 (empty -> .)
    MINUS           reduce using rule 78 (empty -> .)
    LESS_THAN       reduce using rule 78 (empty -> .)
    MORE_THAN       reduce using rule 78 (empty -> .)
    EQUALS          reduce using rule 78 (empty -> .)
    NOT_EQUALS      reduce using rule 78 (empty -> .)
    AND             reduce using rule 78 (empty -> .)
    OR              reduce using rule 78 (empty -> .)
    SEMICOLON       reduce using rule 78 (empty -> .)
    COMMA           reduce using rule 78 (empty -> .)
    CLOSE_PAREN     reduce using rule 78 (empty -> .)
    TO              reduce using rule 78 (empty -> .)
    DO              reduce using rule 78 (empty -> .)

    term_comp                      shift and go to state 125
    empty                          shift and go to state 128

state 88

    (68) factor -> OPEN_PAREN . expressions CLOSE_PAREN
    (52) expressions -> . exp expressions_op exp
    (53) expressions -> . exp
    (60) exp -> . term exp_comp
    (64) term -> . factor term_comp
    (68) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (69) factor -> . factor_comp ID
    (70) factor -> . factor_comp func_call
    (71) factor -> . ID
    (72) factor -> . func_call
    (73) factor -> . CT_INT
    (74) factor -> . CT_FLOAT
    (75) factor -> . CT_CHAR
    (76) factor_comp -> . PLUS
    (77) factor_comp -> . MINUS
    (48) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    OPEN_PAREN      shift and go to state 88
    ID              shift and go to state 90
    CT_INT          shift and go to state 92
    CT_FLOAT        shift and go to state 93
    CT_CHAR         shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96

    expressions                    shift and go to state 129
    exp                            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    factor_comp                    shift and go to state 89
    func_call                      shift and go to state 91

state 89

    (69) factor -> factor_comp . ID
    (70) factor -> factor_comp . func_call
    (48) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    ID              shift and go to state 130

    func_call                      shift and go to state 131

state 90

    (71) factor -> ID .
    (48) func_call -> ID . OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    MULTIPLIES      reduce using rule 71 (factor -> ID .)
    DIVIDE          reduce using rule 71 (factor -> ID .)
    PLUS            reduce using rule 71 (factor -> ID .)
    MINUS           reduce using rule 71 (factor -> ID .)
    LESS_THAN       reduce using rule 71 (factor -> ID .)
    MORE_THAN       reduce using rule 71 (factor -> ID .)
    EQUALS          reduce using rule 71 (factor -> ID .)
    NOT_EQUALS      reduce using rule 71 (factor -> ID .)
    AND             reduce using rule 71 (factor -> ID .)
    OR              reduce using rule 71 (factor -> ID .)
    SEMICOLON       reduce using rule 71 (factor -> ID .)
    COMMA           reduce using rule 71 (factor -> ID .)
    CLOSE_PAREN     reduce using rule 71 (factor -> ID .)
    TO              reduce using rule 71 (factor -> ID .)
    DO              reduce using rule 71 (factor -> ID .)
    OPEN_PAREN      shift and go to state 78


state 91

    (72) factor -> func_call .

    MULTIPLIES      reduce using rule 72 (factor -> func_call .)
    DIVIDE          reduce using rule 72 (factor -> func_call .)
    PLUS            reduce using rule 72 (factor -> func_call .)
    MINUS           reduce using rule 72 (factor -> func_call .)
    LESS_THAN       reduce using rule 72 (factor -> func_call .)
    MORE_THAN       reduce using rule 72 (factor -> func_call .)
    EQUALS          reduce using rule 72 (factor -> func_call .)
    NOT_EQUALS      reduce using rule 72 (factor -> func_call .)
    AND             reduce using rule 72 (factor -> func_call .)
    OR              reduce using rule 72 (factor -> func_call .)
    SEMICOLON       reduce using rule 72 (factor -> func_call .)
    COMMA           reduce using rule 72 (factor -> func_call .)
    CLOSE_PAREN     reduce using rule 72 (factor -> func_call .)
    TO              reduce using rule 72 (factor -> func_call .)
    DO              reduce using rule 72 (factor -> func_call .)


state 92

    (73) factor -> CT_INT .

    MULTIPLIES      reduce using rule 73 (factor -> CT_INT .)
    DIVIDE          reduce using rule 73 (factor -> CT_INT .)
    PLUS            reduce using rule 73 (factor -> CT_INT .)
    MINUS           reduce using rule 73 (factor -> CT_INT .)
    LESS_THAN       reduce using rule 73 (factor -> CT_INT .)
    MORE_THAN       reduce using rule 73 (factor -> CT_INT .)
    EQUALS          reduce using rule 73 (factor -> CT_INT .)
    NOT_EQUALS      reduce using rule 73 (factor -> CT_INT .)
    AND             reduce using rule 73 (factor -> CT_INT .)
    OR              reduce using rule 73 (factor -> CT_INT .)
    SEMICOLON       reduce using rule 73 (factor -> CT_INT .)
    COMMA           reduce using rule 73 (factor -> CT_INT .)
    CLOSE_PAREN     reduce using rule 73 (factor -> CT_INT .)
    TO              reduce using rule 73 (factor -> CT_INT .)
    DO              reduce using rule 73 (factor -> CT_INT .)


state 93

    (74) factor -> CT_FLOAT .

    MULTIPLIES      reduce using rule 74 (factor -> CT_FLOAT .)
    DIVIDE          reduce using rule 74 (factor -> CT_FLOAT .)
    PLUS            reduce using rule 74 (factor -> CT_FLOAT .)
    MINUS           reduce using rule 74 (factor -> CT_FLOAT .)
    LESS_THAN       reduce using rule 74 (factor -> CT_FLOAT .)
    MORE_THAN       reduce using rule 74 (factor -> CT_FLOAT .)
    EQUALS          reduce using rule 74 (factor -> CT_FLOAT .)
    NOT_EQUALS      reduce using rule 74 (factor -> CT_FLOAT .)
    AND             reduce using rule 74 (factor -> CT_FLOAT .)
    OR              reduce using rule 74 (factor -> CT_FLOAT .)
    SEMICOLON       reduce using rule 74 (factor -> CT_FLOAT .)
    COMMA           reduce using rule 74 (factor -> CT_FLOAT .)
    CLOSE_PAREN     reduce using rule 74 (factor -> CT_FLOAT .)
    TO              reduce using rule 74 (factor -> CT_FLOAT .)
    DO              reduce using rule 74 (factor -> CT_FLOAT .)


state 94

    (75) factor -> CT_CHAR .

    MULTIPLIES      reduce using rule 75 (factor -> CT_CHAR .)
    DIVIDE          reduce using rule 75 (factor -> CT_CHAR .)
    PLUS            reduce using rule 75 (factor -> CT_CHAR .)
    MINUS           reduce using rule 75 (factor -> CT_CHAR .)
    LESS_THAN       reduce using rule 75 (factor -> CT_CHAR .)
    MORE_THAN       reduce using rule 75 (factor -> CT_CHAR .)
    EQUALS          reduce using rule 75 (factor -> CT_CHAR .)
    NOT_EQUALS      reduce using rule 75 (factor -> CT_CHAR .)
    AND             reduce using rule 75 (factor -> CT_CHAR .)
    OR              reduce using rule 75 (factor -> CT_CHAR .)
    SEMICOLON       reduce using rule 75 (factor -> CT_CHAR .)
    COMMA           reduce using rule 75 (factor -> CT_CHAR .)
    CLOSE_PAREN     reduce using rule 75 (factor -> CT_CHAR .)
    TO              reduce using rule 75 (factor -> CT_CHAR .)
    DO              reduce using rule 75 (factor -> CT_CHAR .)


state 95

    (76) factor_comp -> PLUS .

    ID              reduce using rule 76 (factor_comp -> PLUS .)


state 96

    (77) factor_comp -> MINUS .

    ID              reduce using rule 77 (factor_comp -> MINUS .)


state 97

    (35) read -> READ OPEN_PAREN ids . read_comp CLOSE_PAREN SEMICOLON
    (36) read_comp -> . COMMA ids read_comp
    (37) read_comp -> . empty
    (78) empty -> .

    COMMA           shift and go to state 133
    CLOSE_PAREN     reduce using rule 78 (empty -> .)

    read_comp                      shift and go to state 132
    empty                          shift and go to state 134

state 98

    (38) write -> WRITE OPEN_PAREN CT_STRING . write_comp CLOSE_PAREN
    (40) write_comp -> . COMMA CT_STRING write_comp
    (41) write_comp -> . COMMA expressions write_comp
    (42) write_comp -> . empty
    (78) empty -> .

    COMMA           shift and go to state 136
    CLOSE_PAREN     reduce using rule 78 (empty -> .)

    write_comp                     shift and go to state 135
    empty                          shift and go to state 137

state 99

    (39) write -> WRITE OPEN_PAREN expressions . write_comp CLOSE_PAREN
    (40) write_comp -> . COMMA CT_STRING write_comp
    (41) write_comp -> . COMMA expressions write_comp
    (42) write_comp -> . empty
    (78) empty -> .

    COMMA           shift and go to state 136
    CLOSE_PAREN     reduce using rule 78 (empty -> .)

    write_comp                     shift and go to state 138
    empty                          shift and go to state 137

state 100

    (43) condition -> IF OPEN_PAREN expressions . CLOSE_PAREN THEN block ELSE block
    (44) condition -> IF OPEN_PAREN expressions . CLOSE_PAREN THEN block

    CLOSE_PAREN     shift and go to state 139


state 101

    (45) condition -> WHILE OPEN_PAREN expressions . CLOSE_PAREN DO block

    CLOSE_PAREN     shift and go to state 140


state 102

    (46) condition -> FOR ids ASSIGN . expressions TO expressions DO block
    (52) expressions -> . exp expressions_op exp
    (53) expressions -> . exp
    (60) exp -> . term exp_comp
    (64) term -> . factor term_comp
    (68) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (69) factor -> . factor_comp ID
    (70) factor -> . factor_comp func_call
    (71) factor -> . ID
    (72) factor -> . func_call
    (73) factor -> . CT_INT
    (74) factor -> . CT_FLOAT
    (75) factor -> . CT_CHAR
    (76) factor_comp -> . PLUS
    (77) factor_comp -> . MINUS
    (48) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    OPEN_PAREN      shift and go to state 88
    ID              shift and go to state 90
    CT_INT          shift and go to state 92
    CT_FLOAT        shift and go to state 93
    CT_CHAR         shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96

    expressions                    shift and go to state 141
    exp                            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    factor_comp                    shift and go to state 89
    func_call                      shift and go to state 91

state 103

    (47) return -> RETURN OPEN_PAREN exp . CLOSE_PAREN SEMICOLON

    CLOSE_PAREN     shift and go to state 142


state 104

    (49) func_call_comp -> ID . func_call_comp
    (71) factor -> ID .
    (48) func_call -> ID . OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON
    (49) func_call_comp -> . ID func_call_comp
    (50) func_call_comp -> . COMMA ID func_call_comp
    (51) func_call_comp -> . expressions
    (52) expressions -> . exp expressions_op exp
    (53) expressions -> . exp
    (60) exp -> . term exp_comp
    (64) term -> . factor term_comp
    (68) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (69) factor -> . factor_comp ID
    (70) factor -> . factor_comp func_call
    (71) factor -> . ID
    (72) factor -> . func_call
    (73) factor -> . CT_INT
    (74) factor -> . CT_FLOAT
    (75) factor -> . CT_CHAR
    (76) factor_comp -> . PLUS
    (77) factor_comp -> . MINUS
    (48) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    MULTIPLIES      reduce using rule 71 (factor -> ID .)
    DIVIDE          reduce using rule 71 (factor -> ID .)
    LESS_THAN       reduce using rule 71 (factor -> ID .)
    MORE_THAN       reduce using rule 71 (factor -> ID .)
    EQUALS          reduce using rule 71 (factor -> ID .)
    NOT_EQUALS      reduce using rule 71 (factor -> ID .)
    AND             reduce using rule 71 (factor -> ID .)
    OR              reduce using rule 71 (factor -> ID .)
    CLOSE_PAREN     reduce using rule 71 (factor -> ID .)
    OPEN_PAREN      shift and go to state 144
    ID              shift and go to state 104
    COMMA           shift and go to state 106
    CT_INT          shift and go to state 92
    CT_FLOAT        shift and go to state 93
    CT_CHAR         shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96

  ! PLUS            [ reduce using rule 71 (factor -> ID .) ]
  ! MINUS           [ reduce using rule 71 (factor -> ID .) ]

    func_call_comp                 shift and go to state 143
    expressions                    shift and go to state 107
    exp                            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    factor_comp                    shift and go to state 89
    func_call                      shift and go to state 91

state 105

    (48) func_call -> ID OPEN_PAREN func_call_comp . CLOSE_PAREN SEMICOLON

    CLOSE_PAREN     shift and go to state 145


state 106

    (50) func_call_comp -> COMMA . ID func_call_comp

    ID              shift and go to state 146


state 107

    (51) func_call_comp -> expressions .

    CLOSE_PAREN     reduce using rule 51 (func_call_comp -> expressions .)


state 108

    (3) funcs -> func_type MODULE ID OPEN_PAREN var_type ID CLOSE_PAREN vars . block
    (6) block -> . OPEN_BRACES statements CLOSE_BRACES

    OPEN_BRACES     shift and go to state 37

    block                          shift and go to state 147

state 109

    (5) funcs_comp -> ID OPEN_PAREN . var_type ID CLOSE_PAREN vars block
    (9) var_type -> . INT
    (10) var_type -> . FLOAT
    (11) var_type -> . CHAR

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15

    var_type                       shift and go to state 148

state 110

    (19) var_comp_recursive -> var_type ids var_comp_2 var_comp_final .

    VOID            reduce using rule 19 (var_comp_recursive -> var_type ids var_comp_2 var_comp_final .)
    INT             reduce using rule 19 (var_comp_recursive -> var_type ids var_comp_2 var_comp_final .)
    FLOAT           reduce using rule 19 (var_comp_recursive -> var_type ids var_comp_2 var_comp_final .)
    CHAR            reduce using rule 19 (var_comp_recursive -> var_type ids var_comp_2 var_comp_final .)
    MAIN            reduce using rule 19 (var_comp_recursive -> var_type ids var_comp_2 var_comp_final .)
    OPEN_BRACES     reduce using rule 19 (var_comp_recursive -> var_type ids var_comp_2 var_comp_final .)


state 111

    (20) var_comp_recursive -> var_type ids var_comp_2 SEMICOLON . var_comp_recursive
    (21) var_comp_final -> SEMICOLON .
    (23) var_module_trans -> SEMICOLON . var_type MODULE funcs_comp
    (19) var_comp_recursive -> . var_type ids var_comp_2 var_comp_final
    (20) var_comp_recursive -> . var_type ids var_comp_2 SEMICOLON var_comp_recursive
    (9) var_type -> . INT
    (10) var_type -> . FLOAT
    (11) var_type -> . CHAR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    VOID            reduce using rule 21 (var_comp_final -> SEMICOLON .)
    MAIN            reduce using rule 21 (var_comp_final -> SEMICOLON .)
    OPEN_BRACES     reduce using rule 21 (var_comp_final -> SEMICOLON .)
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15

  ! INT             [ reduce using rule 21 (var_comp_final -> SEMICOLON .) ]
  ! FLOAT           [ reduce using rule 21 (var_comp_final -> SEMICOLON .) ]
  ! CHAR            [ reduce using rule 21 (var_comp_final -> SEMICOLON .) ]

    var_type                       shift and go to state 39
    var_comp_recursive             shift and go to state 149

state 112

    (24) ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS .

    COMMA           reduce using rule 24 (ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS .)
    SEMICOLON       reduce using rule 24 (ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS .)
    ASSIGN          reduce using rule 24 (ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS .)
    CLOSE_PAREN     reduce using rule 24 (ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS .)


state 113

    (34) assignment -> ids ASSIGN expressions SEMICOLON .

    READ            reduce using rule 34 (assignment -> ids ASSIGN expressions SEMICOLON .)
    WRITE           reduce using rule 34 (assignment -> ids ASSIGN expressions SEMICOLON .)
    IF              reduce using rule 34 (assignment -> ids ASSIGN expressions SEMICOLON .)
    WHILE           reduce using rule 34 (assignment -> ids ASSIGN expressions SEMICOLON .)
    FOR             reduce using rule 34 (assignment -> ids ASSIGN expressions SEMICOLON .)
    RETURN          reduce using rule 34 (assignment -> ids ASSIGN expressions SEMICOLON .)
    ID              reduce using rule 34 (assignment -> ids ASSIGN expressions SEMICOLON .)
    CLOSE_BRACES    reduce using rule 34 (assignment -> ids ASSIGN expressions SEMICOLON .)


state 114

    (52) expressions -> exp expressions_op . exp
    (60) exp -> . term exp_comp
    (64) term -> . factor term_comp
    (68) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (69) factor -> . factor_comp ID
    (70) factor -> . factor_comp func_call
    (71) factor -> . ID
    (72) factor -> . func_call
    (73) factor -> . CT_INT
    (74) factor -> . CT_FLOAT
    (75) factor -> . CT_CHAR
    (76) factor_comp -> . PLUS
    (77) factor_comp -> . MINUS
    (48) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    OPEN_PAREN      shift and go to state 88
    ID              shift and go to state 90
    CT_INT          shift and go to state 92
    CT_FLOAT        shift and go to state 93
    CT_CHAR         shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96

    exp                            shift and go to state 150
    term                           shift and go to state 86
    factor                         shift and go to state 87
    factor_comp                    shift and go to state 89
    func_call                      shift and go to state 91

state 115

    (54) expressions_op -> LESS_THAN .

    OPEN_PAREN      reduce using rule 54 (expressions_op -> LESS_THAN .)
    ID              reduce using rule 54 (expressions_op -> LESS_THAN .)
    CT_INT          reduce using rule 54 (expressions_op -> LESS_THAN .)
    CT_FLOAT        reduce using rule 54 (expressions_op -> LESS_THAN .)
    CT_CHAR         reduce using rule 54 (expressions_op -> LESS_THAN .)
    PLUS            reduce using rule 54 (expressions_op -> LESS_THAN .)
    MINUS           reduce using rule 54 (expressions_op -> LESS_THAN .)


state 116

    (55) expressions_op -> MORE_THAN .

    OPEN_PAREN      reduce using rule 55 (expressions_op -> MORE_THAN .)
    ID              reduce using rule 55 (expressions_op -> MORE_THAN .)
    CT_INT          reduce using rule 55 (expressions_op -> MORE_THAN .)
    CT_FLOAT        reduce using rule 55 (expressions_op -> MORE_THAN .)
    CT_CHAR         reduce using rule 55 (expressions_op -> MORE_THAN .)
    PLUS            reduce using rule 55 (expressions_op -> MORE_THAN .)
    MINUS           reduce using rule 55 (expressions_op -> MORE_THAN .)


state 117

    (56) expressions_op -> EQUALS .

    OPEN_PAREN      reduce using rule 56 (expressions_op -> EQUALS .)
    ID              reduce using rule 56 (expressions_op -> EQUALS .)
    CT_INT          reduce using rule 56 (expressions_op -> EQUALS .)
    CT_FLOAT        reduce using rule 56 (expressions_op -> EQUALS .)
    CT_CHAR         reduce using rule 56 (expressions_op -> EQUALS .)
    PLUS            reduce using rule 56 (expressions_op -> EQUALS .)
    MINUS           reduce using rule 56 (expressions_op -> EQUALS .)


state 118

    (57) expressions_op -> NOT_EQUALS .

    OPEN_PAREN      reduce using rule 57 (expressions_op -> NOT_EQUALS .)
    ID              reduce using rule 57 (expressions_op -> NOT_EQUALS .)
    CT_INT          reduce using rule 57 (expressions_op -> NOT_EQUALS .)
    CT_FLOAT        reduce using rule 57 (expressions_op -> NOT_EQUALS .)
    CT_CHAR         reduce using rule 57 (expressions_op -> NOT_EQUALS .)
    PLUS            reduce using rule 57 (expressions_op -> NOT_EQUALS .)
    MINUS           reduce using rule 57 (expressions_op -> NOT_EQUALS .)


state 119

    (58) expressions_op -> AND .

    OPEN_PAREN      reduce using rule 58 (expressions_op -> AND .)
    ID              reduce using rule 58 (expressions_op -> AND .)
    CT_INT          reduce using rule 58 (expressions_op -> AND .)
    CT_FLOAT        reduce using rule 58 (expressions_op -> AND .)
    CT_CHAR         reduce using rule 58 (expressions_op -> AND .)
    PLUS            reduce using rule 58 (expressions_op -> AND .)
    MINUS           reduce using rule 58 (expressions_op -> AND .)


state 120

    (59) expressions_op -> OR .

    OPEN_PAREN      reduce using rule 59 (expressions_op -> OR .)
    ID              reduce using rule 59 (expressions_op -> OR .)
    CT_INT          reduce using rule 59 (expressions_op -> OR .)
    CT_FLOAT        reduce using rule 59 (expressions_op -> OR .)
    CT_CHAR         reduce using rule 59 (expressions_op -> OR .)
    PLUS            reduce using rule 59 (expressions_op -> OR .)
    MINUS           reduce using rule 59 (expressions_op -> OR .)


state 121

    (60) exp -> term exp_comp .

    LESS_THAN       reduce using rule 60 (exp -> term exp_comp .)
    MORE_THAN       reduce using rule 60 (exp -> term exp_comp .)
    EQUALS          reduce using rule 60 (exp -> term exp_comp .)
    NOT_EQUALS      reduce using rule 60 (exp -> term exp_comp .)
    AND             reduce using rule 60 (exp -> term exp_comp .)
    OR              reduce using rule 60 (exp -> term exp_comp .)
    SEMICOLON       reduce using rule 60 (exp -> term exp_comp .)
    COMMA           reduce using rule 60 (exp -> term exp_comp .)
    CLOSE_PAREN     reduce using rule 60 (exp -> term exp_comp .)
    TO              reduce using rule 60 (exp -> term exp_comp .)
    DO              reduce using rule 60 (exp -> term exp_comp .)


state 122

    (61) exp_comp -> PLUS . exp
    (60) exp -> . term exp_comp
    (64) term -> . factor term_comp
    (68) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (69) factor -> . factor_comp ID
    (70) factor -> . factor_comp func_call
    (71) factor -> . ID
    (72) factor -> . func_call
    (73) factor -> . CT_INT
    (74) factor -> . CT_FLOAT
    (75) factor -> . CT_CHAR
    (76) factor_comp -> . PLUS
    (77) factor_comp -> . MINUS
    (48) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    OPEN_PAREN      shift and go to state 88
    ID              shift and go to state 90
    CT_INT          shift and go to state 92
    CT_FLOAT        shift and go to state 93
    CT_CHAR         shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96

    exp                            shift and go to state 151
    term                           shift and go to state 86
    factor                         shift and go to state 87
    factor_comp                    shift and go to state 89
    func_call                      shift and go to state 91

state 123

    (62) exp_comp -> MINUS . exp
    (60) exp -> . term exp_comp
    (64) term -> . factor term_comp
    (68) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (69) factor -> . factor_comp ID
    (70) factor -> . factor_comp func_call
    (71) factor -> . ID
    (72) factor -> . func_call
    (73) factor -> . CT_INT
    (74) factor -> . CT_FLOAT
    (75) factor -> . CT_CHAR
    (76) factor_comp -> . PLUS
    (77) factor_comp -> . MINUS
    (48) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    OPEN_PAREN      shift and go to state 88
    ID              shift and go to state 90
    CT_INT          shift and go to state 92
    CT_FLOAT        shift and go to state 93
    CT_CHAR         shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96

    exp                            shift and go to state 152
    term                           shift and go to state 86
    factor                         shift and go to state 87
    factor_comp                    shift and go to state 89
    func_call                      shift and go to state 91

state 124

    (63) exp_comp -> empty .

    LESS_THAN       reduce using rule 63 (exp_comp -> empty .)
    MORE_THAN       reduce using rule 63 (exp_comp -> empty .)
    EQUALS          reduce using rule 63 (exp_comp -> empty .)
    NOT_EQUALS      reduce using rule 63 (exp_comp -> empty .)
    AND             reduce using rule 63 (exp_comp -> empty .)
    OR              reduce using rule 63 (exp_comp -> empty .)
    SEMICOLON       reduce using rule 63 (exp_comp -> empty .)
    COMMA           reduce using rule 63 (exp_comp -> empty .)
    CLOSE_PAREN     reduce using rule 63 (exp_comp -> empty .)
    TO              reduce using rule 63 (exp_comp -> empty .)
    DO              reduce using rule 63 (exp_comp -> empty .)


state 125

    (64) term -> factor term_comp .

    PLUS            reduce using rule 64 (term -> factor term_comp .)
    MINUS           reduce using rule 64 (term -> factor term_comp .)
    LESS_THAN       reduce using rule 64 (term -> factor term_comp .)
    MORE_THAN       reduce using rule 64 (term -> factor term_comp .)
    EQUALS          reduce using rule 64 (term -> factor term_comp .)
    NOT_EQUALS      reduce using rule 64 (term -> factor term_comp .)
    AND             reduce using rule 64 (term -> factor term_comp .)
    OR              reduce using rule 64 (term -> factor term_comp .)
    SEMICOLON       reduce using rule 64 (term -> factor term_comp .)
    COMMA           reduce using rule 64 (term -> factor term_comp .)
    CLOSE_PAREN     reduce using rule 64 (term -> factor term_comp .)
    TO              reduce using rule 64 (term -> factor term_comp .)
    DO              reduce using rule 64 (term -> factor term_comp .)


state 126

    (65) term_comp -> MULTIPLIES . term
    (64) term -> . factor term_comp
    (68) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (69) factor -> . factor_comp ID
    (70) factor -> . factor_comp func_call
    (71) factor -> . ID
    (72) factor -> . func_call
    (73) factor -> . CT_INT
    (74) factor -> . CT_FLOAT
    (75) factor -> . CT_CHAR
    (76) factor_comp -> . PLUS
    (77) factor_comp -> . MINUS
    (48) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    OPEN_PAREN      shift and go to state 88
    ID              shift and go to state 90
    CT_INT          shift and go to state 92
    CT_FLOAT        shift and go to state 93
    CT_CHAR         shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96

    term                           shift and go to state 153
    factor                         shift and go to state 87
    factor_comp                    shift and go to state 89
    func_call                      shift and go to state 91

state 127

    (66) term_comp -> DIVIDE . term
    (64) term -> . factor term_comp
    (68) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (69) factor -> . factor_comp ID
    (70) factor -> . factor_comp func_call
    (71) factor -> . ID
    (72) factor -> . func_call
    (73) factor -> . CT_INT
    (74) factor -> . CT_FLOAT
    (75) factor -> . CT_CHAR
    (76) factor_comp -> . PLUS
    (77) factor_comp -> . MINUS
    (48) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    OPEN_PAREN      shift and go to state 88
    ID              shift and go to state 90
    CT_INT          shift and go to state 92
    CT_FLOAT        shift and go to state 93
    CT_CHAR         shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96

    term                           shift and go to state 154
    factor                         shift and go to state 87
    factor_comp                    shift and go to state 89
    func_call                      shift and go to state 91

state 128

    (67) term_comp -> empty .

    PLUS            reduce using rule 67 (term_comp -> empty .)
    MINUS           reduce using rule 67 (term_comp -> empty .)
    LESS_THAN       reduce using rule 67 (term_comp -> empty .)
    MORE_THAN       reduce using rule 67 (term_comp -> empty .)
    EQUALS          reduce using rule 67 (term_comp -> empty .)
    NOT_EQUALS      reduce using rule 67 (term_comp -> empty .)
    AND             reduce using rule 67 (term_comp -> empty .)
    OR              reduce using rule 67 (term_comp -> empty .)
    SEMICOLON       reduce using rule 67 (term_comp -> empty .)
    COMMA           reduce using rule 67 (term_comp -> empty .)
    CLOSE_PAREN     reduce using rule 67 (term_comp -> empty .)
    TO              reduce using rule 67 (term_comp -> empty .)
    DO              reduce using rule 67 (term_comp -> empty .)


state 129

    (68) factor -> OPEN_PAREN expressions . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 155


state 130

    (69) factor -> factor_comp ID .
    (48) func_call -> ID . OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    MULTIPLIES      reduce using rule 69 (factor -> factor_comp ID .)
    DIVIDE          reduce using rule 69 (factor -> factor_comp ID .)
    PLUS            reduce using rule 69 (factor -> factor_comp ID .)
    MINUS           reduce using rule 69 (factor -> factor_comp ID .)
    LESS_THAN       reduce using rule 69 (factor -> factor_comp ID .)
    MORE_THAN       reduce using rule 69 (factor -> factor_comp ID .)
    EQUALS          reduce using rule 69 (factor -> factor_comp ID .)
    NOT_EQUALS      reduce using rule 69 (factor -> factor_comp ID .)
    AND             reduce using rule 69 (factor -> factor_comp ID .)
    OR              reduce using rule 69 (factor -> factor_comp ID .)
    SEMICOLON       reduce using rule 69 (factor -> factor_comp ID .)
    COMMA           reduce using rule 69 (factor -> factor_comp ID .)
    CLOSE_PAREN     reduce using rule 69 (factor -> factor_comp ID .)
    TO              reduce using rule 69 (factor -> factor_comp ID .)
    DO              reduce using rule 69 (factor -> factor_comp ID .)
    OPEN_PAREN      shift and go to state 78


state 131

    (70) factor -> factor_comp func_call .

    MULTIPLIES      reduce using rule 70 (factor -> factor_comp func_call .)
    DIVIDE          reduce using rule 70 (factor -> factor_comp func_call .)
    PLUS            reduce using rule 70 (factor -> factor_comp func_call .)
    MINUS           reduce using rule 70 (factor -> factor_comp func_call .)
    LESS_THAN       reduce using rule 70 (factor -> factor_comp func_call .)
    MORE_THAN       reduce using rule 70 (factor -> factor_comp func_call .)
    EQUALS          reduce using rule 70 (factor -> factor_comp func_call .)
    NOT_EQUALS      reduce using rule 70 (factor -> factor_comp func_call .)
    AND             reduce using rule 70 (factor -> factor_comp func_call .)
    OR              reduce using rule 70 (factor -> factor_comp func_call .)
    SEMICOLON       reduce using rule 70 (factor -> factor_comp func_call .)
    COMMA           reduce using rule 70 (factor -> factor_comp func_call .)
    CLOSE_PAREN     reduce using rule 70 (factor -> factor_comp func_call .)
    TO              reduce using rule 70 (factor -> factor_comp func_call .)
    DO              reduce using rule 70 (factor -> factor_comp func_call .)


state 132

    (35) read -> READ OPEN_PAREN ids read_comp . CLOSE_PAREN SEMICOLON

    CLOSE_PAREN     shift and go to state 156


state 133

    (36) read_comp -> COMMA . ids read_comp
    (24) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (25) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (26) ids -> . ID

    ID              shift and go to state 22

    ids                            shift and go to state 157

state 134

    (37) read_comp -> empty .

    CLOSE_PAREN     reduce using rule 37 (read_comp -> empty .)


state 135

    (38) write -> WRITE OPEN_PAREN CT_STRING write_comp . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 158


state 136

    (40) write_comp -> COMMA . CT_STRING write_comp
    (41) write_comp -> COMMA . expressions write_comp
    (52) expressions -> . exp expressions_op exp
    (53) expressions -> . exp
    (60) exp -> . term exp_comp
    (64) term -> . factor term_comp
    (68) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (69) factor -> . factor_comp ID
    (70) factor -> . factor_comp func_call
    (71) factor -> . ID
    (72) factor -> . func_call
    (73) factor -> . CT_INT
    (74) factor -> . CT_FLOAT
    (75) factor -> . CT_CHAR
    (76) factor_comp -> . PLUS
    (77) factor_comp -> . MINUS
    (48) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    CT_STRING       shift and go to state 159
    OPEN_PAREN      shift and go to state 88
    ID              shift and go to state 90
    CT_INT          shift and go to state 92
    CT_FLOAT        shift and go to state 93
    CT_CHAR         shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96

    expressions                    shift and go to state 160
    exp                            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    factor_comp                    shift and go to state 89
    func_call                      shift and go to state 91

state 137

    (42) write_comp -> empty .

    CLOSE_PAREN     reduce using rule 42 (write_comp -> empty .)


state 138

    (39) write -> WRITE OPEN_PAREN expressions write_comp . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 161


state 139

    (43) condition -> IF OPEN_PAREN expressions CLOSE_PAREN . THEN block ELSE block
    (44) condition -> IF OPEN_PAREN expressions CLOSE_PAREN . THEN block

    THEN            shift and go to state 162


state 140

    (45) condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN . DO block

    DO              shift and go to state 163


state 141

    (46) condition -> FOR ids ASSIGN expressions . TO expressions DO block

    TO              shift and go to state 164


state 142

    (47) return -> RETURN OPEN_PAREN exp CLOSE_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 165


state 143

    (49) func_call_comp -> ID func_call_comp .

    CLOSE_PAREN     reduce using rule 49 (func_call_comp -> ID func_call_comp .)


state 144

    (48) func_call -> ID OPEN_PAREN . func_call_comp CLOSE_PAREN SEMICOLON
    (68) factor -> OPEN_PAREN . expressions CLOSE_PAREN
    (49) func_call_comp -> . ID func_call_comp
    (50) func_call_comp -> . COMMA ID func_call_comp
    (51) func_call_comp -> . expressions
    (52) expressions -> . exp expressions_op exp
    (53) expressions -> . exp
    (60) exp -> . term exp_comp
    (64) term -> . factor term_comp
    (68) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (69) factor -> . factor_comp ID
    (70) factor -> . factor_comp func_call
    (71) factor -> . ID
    (72) factor -> . func_call
    (73) factor -> . CT_INT
    (74) factor -> . CT_FLOAT
    (75) factor -> . CT_CHAR
    (76) factor_comp -> . PLUS
    (77) factor_comp -> . MINUS
    (48) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    ID              shift and go to state 104
    COMMA           shift and go to state 106
    OPEN_PAREN      shift and go to state 88
    CT_INT          shift and go to state 92
    CT_FLOAT        shift and go to state 93
    CT_CHAR         shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96

    func_call_comp                 shift and go to state 105
    expressions                    shift and go to state 166
    exp                            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    factor_comp                    shift and go to state 89
    func_call                      shift and go to state 91

state 145

    (48) func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 167


state 146

    (50) func_call_comp -> COMMA ID . func_call_comp
    (49) func_call_comp -> . ID func_call_comp
    (50) func_call_comp -> . COMMA ID func_call_comp
    (51) func_call_comp -> . expressions
    (52) expressions -> . exp expressions_op exp
    (53) expressions -> . exp
    (60) exp -> . term exp_comp
    (64) term -> . factor term_comp
    (68) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (69) factor -> . factor_comp ID
    (70) factor -> . factor_comp func_call
    (71) factor -> . ID
    (72) factor -> . func_call
    (73) factor -> . CT_INT
    (74) factor -> . CT_FLOAT
    (75) factor -> . CT_CHAR
    (76) factor_comp -> . PLUS
    (77) factor_comp -> . MINUS
    (48) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    ID              shift and go to state 104
    COMMA           shift and go to state 106
    OPEN_PAREN      shift and go to state 88
    CT_INT          shift and go to state 92
    CT_FLOAT        shift and go to state 93
    CT_CHAR         shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96

    func_call_comp                 shift and go to state 168
    expressions                    shift and go to state 107
    exp                            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    factor_comp                    shift and go to state 89
    func_call                      shift and go to state 91

state 147

    (3) funcs -> func_type MODULE ID OPEN_PAREN var_type ID CLOSE_PAREN vars block .

    MAIN            reduce using rule 3 (funcs -> func_type MODULE ID OPEN_PAREN var_type ID CLOSE_PAREN vars block .)


state 148

    (5) funcs_comp -> ID OPEN_PAREN var_type . ID CLOSE_PAREN vars block

    ID              shift and go to state 169


state 149

    (20) var_comp_recursive -> var_type ids var_comp_2 SEMICOLON var_comp_recursive .

    VOID            reduce using rule 20 (var_comp_recursive -> var_type ids var_comp_2 SEMICOLON var_comp_recursive .)
    INT             reduce using rule 20 (var_comp_recursive -> var_type ids var_comp_2 SEMICOLON var_comp_recursive .)
    FLOAT           reduce using rule 20 (var_comp_recursive -> var_type ids var_comp_2 SEMICOLON var_comp_recursive .)
    CHAR            reduce using rule 20 (var_comp_recursive -> var_type ids var_comp_2 SEMICOLON var_comp_recursive .)
    MAIN            reduce using rule 20 (var_comp_recursive -> var_type ids var_comp_2 SEMICOLON var_comp_recursive .)
    OPEN_BRACES     reduce using rule 20 (var_comp_recursive -> var_type ids var_comp_2 SEMICOLON var_comp_recursive .)


state 150

    (52) expressions -> exp expressions_op exp .

    SEMICOLON       reduce using rule 52 (expressions -> exp expressions_op exp .)
    COMMA           reduce using rule 52 (expressions -> exp expressions_op exp .)
    CLOSE_PAREN     reduce using rule 52 (expressions -> exp expressions_op exp .)
    TO              reduce using rule 52 (expressions -> exp expressions_op exp .)
    DO              reduce using rule 52 (expressions -> exp expressions_op exp .)


state 151

    (61) exp_comp -> PLUS exp .

    LESS_THAN       reduce using rule 61 (exp_comp -> PLUS exp .)
    MORE_THAN       reduce using rule 61 (exp_comp -> PLUS exp .)
    EQUALS          reduce using rule 61 (exp_comp -> PLUS exp .)
    NOT_EQUALS      reduce using rule 61 (exp_comp -> PLUS exp .)
    AND             reduce using rule 61 (exp_comp -> PLUS exp .)
    OR              reduce using rule 61 (exp_comp -> PLUS exp .)
    SEMICOLON       reduce using rule 61 (exp_comp -> PLUS exp .)
    COMMA           reduce using rule 61 (exp_comp -> PLUS exp .)
    CLOSE_PAREN     reduce using rule 61 (exp_comp -> PLUS exp .)
    TO              reduce using rule 61 (exp_comp -> PLUS exp .)
    DO              reduce using rule 61 (exp_comp -> PLUS exp .)


state 152

    (62) exp_comp -> MINUS exp .

    LESS_THAN       reduce using rule 62 (exp_comp -> MINUS exp .)
    MORE_THAN       reduce using rule 62 (exp_comp -> MINUS exp .)
    EQUALS          reduce using rule 62 (exp_comp -> MINUS exp .)
    NOT_EQUALS      reduce using rule 62 (exp_comp -> MINUS exp .)
    AND             reduce using rule 62 (exp_comp -> MINUS exp .)
    OR              reduce using rule 62 (exp_comp -> MINUS exp .)
    SEMICOLON       reduce using rule 62 (exp_comp -> MINUS exp .)
    COMMA           reduce using rule 62 (exp_comp -> MINUS exp .)
    CLOSE_PAREN     reduce using rule 62 (exp_comp -> MINUS exp .)
    TO              reduce using rule 62 (exp_comp -> MINUS exp .)
    DO              reduce using rule 62 (exp_comp -> MINUS exp .)


state 153

    (65) term_comp -> MULTIPLIES term .

    PLUS            reduce using rule 65 (term_comp -> MULTIPLIES term .)
    MINUS           reduce using rule 65 (term_comp -> MULTIPLIES term .)
    LESS_THAN       reduce using rule 65 (term_comp -> MULTIPLIES term .)
    MORE_THAN       reduce using rule 65 (term_comp -> MULTIPLIES term .)
    EQUALS          reduce using rule 65 (term_comp -> MULTIPLIES term .)
    NOT_EQUALS      reduce using rule 65 (term_comp -> MULTIPLIES term .)
    AND             reduce using rule 65 (term_comp -> MULTIPLIES term .)
    OR              reduce using rule 65 (term_comp -> MULTIPLIES term .)
    SEMICOLON       reduce using rule 65 (term_comp -> MULTIPLIES term .)
    COMMA           reduce using rule 65 (term_comp -> MULTIPLIES term .)
    CLOSE_PAREN     reduce using rule 65 (term_comp -> MULTIPLIES term .)
    TO              reduce using rule 65 (term_comp -> MULTIPLIES term .)
    DO              reduce using rule 65 (term_comp -> MULTIPLIES term .)


state 154

    (66) term_comp -> DIVIDE term .

    PLUS            reduce using rule 66 (term_comp -> DIVIDE term .)
    MINUS           reduce using rule 66 (term_comp -> DIVIDE term .)
    LESS_THAN       reduce using rule 66 (term_comp -> DIVIDE term .)
    MORE_THAN       reduce using rule 66 (term_comp -> DIVIDE term .)
    EQUALS          reduce using rule 66 (term_comp -> DIVIDE term .)
    NOT_EQUALS      reduce using rule 66 (term_comp -> DIVIDE term .)
    AND             reduce using rule 66 (term_comp -> DIVIDE term .)
    OR              reduce using rule 66 (term_comp -> DIVIDE term .)
    SEMICOLON       reduce using rule 66 (term_comp -> DIVIDE term .)
    COMMA           reduce using rule 66 (term_comp -> DIVIDE term .)
    CLOSE_PAREN     reduce using rule 66 (term_comp -> DIVIDE term .)
    TO              reduce using rule 66 (term_comp -> DIVIDE term .)
    DO              reduce using rule 66 (term_comp -> DIVIDE term .)


state 155

    (68) factor -> OPEN_PAREN expressions CLOSE_PAREN .

    MULTIPLIES      reduce using rule 68 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    DIVIDE          reduce using rule 68 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    PLUS            reduce using rule 68 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    MINUS           reduce using rule 68 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    LESS_THAN       reduce using rule 68 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    MORE_THAN       reduce using rule 68 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    EQUALS          reduce using rule 68 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    NOT_EQUALS      reduce using rule 68 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    AND             reduce using rule 68 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    OR              reduce using rule 68 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    SEMICOLON       reduce using rule 68 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    COMMA           reduce using rule 68 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 68 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    TO              reduce using rule 68 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    DO              reduce using rule 68 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)


state 156

    (35) read -> READ OPEN_PAREN ids read_comp CLOSE_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 170


state 157

    (36) read_comp -> COMMA ids . read_comp
    (36) read_comp -> . COMMA ids read_comp
    (37) read_comp -> . empty
    (78) empty -> .

    COMMA           shift and go to state 133
    CLOSE_PAREN     reduce using rule 78 (empty -> .)

    read_comp                      shift and go to state 171
    empty                          shift and go to state 134

state 158

    (38) write -> WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN .

    READ            reduce using rule 38 (write -> WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN .)
    WRITE           reduce using rule 38 (write -> WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN .)
    IF              reduce using rule 38 (write -> WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN .)
    WHILE           reduce using rule 38 (write -> WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN .)
    FOR             reduce using rule 38 (write -> WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN .)
    RETURN          reduce using rule 38 (write -> WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN .)
    ID              reduce using rule 38 (write -> WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN .)
    CLOSE_BRACES    reduce using rule 38 (write -> WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN .)


state 159

    (40) write_comp -> COMMA CT_STRING . write_comp
    (40) write_comp -> . COMMA CT_STRING write_comp
    (41) write_comp -> . COMMA expressions write_comp
    (42) write_comp -> . empty
    (78) empty -> .

    COMMA           shift and go to state 136
    CLOSE_PAREN     reduce using rule 78 (empty -> .)

    write_comp                     shift and go to state 172
    empty                          shift and go to state 137

state 160

    (41) write_comp -> COMMA expressions . write_comp
    (40) write_comp -> . COMMA CT_STRING write_comp
    (41) write_comp -> . COMMA expressions write_comp
    (42) write_comp -> . empty
    (78) empty -> .

    COMMA           shift and go to state 136
    CLOSE_PAREN     reduce using rule 78 (empty -> .)

    write_comp                     shift and go to state 173
    empty                          shift and go to state 137

state 161

    (39) write -> WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN .

    READ            reduce using rule 39 (write -> WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN .)
    WRITE           reduce using rule 39 (write -> WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN .)
    IF              reduce using rule 39 (write -> WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN .)
    WHILE           reduce using rule 39 (write -> WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN .)
    FOR             reduce using rule 39 (write -> WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN .)
    RETURN          reduce using rule 39 (write -> WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN .)
    ID              reduce using rule 39 (write -> WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN .)
    CLOSE_BRACES    reduce using rule 39 (write -> WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN .)


state 162

    (43) condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN . block ELSE block
    (44) condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN . block
    (6) block -> . OPEN_BRACES statements CLOSE_BRACES

    OPEN_BRACES     shift and go to state 37

    block                          shift and go to state 174

state 163

    (45) condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN DO . block
    (6) block -> . OPEN_BRACES statements CLOSE_BRACES

    OPEN_BRACES     shift and go to state 37

    block                          shift and go to state 175

state 164

    (46) condition -> FOR ids ASSIGN expressions TO . expressions DO block
    (52) expressions -> . exp expressions_op exp
    (53) expressions -> . exp
    (60) exp -> . term exp_comp
    (64) term -> . factor term_comp
    (68) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (69) factor -> . factor_comp ID
    (70) factor -> . factor_comp func_call
    (71) factor -> . ID
    (72) factor -> . func_call
    (73) factor -> . CT_INT
    (74) factor -> . CT_FLOAT
    (75) factor -> . CT_CHAR
    (76) factor_comp -> . PLUS
    (77) factor_comp -> . MINUS
    (48) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    OPEN_PAREN      shift and go to state 88
    ID              shift and go to state 90
    CT_INT          shift and go to state 92
    CT_FLOAT        shift and go to state 93
    CT_CHAR         shift and go to state 94
    PLUS            shift and go to state 95
    MINUS           shift and go to state 96

    expressions                    shift and go to state 176
    exp                            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    factor_comp                    shift and go to state 89
    func_call                      shift and go to state 91

state 165

    (47) return -> RETURN OPEN_PAREN exp CLOSE_PAREN SEMICOLON .

    READ            reduce using rule 47 (return -> RETURN OPEN_PAREN exp CLOSE_PAREN SEMICOLON .)
    WRITE           reduce using rule 47 (return -> RETURN OPEN_PAREN exp CLOSE_PAREN SEMICOLON .)
    IF              reduce using rule 47 (return -> RETURN OPEN_PAREN exp CLOSE_PAREN SEMICOLON .)
    WHILE           reduce using rule 47 (return -> RETURN OPEN_PAREN exp CLOSE_PAREN SEMICOLON .)
    FOR             reduce using rule 47 (return -> RETURN OPEN_PAREN exp CLOSE_PAREN SEMICOLON .)
    RETURN          reduce using rule 47 (return -> RETURN OPEN_PAREN exp CLOSE_PAREN SEMICOLON .)
    ID              reduce using rule 47 (return -> RETURN OPEN_PAREN exp CLOSE_PAREN SEMICOLON .)
    CLOSE_BRACES    reduce using rule 47 (return -> RETURN OPEN_PAREN exp CLOSE_PAREN SEMICOLON .)


state 166

    (68) factor -> OPEN_PAREN expressions . CLOSE_PAREN
    (51) func_call_comp -> expressions .

  ! shift/reduce conflict for CLOSE_PAREN resolved as shift
    CLOSE_PAREN     shift and go to state 155

  ! CLOSE_PAREN     [ reduce using rule 51 (func_call_comp -> expressions .) ]


state 167

    (48) func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .

    READ            reduce using rule 48 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    WRITE           reduce using rule 48 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    IF              reduce using rule 48 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    WHILE           reduce using rule 48 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    FOR             reduce using rule 48 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    RETURN          reduce using rule 48 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    ID              reduce using rule 48 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    CLOSE_BRACES    reduce using rule 48 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    MULTIPLIES      reduce using rule 48 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    DIVIDE          reduce using rule 48 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    PLUS            reduce using rule 48 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    MINUS           reduce using rule 48 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    LESS_THAN       reduce using rule 48 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    MORE_THAN       reduce using rule 48 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    EQUALS          reduce using rule 48 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    NOT_EQUALS      reduce using rule 48 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    AND             reduce using rule 48 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    OR              reduce using rule 48 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    SEMICOLON       reduce using rule 48 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    COMMA           reduce using rule 48 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    CLOSE_PAREN     reduce using rule 48 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    TO              reduce using rule 48 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    DO              reduce using rule 48 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)


state 168

    (50) func_call_comp -> COMMA ID func_call_comp .

    CLOSE_PAREN     reduce using rule 50 (func_call_comp -> COMMA ID func_call_comp .)


state 169

    (5) funcs_comp -> ID OPEN_PAREN var_type ID . CLOSE_PAREN vars block

    CLOSE_PAREN     shift and go to state 177


state 170

    (35) read -> READ OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLON .

    READ            reduce using rule 35 (read -> READ OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLON .)
    WRITE           reduce using rule 35 (read -> READ OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLON .)
    IF              reduce using rule 35 (read -> READ OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLON .)
    WHILE           reduce using rule 35 (read -> READ OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLON .)
    FOR             reduce using rule 35 (read -> READ OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLON .)
    RETURN          reduce using rule 35 (read -> READ OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLON .)
    ID              reduce using rule 35 (read -> READ OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLON .)
    CLOSE_BRACES    reduce using rule 35 (read -> READ OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLON .)


state 171

    (36) read_comp -> COMMA ids read_comp .

    CLOSE_PAREN     reduce using rule 36 (read_comp -> COMMA ids read_comp .)


state 172

    (40) write_comp -> COMMA CT_STRING write_comp .

    CLOSE_PAREN     reduce using rule 40 (write_comp -> COMMA CT_STRING write_comp .)


state 173

    (41) write_comp -> COMMA expressions write_comp .

    CLOSE_PAREN     reduce using rule 41 (write_comp -> COMMA expressions write_comp .)


state 174

    (43) condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block . ELSE block
    (44) condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block .

    ELSE            shift and go to state 178
    READ            reduce using rule 44 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block .)
    WRITE           reduce using rule 44 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block .)
    IF              reduce using rule 44 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block .)
    WHILE           reduce using rule 44 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block .)
    FOR             reduce using rule 44 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block .)
    RETURN          reduce using rule 44 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block .)
    ID              reduce using rule 44 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block .)
    CLOSE_BRACES    reduce using rule 44 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block .)


state 175

    (45) condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN DO block .

    READ            reduce using rule 45 (condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN DO block .)
    WRITE           reduce using rule 45 (condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN DO block .)
    IF              reduce using rule 45 (condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN DO block .)
    WHILE           reduce using rule 45 (condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN DO block .)
    FOR             reduce using rule 45 (condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN DO block .)
    RETURN          reduce using rule 45 (condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN DO block .)
    ID              reduce using rule 45 (condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN DO block .)
    CLOSE_BRACES    reduce using rule 45 (condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN DO block .)


state 176

    (46) condition -> FOR ids ASSIGN expressions TO expressions . DO block

    DO              shift and go to state 179


state 177

    (5) funcs_comp -> ID OPEN_PAREN var_type ID CLOSE_PAREN . vars block
    (12) vars -> . VARS var_comp
    (13) vars -> . empty
    (78) empty -> .

    VARS            shift and go to state 6
    OPEN_BRACES     reduce using rule 78 (empty -> .)

    vars                           shift and go to state 180
    empty                          shift and go to state 7

state 178

    (43) condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE . block
    (6) block -> . OPEN_BRACES statements CLOSE_BRACES

    OPEN_BRACES     shift and go to state 37

    block                          shift and go to state 181

state 179

    (46) condition -> FOR ids ASSIGN expressions TO expressions DO . block
    (6) block -> . OPEN_BRACES statements CLOSE_BRACES

    OPEN_BRACES     shift and go to state 37

    block                          shift and go to state 182

state 180

    (5) funcs_comp -> ID OPEN_PAREN var_type ID CLOSE_PAREN vars . block
    (6) block -> . OPEN_BRACES statements CLOSE_BRACES

    OPEN_BRACES     shift and go to state 37

    block                          shift and go to state 183

state 181

    (43) condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block .

    READ            reduce using rule 43 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block .)
    WRITE           reduce using rule 43 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block .)
    IF              reduce using rule 43 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block .)
    WHILE           reduce using rule 43 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block .)
    FOR             reduce using rule 43 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block .)
    RETURN          reduce using rule 43 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block .)
    ID              reduce using rule 43 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block .)
    CLOSE_BRACES    reduce using rule 43 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block .)


state 182

    (46) condition -> FOR ids ASSIGN expressions TO expressions DO block .

    READ            reduce using rule 46 (condition -> FOR ids ASSIGN expressions TO expressions DO block .)
    WRITE           reduce using rule 46 (condition -> FOR ids ASSIGN expressions TO expressions DO block .)
    IF              reduce using rule 46 (condition -> FOR ids ASSIGN expressions TO expressions DO block .)
    WHILE           reduce using rule 46 (condition -> FOR ids ASSIGN expressions TO expressions DO block .)
    FOR             reduce using rule 46 (condition -> FOR ids ASSIGN expressions TO expressions DO block .)
    RETURN          reduce using rule 46 (condition -> FOR ids ASSIGN expressions TO expressions DO block .)
    ID              reduce using rule 46 (condition -> FOR ids ASSIGN expressions TO expressions DO block .)
    CLOSE_BRACES    reduce using rule 46 (condition -> FOR ids ASSIGN expressions TO expressions DO block .)


state 183

    (5) funcs_comp -> ID OPEN_PAREN var_type ID CLOSE_PAREN vars block .

    VOID            reduce using rule 5 (funcs_comp -> ID OPEN_PAREN var_type ID CLOSE_PAREN vars block .)
    INT             reduce using rule 5 (funcs_comp -> ID OPEN_PAREN var_type ID CLOSE_PAREN vars block .)
    FLOAT           reduce using rule 5 (funcs_comp -> ID OPEN_PAREN var_type ID CLOSE_PAREN vars block .)
    CHAR            reduce using rule 5 (funcs_comp -> ID OPEN_PAREN var_type ID CLOSE_PAREN vars block .)
    MAIN            reduce using rule 5 (funcs_comp -> ID OPEN_PAREN var_type ID CLOSE_PAREN vars block .)
    OPEN_BRACES     reduce using rule 5 (funcs_comp -> ID OPEN_PAREN var_type ID CLOSE_PAREN vars block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for INT in state 32 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 32 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 32 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 104 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 104 resolved as shift
WARNING: shift/reduce conflict for INT in state 111 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 111 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 111 resolved as shift
WARNING: shift/reduce conflict for CLOSE_PAREN in state 166 resolved as shift
