Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BOOLEAN

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON main
Rule 2     program -> PROGRAM ID SEMICOLON vars main
Rule 3     program -> PROGRAM ID SEMICOLON funcs main
Rule 4     program -> PROGRAM ID SEMICOLON vars funcs main
Rule 5     main -> MAIN OPEN_PAREN CLOSE_PAREN block
Rule 6     funcs -> func_type MODULE ID OPEN_PAREN var_type ID CLOSE_PAREN vars block
Rule 7     block -> OPEN_BRACES statements CLOSE_BRACES
Rule 8     func_type -> var_type
Rule 9     func_type -> VOID
Rule 10    var_type -> INT
Rule 11    var_type -> FLOAT
Rule 12    var_type -> CHAR
Rule 13    vars -> VARS var_comp
Rule 14    var_comp -> var_type ids var_comp SEMICOLON var_comp
Rule 15    var_comp -> COMMA ids var_comp
Rule 16    var_comp -> empty
Rule 17    ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
Rule 18    ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS
Rule 19    ids -> ID
Rule 20    statements -> assignment statements
Rule 21    statements -> read statements
Rule 22    statements -> write statements
Rule 23    statements -> condition statements
Rule 24    statements -> return statements
Rule 25    statements -> func_call statements
Rule 26    statements -> empty
Rule 27    assignment -> ids ASSIGN expressions SEMICOLON
Rule 28    read -> READ OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLON
Rule 29    read_comp -> COMMA ids read_comp
Rule 30    read_comp -> empty
Rule 31    write -> WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN
Rule 32    write -> WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN
Rule 33    write_comp -> COMMA CT_STRING write_comp
Rule 34    write_comp -> COMMA expressions write_comp
Rule 35    write_comp -> empty
Rule 36    condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block
Rule 37    condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block
Rule 38    condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN DO block
Rule 39    condition -> FOR ids ASSIGN expressions TO expressions DO block
Rule 40    return -> RETURN OPEN_PAREN exp CLOSE_PAREN SEMICOLON
Rule 41    func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON
Rule 42    func_call_comp -> ID func_call_comp
Rule 43    func_call_comp -> COMMA ID func_call_comp
Rule 44    func_call_comp -> expressions
Rule 45    expressions -> exp expressions_op exp
Rule 46    expressions -> exp
Rule 47    expressions_op -> LESS_THAN
Rule 48    expressions_op -> MORE_THAN
Rule 49    expressions_op -> EQUALS
Rule 50    expressions_op -> NOT_EQUALS
Rule 51    expressions_op -> AND
Rule 52    expressions_op -> OR
Rule 53    exp -> term exp_comp
Rule 54    exp_comp -> PLUS exp
Rule 55    exp_comp -> MINUS exp
Rule 56    exp_comp -> empty
Rule 57    term -> factor term_comp
Rule 58    term_comp -> MULTIPLIES term
Rule 59    term_comp -> DIVIDE term
Rule 60    term_comp -> empty
Rule 61    factor -> OPEN_PAREN expressions CLOSE_PAREN
Rule 62    factor -> factor_comp ID
Rule 63    factor -> factor_comp func_call
Rule 64    factor -> ID
Rule 65    factor -> func_call
Rule 66    factor -> CT_INT
Rule 67    factor -> CT_FLOAT
Rule 68    factor -> CT_CHAR
Rule 69    factor_comp -> PLUS
Rule 70    factor_comp -> MINUS
Rule 71    empty -> <empty>

Terminals, with rules where they appear

AND                  : 51
ASSIGN               : 27 39
BOOLEAN              : 
CHAR                 : 12
CLOSE_BRACES         : 7
CLOSE_BRACKETS       : 17 17 18
CLOSE_PAREN          : 5 6 28 31 32 36 37 38 40 41 61
COMMA                : 15 29 33 34 43
CT_CHAR              : 68
CT_FLOAT             : 67
CT_INT               : 17 17 18 66
CT_STRING            : 31 33
DIVIDE               : 59
DO                   : 38 39
ELSE                 : 36
EQUALS               : 49
FLOAT                : 11
FOR                  : 39
ID                   : 1 2 3 4 6 6 17 18 19 41 42 43 62 64
IF                   : 36 37
INT                  : 10
LESS_THAN            : 47
MAIN                 : 5
MINUS                : 55 70
MODULE               : 6
MORE_THAN            : 48
MULTIPLIES           : 58
NOT_EQUALS           : 50
OPEN_BRACES          : 7
OPEN_BRACKETS        : 17 17 18
OPEN_PAREN           : 5 6 28 31 32 36 37 38 40 41 61
OR                   : 52
PLUS                 : 54 69
PROGRAM              : 1 2 3 4
READ                 : 28
RETURN               : 40
SEMICOLON            : 1 2 3 4 14 27 28 40 41
THEN                 : 36 37
TO                   : 39
VARS                 : 13
VOID                 : 9
WHILE                : 38
WRITE                : 31 32
error                : 

Nonterminals, with rules where they appear

assignment           : 20
block                : 5 6 36 36 37 38 39
condition            : 23
empty                : 16 26 30 35 56 60
exp                  : 40 45 45 46 54 55
exp_comp             : 53
expressions          : 27 32 34 36 37 38 39 39 44 61
expressions_op       : 45
factor               : 57
factor_comp          : 62 63
func_call            : 25 63 65
func_call_comp       : 41 42 43
func_type            : 6
funcs                : 3 4
ids                  : 14 15 27 28 29 39
main                 : 1 2 3 4
program              : 0
read                 : 21
read_comp            : 28 29
return               : 24
statements           : 7 20 21 22 23 24 25
term                 : 53 58 59
term_comp            : 57
var_comp             : 13 14 14 15
var_type             : 6 8 14
vars                 : 2 4 6
write                : 22
write_comp           : 31 32 33 34

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON main
    (2) program -> . PROGRAM ID SEMICOLON vars main
    (3) program -> . PROGRAM ID SEMICOLON funcs main
    (4) program -> . PROGRAM ID SEMICOLON vars funcs main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON main
    (2) program -> PROGRAM . ID SEMICOLON vars main
    (3) program -> PROGRAM . ID SEMICOLON funcs main
    (4) program -> PROGRAM . ID SEMICOLON vars funcs main

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON main
    (2) program -> PROGRAM ID . SEMICOLON vars main
    (3) program -> PROGRAM ID . SEMICOLON funcs main
    (4) program -> PROGRAM ID . SEMICOLON vars funcs main

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . main
    (2) program -> PROGRAM ID SEMICOLON . vars main
    (3) program -> PROGRAM ID SEMICOLON . funcs main
    (4) program -> PROGRAM ID SEMICOLON . vars funcs main
    (5) main -> . MAIN OPEN_PAREN CLOSE_PAREN block
    (13) vars -> . VARS var_comp
    (6) funcs -> . func_type MODULE ID OPEN_PAREN var_type ID CLOSE_PAREN vars block
    (8) func_type -> . var_type
    (9) func_type -> . VOID
    (10) var_type -> . INT
    (11) var_type -> . FLOAT
    (12) var_type -> . CHAR

    MAIN            shift and go to state 8
    VARS            shift and go to state 9
    VOID            shift and go to state 12
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15

    main                           shift and go to state 5
    vars                           shift and go to state 6
    funcs                          shift and go to state 7
    func_type                      shift and go to state 10
    var_type                       shift and go to state 11

state 5

    (1) program -> PROGRAM ID SEMICOLON main .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON main .)


state 6

    (2) program -> PROGRAM ID SEMICOLON vars . main
    (4) program -> PROGRAM ID SEMICOLON vars . funcs main
    (5) main -> . MAIN OPEN_PAREN CLOSE_PAREN block
    (6) funcs -> . func_type MODULE ID OPEN_PAREN var_type ID CLOSE_PAREN vars block
    (8) func_type -> . var_type
    (9) func_type -> . VOID
    (10) var_type -> . INT
    (11) var_type -> . FLOAT
    (12) var_type -> . CHAR

    MAIN            shift and go to state 8
    VOID            shift and go to state 12
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15

    main                           shift and go to state 16
    funcs                          shift and go to state 17
    func_type                      shift and go to state 10
    var_type                       shift and go to state 11

state 7

    (3) program -> PROGRAM ID SEMICOLON funcs . main
    (5) main -> . MAIN OPEN_PAREN CLOSE_PAREN block

    MAIN            shift and go to state 8

    main                           shift and go to state 18

state 8

    (5) main -> MAIN . OPEN_PAREN CLOSE_PAREN block

    OPEN_PAREN      shift and go to state 19


state 9

    (13) vars -> VARS . var_comp
    (14) var_comp -> . var_type ids var_comp SEMICOLON var_comp
    (15) var_comp -> . COMMA ids var_comp
    (16) var_comp -> . empty
    (10) var_type -> . INT
    (11) var_type -> . FLOAT
    (12) var_type -> . CHAR
    (71) empty -> .

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    COMMA           shift and go to state 22
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15
    MAIN            reduce using rule 71 (empty -> .)
    VOID            reduce using rule 71 (empty -> .)
    OPEN_BRACES     reduce using rule 71 (empty -> .)

  ! INT             [ reduce using rule 71 (empty -> .) ]
  ! FLOAT           [ reduce using rule 71 (empty -> .) ]
  ! CHAR            [ reduce using rule 71 (empty -> .) ]

    var_comp                       shift and go to state 20
    var_type                       shift and go to state 21
    empty                          shift and go to state 23

state 10

    (6) funcs -> func_type . MODULE ID OPEN_PAREN var_type ID CLOSE_PAREN vars block

    MODULE          shift and go to state 24


state 11

    (8) func_type -> var_type .

    MODULE          reduce using rule 8 (func_type -> var_type .)


state 12

    (9) func_type -> VOID .

    MODULE          reduce using rule 9 (func_type -> VOID .)


state 13

    (10) var_type -> INT .

    MODULE          reduce using rule 10 (var_type -> INT .)
    ID              reduce using rule 10 (var_type -> INT .)


state 14

    (11) var_type -> FLOAT .

    MODULE          reduce using rule 11 (var_type -> FLOAT .)
    ID              reduce using rule 11 (var_type -> FLOAT .)


state 15

    (12) var_type -> CHAR .

    MODULE          reduce using rule 12 (var_type -> CHAR .)
    ID              reduce using rule 12 (var_type -> CHAR .)


state 16

    (2) program -> PROGRAM ID SEMICOLON vars main .

    $end            reduce using rule 2 (program -> PROGRAM ID SEMICOLON vars main .)


state 17

    (4) program -> PROGRAM ID SEMICOLON vars funcs . main
    (5) main -> . MAIN OPEN_PAREN CLOSE_PAREN block

    MAIN            shift and go to state 8

    main                           shift and go to state 25

state 18

    (3) program -> PROGRAM ID SEMICOLON funcs main .

    $end            reduce using rule 3 (program -> PROGRAM ID SEMICOLON funcs main .)


state 19

    (5) main -> MAIN OPEN_PAREN . CLOSE_PAREN block

    CLOSE_PAREN     shift and go to state 26


state 20

    (13) vars -> VARS var_comp .

    MAIN            reduce using rule 13 (vars -> VARS var_comp .)
    VOID            reduce using rule 13 (vars -> VARS var_comp .)
    INT             reduce using rule 13 (vars -> VARS var_comp .)
    FLOAT           reduce using rule 13 (vars -> VARS var_comp .)
    CHAR            reduce using rule 13 (vars -> VARS var_comp .)
    OPEN_BRACES     reduce using rule 13 (vars -> VARS var_comp .)


state 21

    (14) var_comp -> var_type . ids var_comp SEMICOLON var_comp
    (17) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (18) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (19) ids -> . ID

    ID              shift and go to state 28

    ids                            shift and go to state 27

state 22

    (15) var_comp -> COMMA . ids var_comp
    (17) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (18) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (19) ids -> . ID

    ID              shift and go to state 28

    ids                            shift and go to state 29

state 23

    (16) var_comp -> empty .

    MAIN            reduce using rule 16 (var_comp -> empty .)
    VOID            reduce using rule 16 (var_comp -> empty .)
    INT             reduce using rule 16 (var_comp -> empty .)
    FLOAT           reduce using rule 16 (var_comp -> empty .)
    CHAR            reduce using rule 16 (var_comp -> empty .)
    OPEN_BRACES     reduce using rule 16 (var_comp -> empty .)
    SEMICOLON       reduce using rule 16 (var_comp -> empty .)


state 24

    (6) funcs -> func_type MODULE . ID OPEN_PAREN var_type ID CLOSE_PAREN vars block

    ID              shift and go to state 30


state 25

    (4) program -> PROGRAM ID SEMICOLON vars funcs main .

    $end            reduce using rule 4 (program -> PROGRAM ID SEMICOLON vars funcs main .)


state 26

    (5) main -> MAIN OPEN_PAREN CLOSE_PAREN . block
    (7) block -> . OPEN_BRACES statements CLOSE_BRACES

    OPEN_BRACES     shift and go to state 32

    block                          shift and go to state 31

state 27

    (14) var_comp -> var_type ids . var_comp SEMICOLON var_comp
    (14) var_comp -> . var_type ids var_comp SEMICOLON var_comp
    (15) var_comp -> . COMMA ids var_comp
    (16) var_comp -> . empty
    (10) var_type -> . INT
    (11) var_type -> . FLOAT
    (12) var_type -> . CHAR
    (71) empty -> .

    COMMA           shift and go to state 22
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15
    SEMICOLON       reduce using rule 71 (empty -> .)

    var_type                       shift and go to state 21
    var_comp                       shift and go to state 33
    empty                          shift and go to state 23

state 28

    (17) ids -> ID . OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (18) ids -> ID . OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (19) ids -> ID .

    OPEN_BRACKETS   shift and go to state 34
    COMMA           reduce using rule 19 (ids -> ID .)
    INT             reduce using rule 19 (ids -> ID .)
    FLOAT           reduce using rule 19 (ids -> ID .)
    CHAR            reduce using rule 19 (ids -> ID .)
    SEMICOLON       reduce using rule 19 (ids -> ID .)
    MAIN            reduce using rule 19 (ids -> ID .)
    VOID            reduce using rule 19 (ids -> ID .)
    OPEN_BRACES     reduce using rule 19 (ids -> ID .)
    ASSIGN          reduce using rule 19 (ids -> ID .)
    CLOSE_PAREN     reduce using rule 19 (ids -> ID .)


state 29

    (15) var_comp -> COMMA ids . var_comp
    (14) var_comp -> . var_type ids var_comp SEMICOLON var_comp
    (15) var_comp -> . COMMA ids var_comp
    (16) var_comp -> . empty
    (10) var_type -> . INT
    (11) var_type -> . FLOAT
    (12) var_type -> . CHAR
    (71) empty -> .

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    COMMA           shift and go to state 22
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15
    MAIN            reduce using rule 71 (empty -> .)
    VOID            reduce using rule 71 (empty -> .)
    OPEN_BRACES     reduce using rule 71 (empty -> .)
    SEMICOLON       reduce using rule 71 (empty -> .)

  ! INT             [ reduce using rule 71 (empty -> .) ]
  ! FLOAT           [ reduce using rule 71 (empty -> .) ]
  ! CHAR            [ reduce using rule 71 (empty -> .) ]

    var_comp                       shift and go to state 35
    var_type                       shift and go to state 21
    empty                          shift and go to state 23

state 30

    (6) funcs -> func_type MODULE ID . OPEN_PAREN var_type ID CLOSE_PAREN vars block

    OPEN_PAREN      shift and go to state 36


state 31

    (5) main -> MAIN OPEN_PAREN CLOSE_PAREN block .

    $end            reduce using rule 5 (main -> MAIN OPEN_PAREN CLOSE_PAREN block .)


state 32

    (7) block -> OPEN_BRACES . statements CLOSE_BRACES
    (20) statements -> . assignment statements
    (21) statements -> . read statements
    (22) statements -> . write statements
    (23) statements -> . condition statements
    (24) statements -> . return statements
    (25) statements -> . func_call statements
    (26) statements -> . empty
    (27) assignment -> . ids ASSIGN expressions SEMICOLON
    (28) read -> . READ OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLON
    (31) write -> . WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN
    (32) write -> . WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN
    (36) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block
    (37) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block
    (38) condition -> . WHILE OPEN_PAREN expressions CLOSE_PAREN DO block
    (39) condition -> . FOR ids ASSIGN expressions TO expressions DO block
    (40) return -> . RETURN OPEN_PAREN exp CLOSE_PAREN SEMICOLON
    (41) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON
    (71) empty -> .
    (17) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (18) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (19) ids -> . ID

    READ            shift and go to state 46
    WRITE           shift and go to state 47
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    FOR             shift and go to state 50
    RETURN          shift and go to state 51
    ID              shift and go to state 52
    CLOSE_BRACES    reduce using rule 71 (empty -> .)

    statements                     shift and go to state 37
    assignment                     shift and go to state 38
    read                           shift and go to state 39
    write                          shift and go to state 40
    condition                      shift and go to state 41
    return                         shift and go to state 42
    func_call                      shift and go to state 43
    empty                          shift and go to state 44
    ids                            shift and go to state 45

state 33

    (14) var_comp -> var_type ids var_comp . SEMICOLON var_comp

    SEMICOLON       shift and go to state 53


state 34

    (17) ids -> ID OPEN_BRACKETS . CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (18) ids -> ID OPEN_BRACKETS . CT_INT CLOSE_BRACKETS

    CT_INT          shift and go to state 54


state 35

    (15) var_comp -> COMMA ids var_comp .

    MAIN            reduce using rule 15 (var_comp -> COMMA ids var_comp .)
    VOID            reduce using rule 15 (var_comp -> COMMA ids var_comp .)
    INT             reduce using rule 15 (var_comp -> COMMA ids var_comp .)
    FLOAT           reduce using rule 15 (var_comp -> COMMA ids var_comp .)
    CHAR            reduce using rule 15 (var_comp -> COMMA ids var_comp .)
    OPEN_BRACES     reduce using rule 15 (var_comp -> COMMA ids var_comp .)
    SEMICOLON       reduce using rule 15 (var_comp -> COMMA ids var_comp .)


state 36

    (6) funcs -> func_type MODULE ID OPEN_PAREN . var_type ID CLOSE_PAREN vars block
    (10) var_type -> . INT
    (11) var_type -> . FLOAT
    (12) var_type -> . CHAR

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15

    var_type                       shift and go to state 55

state 37

    (7) block -> OPEN_BRACES statements . CLOSE_BRACES

    CLOSE_BRACES    shift and go to state 56


state 38

    (20) statements -> assignment . statements
    (20) statements -> . assignment statements
    (21) statements -> . read statements
    (22) statements -> . write statements
    (23) statements -> . condition statements
    (24) statements -> . return statements
    (25) statements -> . func_call statements
    (26) statements -> . empty
    (27) assignment -> . ids ASSIGN expressions SEMICOLON
    (28) read -> . READ OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLON
    (31) write -> . WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN
    (32) write -> . WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN
    (36) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block
    (37) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block
    (38) condition -> . WHILE OPEN_PAREN expressions CLOSE_PAREN DO block
    (39) condition -> . FOR ids ASSIGN expressions TO expressions DO block
    (40) return -> . RETURN OPEN_PAREN exp CLOSE_PAREN SEMICOLON
    (41) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON
    (71) empty -> .
    (17) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (18) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (19) ids -> . ID

    READ            shift and go to state 46
    WRITE           shift and go to state 47
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    FOR             shift and go to state 50
    RETURN          shift and go to state 51
    ID              shift and go to state 52
    CLOSE_BRACES    reduce using rule 71 (empty -> .)

    assignment                     shift and go to state 38
    statements                     shift and go to state 57
    read                           shift and go to state 39
    write                          shift and go to state 40
    condition                      shift and go to state 41
    return                         shift and go to state 42
    func_call                      shift and go to state 43
    empty                          shift and go to state 44
    ids                            shift and go to state 45

state 39

    (21) statements -> read . statements
    (20) statements -> . assignment statements
    (21) statements -> . read statements
    (22) statements -> . write statements
    (23) statements -> . condition statements
    (24) statements -> . return statements
    (25) statements -> . func_call statements
    (26) statements -> . empty
    (27) assignment -> . ids ASSIGN expressions SEMICOLON
    (28) read -> . READ OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLON
    (31) write -> . WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN
    (32) write -> . WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN
    (36) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block
    (37) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block
    (38) condition -> . WHILE OPEN_PAREN expressions CLOSE_PAREN DO block
    (39) condition -> . FOR ids ASSIGN expressions TO expressions DO block
    (40) return -> . RETURN OPEN_PAREN exp CLOSE_PAREN SEMICOLON
    (41) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON
    (71) empty -> .
    (17) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (18) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (19) ids -> . ID

    READ            shift and go to state 46
    WRITE           shift and go to state 47
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    FOR             shift and go to state 50
    RETURN          shift and go to state 51
    ID              shift and go to state 52
    CLOSE_BRACES    reduce using rule 71 (empty -> .)

    read                           shift and go to state 39
    statements                     shift and go to state 58
    assignment                     shift and go to state 38
    write                          shift and go to state 40
    condition                      shift and go to state 41
    return                         shift and go to state 42
    func_call                      shift and go to state 43
    empty                          shift and go to state 44
    ids                            shift and go to state 45

state 40

    (22) statements -> write . statements
    (20) statements -> . assignment statements
    (21) statements -> . read statements
    (22) statements -> . write statements
    (23) statements -> . condition statements
    (24) statements -> . return statements
    (25) statements -> . func_call statements
    (26) statements -> . empty
    (27) assignment -> . ids ASSIGN expressions SEMICOLON
    (28) read -> . READ OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLON
    (31) write -> . WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN
    (32) write -> . WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN
    (36) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block
    (37) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block
    (38) condition -> . WHILE OPEN_PAREN expressions CLOSE_PAREN DO block
    (39) condition -> . FOR ids ASSIGN expressions TO expressions DO block
    (40) return -> . RETURN OPEN_PAREN exp CLOSE_PAREN SEMICOLON
    (41) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON
    (71) empty -> .
    (17) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (18) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (19) ids -> . ID

    READ            shift and go to state 46
    WRITE           shift and go to state 47
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    FOR             shift and go to state 50
    RETURN          shift and go to state 51
    ID              shift and go to state 52
    CLOSE_BRACES    reduce using rule 71 (empty -> .)

    write                          shift and go to state 40
    statements                     shift and go to state 59
    assignment                     shift and go to state 38
    read                           shift and go to state 39
    condition                      shift and go to state 41
    return                         shift and go to state 42
    func_call                      shift and go to state 43
    empty                          shift and go to state 44
    ids                            shift and go to state 45

state 41

    (23) statements -> condition . statements
    (20) statements -> . assignment statements
    (21) statements -> . read statements
    (22) statements -> . write statements
    (23) statements -> . condition statements
    (24) statements -> . return statements
    (25) statements -> . func_call statements
    (26) statements -> . empty
    (27) assignment -> . ids ASSIGN expressions SEMICOLON
    (28) read -> . READ OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLON
    (31) write -> . WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN
    (32) write -> . WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN
    (36) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block
    (37) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block
    (38) condition -> . WHILE OPEN_PAREN expressions CLOSE_PAREN DO block
    (39) condition -> . FOR ids ASSIGN expressions TO expressions DO block
    (40) return -> . RETURN OPEN_PAREN exp CLOSE_PAREN SEMICOLON
    (41) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON
    (71) empty -> .
    (17) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (18) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (19) ids -> . ID

    READ            shift and go to state 46
    WRITE           shift and go to state 47
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    FOR             shift and go to state 50
    RETURN          shift and go to state 51
    ID              shift and go to state 52
    CLOSE_BRACES    reduce using rule 71 (empty -> .)

    condition                      shift and go to state 41
    statements                     shift and go to state 60
    assignment                     shift and go to state 38
    read                           shift and go to state 39
    write                          shift and go to state 40
    return                         shift and go to state 42
    func_call                      shift and go to state 43
    empty                          shift and go to state 44
    ids                            shift and go to state 45

state 42

    (24) statements -> return . statements
    (20) statements -> . assignment statements
    (21) statements -> . read statements
    (22) statements -> . write statements
    (23) statements -> . condition statements
    (24) statements -> . return statements
    (25) statements -> . func_call statements
    (26) statements -> . empty
    (27) assignment -> . ids ASSIGN expressions SEMICOLON
    (28) read -> . READ OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLON
    (31) write -> . WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN
    (32) write -> . WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN
    (36) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block
    (37) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block
    (38) condition -> . WHILE OPEN_PAREN expressions CLOSE_PAREN DO block
    (39) condition -> . FOR ids ASSIGN expressions TO expressions DO block
    (40) return -> . RETURN OPEN_PAREN exp CLOSE_PAREN SEMICOLON
    (41) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON
    (71) empty -> .
    (17) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (18) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (19) ids -> . ID

    READ            shift and go to state 46
    WRITE           shift and go to state 47
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    FOR             shift and go to state 50
    RETURN          shift and go to state 51
    ID              shift and go to state 52
    CLOSE_BRACES    reduce using rule 71 (empty -> .)

    return                         shift and go to state 42
    statements                     shift and go to state 61
    assignment                     shift and go to state 38
    read                           shift and go to state 39
    write                          shift and go to state 40
    condition                      shift and go to state 41
    func_call                      shift and go to state 43
    empty                          shift and go to state 44
    ids                            shift and go to state 45

state 43

    (25) statements -> func_call . statements
    (20) statements -> . assignment statements
    (21) statements -> . read statements
    (22) statements -> . write statements
    (23) statements -> . condition statements
    (24) statements -> . return statements
    (25) statements -> . func_call statements
    (26) statements -> . empty
    (27) assignment -> . ids ASSIGN expressions SEMICOLON
    (28) read -> . READ OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLON
    (31) write -> . WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN
    (32) write -> . WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN
    (36) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block
    (37) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block
    (38) condition -> . WHILE OPEN_PAREN expressions CLOSE_PAREN DO block
    (39) condition -> . FOR ids ASSIGN expressions TO expressions DO block
    (40) return -> . RETURN OPEN_PAREN exp CLOSE_PAREN SEMICOLON
    (41) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON
    (71) empty -> .
    (17) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (18) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (19) ids -> . ID

    READ            shift and go to state 46
    WRITE           shift and go to state 47
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    FOR             shift and go to state 50
    RETURN          shift and go to state 51
    ID              shift and go to state 52
    CLOSE_BRACES    reduce using rule 71 (empty -> .)

    func_call                      shift and go to state 43
    statements                     shift and go to state 62
    assignment                     shift and go to state 38
    read                           shift and go to state 39
    write                          shift and go to state 40
    condition                      shift and go to state 41
    return                         shift and go to state 42
    empty                          shift and go to state 44
    ids                            shift and go to state 45

state 44

    (26) statements -> empty .

    CLOSE_BRACES    reduce using rule 26 (statements -> empty .)


state 45

    (27) assignment -> ids . ASSIGN expressions SEMICOLON

    ASSIGN          shift and go to state 63


state 46

    (28) read -> READ . OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLON

    OPEN_PAREN      shift and go to state 64


state 47

    (31) write -> WRITE . OPEN_PAREN CT_STRING write_comp CLOSE_PAREN
    (32) write -> WRITE . OPEN_PAREN expressions write_comp CLOSE_PAREN

    OPEN_PAREN      shift and go to state 65


state 48

    (36) condition -> IF . OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block
    (37) condition -> IF . OPEN_PAREN expressions CLOSE_PAREN THEN block

    OPEN_PAREN      shift and go to state 66


state 49

    (38) condition -> WHILE . OPEN_PAREN expressions CLOSE_PAREN DO block

    OPEN_PAREN      shift and go to state 67


state 50

    (39) condition -> FOR . ids ASSIGN expressions TO expressions DO block
    (17) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (18) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (19) ids -> . ID

    ID              shift and go to state 28

    ids                            shift and go to state 68

state 51

    (40) return -> RETURN . OPEN_PAREN exp CLOSE_PAREN SEMICOLON

    OPEN_PAREN      shift and go to state 69


state 52

    (41) func_call -> ID . OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON
    (17) ids -> ID . OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (18) ids -> ID . OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (19) ids -> ID .

    OPEN_PAREN      shift and go to state 70
    OPEN_BRACKETS   shift and go to state 34
    ASSIGN          reduce using rule 19 (ids -> ID .)


state 53

    (14) var_comp -> var_type ids var_comp SEMICOLON . var_comp
    (14) var_comp -> . var_type ids var_comp SEMICOLON var_comp
    (15) var_comp -> . COMMA ids var_comp
    (16) var_comp -> . empty
    (10) var_type -> . INT
    (11) var_type -> . FLOAT
    (12) var_type -> . CHAR
    (71) empty -> .

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    COMMA           shift and go to state 22
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15
    MAIN            reduce using rule 71 (empty -> .)
    VOID            reduce using rule 71 (empty -> .)
    OPEN_BRACES     reduce using rule 71 (empty -> .)
    SEMICOLON       reduce using rule 71 (empty -> .)

  ! INT             [ reduce using rule 71 (empty -> .) ]
  ! FLOAT           [ reduce using rule 71 (empty -> .) ]
  ! CHAR            [ reduce using rule 71 (empty -> .) ]

    var_type                       shift and go to state 21
    var_comp                       shift and go to state 71
    empty                          shift and go to state 23

state 54

    (17) ids -> ID OPEN_BRACKETS CT_INT . CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (18) ids -> ID OPEN_BRACKETS CT_INT . CLOSE_BRACKETS

    CLOSE_BRACKETS  shift and go to state 72


state 55

    (6) funcs -> func_type MODULE ID OPEN_PAREN var_type . ID CLOSE_PAREN vars block

    ID              shift and go to state 73


state 56

    (7) block -> OPEN_BRACES statements CLOSE_BRACES .

    $end            reduce using rule 7 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    MAIN            reduce using rule 7 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    ELSE            reduce using rule 7 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    READ            reduce using rule 7 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    WRITE           reduce using rule 7 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    IF              reduce using rule 7 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    WHILE           reduce using rule 7 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    FOR             reduce using rule 7 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    RETURN          reduce using rule 7 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    ID              reduce using rule 7 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    CLOSE_BRACES    reduce using rule 7 (block -> OPEN_BRACES statements CLOSE_BRACES .)


state 57

    (20) statements -> assignment statements .

    CLOSE_BRACES    reduce using rule 20 (statements -> assignment statements .)


state 58

    (21) statements -> read statements .

    CLOSE_BRACES    reduce using rule 21 (statements -> read statements .)


state 59

    (22) statements -> write statements .

    CLOSE_BRACES    reduce using rule 22 (statements -> write statements .)


state 60

    (23) statements -> condition statements .

    CLOSE_BRACES    reduce using rule 23 (statements -> condition statements .)


state 61

    (24) statements -> return statements .

    CLOSE_BRACES    reduce using rule 24 (statements -> return statements .)


state 62

    (25) statements -> func_call statements .

    CLOSE_BRACES    reduce using rule 25 (statements -> func_call statements .)


state 63

    (27) assignment -> ids ASSIGN . expressions SEMICOLON
    (45) expressions -> . exp expressions_op exp
    (46) expressions -> . exp
    (53) exp -> . term exp_comp
    (57) term -> . factor term_comp
    (61) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (62) factor -> . factor_comp ID
    (63) factor -> . factor_comp func_call
    (64) factor -> . ID
    (65) factor -> . func_call
    (66) factor -> . CT_INT
    (67) factor -> . CT_FLOAT
    (68) factor -> . CT_CHAR
    (69) factor_comp -> . PLUS
    (70) factor_comp -> . MINUS
    (41) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    OPEN_PAREN      shift and go to state 78
    ID              shift and go to state 80
    CT_INT          shift and go to state 82
    CT_FLOAT        shift and go to state 83
    CT_CHAR         shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86

    expressions                    shift and go to state 74
    exp                            shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    factor_comp                    shift and go to state 79
    func_call                      shift and go to state 81

state 64

    (28) read -> READ OPEN_PAREN . ids read_comp CLOSE_PAREN SEMICOLON
    (17) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (18) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (19) ids -> . ID

    ID              shift and go to state 28

    ids                            shift and go to state 87

state 65

    (31) write -> WRITE OPEN_PAREN . CT_STRING write_comp CLOSE_PAREN
    (32) write -> WRITE OPEN_PAREN . expressions write_comp CLOSE_PAREN
    (45) expressions -> . exp expressions_op exp
    (46) expressions -> . exp
    (53) exp -> . term exp_comp
    (57) term -> . factor term_comp
    (61) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (62) factor -> . factor_comp ID
    (63) factor -> . factor_comp func_call
    (64) factor -> . ID
    (65) factor -> . func_call
    (66) factor -> . CT_INT
    (67) factor -> . CT_FLOAT
    (68) factor -> . CT_CHAR
    (69) factor_comp -> . PLUS
    (70) factor_comp -> . MINUS
    (41) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    CT_STRING       shift and go to state 88
    OPEN_PAREN      shift and go to state 78
    ID              shift and go to state 80
    CT_INT          shift and go to state 82
    CT_FLOAT        shift and go to state 83
    CT_CHAR         shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86

    expressions                    shift and go to state 89
    exp                            shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    factor_comp                    shift and go to state 79
    func_call                      shift and go to state 81

state 66

    (36) condition -> IF OPEN_PAREN . expressions CLOSE_PAREN THEN block ELSE block
    (37) condition -> IF OPEN_PAREN . expressions CLOSE_PAREN THEN block
    (45) expressions -> . exp expressions_op exp
    (46) expressions -> . exp
    (53) exp -> . term exp_comp
    (57) term -> . factor term_comp
    (61) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (62) factor -> . factor_comp ID
    (63) factor -> . factor_comp func_call
    (64) factor -> . ID
    (65) factor -> . func_call
    (66) factor -> . CT_INT
    (67) factor -> . CT_FLOAT
    (68) factor -> . CT_CHAR
    (69) factor_comp -> . PLUS
    (70) factor_comp -> . MINUS
    (41) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    OPEN_PAREN      shift and go to state 78
    ID              shift and go to state 80
    CT_INT          shift and go to state 82
    CT_FLOAT        shift and go to state 83
    CT_CHAR         shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86

    expressions                    shift and go to state 90
    exp                            shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    factor_comp                    shift and go to state 79
    func_call                      shift and go to state 81

state 67

    (38) condition -> WHILE OPEN_PAREN . expressions CLOSE_PAREN DO block
    (45) expressions -> . exp expressions_op exp
    (46) expressions -> . exp
    (53) exp -> . term exp_comp
    (57) term -> . factor term_comp
    (61) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (62) factor -> . factor_comp ID
    (63) factor -> . factor_comp func_call
    (64) factor -> . ID
    (65) factor -> . func_call
    (66) factor -> . CT_INT
    (67) factor -> . CT_FLOAT
    (68) factor -> . CT_CHAR
    (69) factor_comp -> . PLUS
    (70) factor_comp -> . MINUS
    (41) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    OPEN_PAREN      shift and go to state 78
    ID              shift and go to state 80
    CT_INT          shift and go to state 82
    CT_FLOAT        shift and go to state 83
    CT_CHAR         shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86

    expressions                    shift and go to state 91
    exp                            shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    factor_comp                    shift and go to state 79
    func_call                      shift and go to state 81

state 68

    (39) condition -> FOR ids . ASSIGN expressions TO expressions DO block

    ASSIGN          shift and go to state 92


state 69

    (40) return -> RETURN OPEN_PAREN . exp CLOSE_PAREN SEMICOLON
    (53) exp -> . term exp_comp
    (57) term -> . factor term_comp
    (61) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (62) factor -> . factor_comp ID
    (63) factor -> . factor_comp func_call
    (64) factor -> . ID
    (65) factor -> . func_call
    (66) factor -> . CT_INT
    (67) factor -> . CT_FLOAT
    (68) factor -> . CT_CHAR
    (69) factor_comp -> . PLUS
    (70) factor_comp -> . MINUS
    (41) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    OPEN_PAREN      shift and go to state 78
    ID              shift and go to state 80
    CT_INT          shift and go to state 82
    CT_FLOAT        shift and go to state 83
    CT_CHAR         shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86

    exp                            shift and go to state 93
    term                           shift and go to state 76
    factor                         shift and go to state 77
    factor_comp                    shift and go to state 79
    func_call                      shift and go to state 81

state 70

    (41) func_call -> ID OPEN_PAREN . func_call_comp CLOSE_PAREN SEMICOLON
    (42) func_call_comp -> . ID func_call_comp
    (43) func_call_comp -> . COMMA ID func_call_comp
    (44) func_call_comp -> . expressions
    (45) expressions -> . exp expressions_op exp
    (46) expressions -> . exp
    (53) exp -> . term exp_comp
    (57) term -> . factor term_comp
    (61) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (62) factor -> . factor_comp ID
    (63) factor -> . factor_comp func_call
    (64) factor -> . ID
    (65) factor -> . func_call
    (66) factor -> . CT_INT
    (67) factor -> . CT_FLOAT
    (68) factor -> . CT_CHAR
    (69) factor_comp -> . PLUS
    (70) factor_comp -> . MINUS
    (41) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    ID              shift and go to state 94
    COMMA           shift and go to state 96
    OPEN_PAREN      shift and go to state 78
    CT_INT          shift and go to state 82
    CT_FLOAT        shift and go to state 83
    CT_CHAR         shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86

    func_call_comp                 shift and go to state 95
    expressions                    shift and go to state 97
    exp                            shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    factor_comp                    shift and go to state 79
    func_call                      shift and go to state 81

state 71

    (14) var_comp -> var_type ids var_comp SEMICOLON var_comp .

    MAIN            reduce using rule 14 (var_comp -> var_type ids var_comp SEMICOLON var_comp .)
    VOID            reduce using rule 14 (var_comp -> var_type ids var_comp SEMICOLON var_comp .)
    INT             reduce using rule 14 (var_comp -> var_type ids var_comp SEMICOLON var_comp .)
    FLOAT           reduce using rule 14 (var_comp -> var_type ids var_comp SEMICOLON var_comp .)
    CHAR            reduce using rule 14 (var_comp -> var_type ids var_comp SEMICOLON var_comp .)
    OPEN_BRACES     reduce using rule 14 (var_comp -> var_type ids var_comp SEMICOLON var_comp .)
    SEMICOLON       reduce using rule 14 (var_comp -> var_type ids var_comp SEMICOLON var_comp .)


state 72

    (17) ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS . OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (18) ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS .

    OPEN_BRACKETS   shift and go to state 98
    COMMA           reduce using rule 18 (ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS .)
    INT             reduce using rule 18 (ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS .)
    FLOAT           reduce using rule 18 (ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS .)
    CHAR            reduce using rule 18 (ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS .)
    SEMICOLON       reduce using rule 18 (ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS .)
    MAIN            reduce using rule 18 (ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS .)
    VOID            reduce using rule 18 (ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS .)
    OPEN_BRACES     reduce using rule 18 (ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS .)
    ASSIGN          reduce using rule 18 (ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS .)
    CLOSE_PAREN     reduce using rule 18 (ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS .)


state 73

    (6) funcs -> func_type MODULE ID OPEN_PAREN var_type ID . CLOSE_PAREN vars block

    CLOSE_PAREN     shift and go to state 99


state 74

    (27) assignment -> ids ASSIGN expressions . SEMICOLON

    SEMICOLON       shift and go to state 100


state 75

    (45) expressions -> exp . expressions_op exp
    (46) expressions -> exp .
    (47) expressions_op -> . LESS_THAN
    (48) expressions_op -> . MORE_THAN
    (49) expressions_op -> . EQUALS
    (50) expressions_op -> . NOT_EQUALS
    (51) expressions_op -> . AND
    (52) expressions_op -> . OR

    SEMICOLON       reduce using rule 46 (expressions -> exp .)
    COMMA           reduce using rule 46 (expressions -> exp .)
    CLOSE_PAREN     reduce using rule 46 (expressions -> exp .)
    TO              reduce using rule 46 (expressions -> exp .)
    DO              reduce using rule 46 (expressions -> exp .)
    LESS_THAN       shift and go to state 102
    MORE_THAN       shift and go to state 103
    EQUALS          shift and go to state 104
    NOT_EQUALS      shift and go to state 105
    AND             shift and go to state 106
    OR              shift and go to state 107

    expressions_op                 shift and go to state 101

state 76

    (53) exp -> term . exp_comp
    (54) exp_comp -> . PLUS exp
    (55) exp_comp -> . MINUS exp
    (56) exp_comp -> . empty
    (71) empty -> .

    PLUS            shift and go to state 109
    MINUS           shift and go to state 110
    LESS_THAN       reduce using rule 71 (empty -> .)
    MORE_THAN       reduce using rule 71 (empty -> .)
    EQUALS          reduce using rule 71 (empty -> .)
    NOT_EQUALS      reduce using rule 71 (empty -> .)
    AND             reduce using rule 71 (empty -> .)
    OR              reduce using rule 71 (empty -> .)
    SEMICOLON       reduce using rule 71 (empty -> .)
    COMMA           reduce using rule 71 (empty -> .)
    CLOSE_PAREN     reduce using rule 71 (empty -> .)
    TO              reduce using rule 71 (empty -> .)
    DO              reduce using rule 71 (empty -> .)

    exp_comp                       shift and go to state 108
    empty                          shift and go to state 111

state 77

    (57) term -> factor . term_comp
    (58) term_comp -> . MULTIPLIES term
    (59) term_comp -> . DIVIDE term
    (60) term_comp -> . empty
    (71) empty -> .

    MULTIPLIES      shift and go to state 113
    DIVIDE          shift and go to state 114
    PLUS            reduce using rule 71 (empty -> .)
    MINUS           reduce using rule 71 (empty -> .)
    LESS_THAN       reduce using rule 71 (empty -> .)
    MORE_THAN       reduce using rule 71 (empty -> .)
    EQUALS          reduce using rule 71 (empty -> .)
    NOT_EQUALS      reduce using rule 71 (empty -> .)
    AND             reduce using rule 71 (empty -> .)
    OR              reduce using rule 71 (empty -> .)
    SEMICOLON       reduce using rule 71 (empty -> .)
    COMMA           reduce using rule 71 (empty -> .)
    CLOSE_PAREN     reduce using rule 71 (empty -> .)
    TO              reduce using rule 71 (empty -> .)
    DO              reduce using rule 71 (empty -> .)

    term_comp                      shift and go to state 112
    empty                          shift and go to state 115

state 78

    (61) factor -> OPEN_PAREN . expressions CLOSE_PAREN
    (45) expressions -> . exp expressions_op exp
    (46) expressions -> . exp
    (53) exp -> . term exp_comp
    (57) term -> . factor term_comp
    (61) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (62) factor -> . factor_comp ID
    (63) factor -> . factor_comp func_call
    (64) factor -> . ID
    (65) factor -> . func_call
    (66) factor -> . CT_INT
    (67) factor -> . CT_FLOAT
    (68) factor -> . CT_CHAR
    (69) factor_comp -> . PLUS
    (70) factor_comp -> . MINUS
    (41) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    OPEN_PAREN      shift and go to state 78
    ID              shift and go to state 80
    CT_INT          shift and go to state 82
    CT_FLOAT        shift and go to state 83
    CT_CHAR         shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86

    expressions                    shift and go to state 116
    exp                            shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    factor_comp                    shift and go to state 79
    func_call                      shift and go to state 81

state 79

    (62) factor -> factor_comp . ID
    (63) factor -> factor_comp . func_call
    (41) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    ID              shift and go to state 117

    func_call                      shift and go to state 118

state 80

    (64) factor -> ID .
    (41) func_call -> ID . OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    MULTIPLIES      reduce using rule 64 (factor -> ID .)
    DIVIDE          reduce using rule 64 (factor -> ID .)
    PLUS            reduce using rule 64 (factor -> ID .)
    MINUS           reduce using rule 64 (factor -> ID .)
    LESS_THAN       reduce using rule 64 (factor -> ID .)
    MORE_THAN       reduce using rule 64 (factor -> ID .)
    EQUALS          reduce using rule 64 (factor -> ID .)
    NOT_EQUALS      reduce using rule 64 (factor -> ID .)
    AND             reduce using rule 64 (factor -> ID .)
    OR              reduce using rule 64 (factor -> ID .)
    SEMICOLON       reduce using rule 64 (factor -> ID .)
    COMMA           reduce using rule 64 (factor -> ID .)
    CLOSE_PAREN     reduce using rule 64 (factor -> ID .)
    TO              reduce using rule 64 (factor -> ID .)
    DO              reduce using rule 64 (factor -> ID .)
    OPEN_PAREN      shift and go to state 70


state 81

    (65) factor -> func_call .

    MULTIPLIES      reduce using rule 65 (factor -> func_call .)
    DIVIDE          reduce using rule 65 (factor -> func_call .)
    PLUS            reduce using rule 65 (factor -> func_call .)
    MINUS           reduce using rule 65 (factor -> func_call .)
    LESS_THAN       reduce using rule 65 (factor -> func_call .)
    MORE_THAN       reduce using rule 65 (factor -> func_call .)
    EQUALS          reduce using rule 65 (factor -> func_call .)
    NOT_EQUALS      reduce using rule 65 (factor -> func_call .)
    AND             reduce using rule 65 (factor -> func_call .)
    OR              reduce using rule 65 (factor -> func_call .)
    SEMICOLON       reduce using rule 65 (factor -> func_call .)
    COMMA           reduce using rule 65 (factor -> func_call .)
    CLOSE_PAREN     reduce using rule 65 (factor -> func_call .)
    TO              reduce using rule 65 (factor -> func_call .)
    DO              reduce using rule 65 (factor -> func_call .)


state 82

    (66) factor -> CT_INT .

    MULTIPLIES      reduce using rule 66 (factor -> CT_INT .)
    DIVIDE          reduce using rule 66 (factor -> CT_INT .)
    PLUS            reduce using rule 66 (factor -> CT_INT .)
    MINUS           reduce using rule 66 (factor -> CT_INT .)
    LESS_THAN       reduce using rule 66 (factor -> CT_INT .)
    MORE_THAN       reduce using rule 66 (factor -> CT_INT .)
    EQUALS          reduce using rule 66 (factor -> CT_INT .)
    NOT_EQUALS      reduce using rule 66 (factor -> CT_INT .)
    AND             reduce using rule 66 (factor -> CT_INT .)
    OR              reduce using rule 66 (factor -> CT_INT .)
    SEMICOLON       reduce using rule 66 (factor -> CT_INT .)
    COMMA           reduce using rule 66 (factor -> CT_INT .)
    CLOSE_PAREN     reduce using rule 66 (factor -> CT_INT .)
    TO              reduce using rule 66 (factor -> CT_INT .)
    DO              reduce using rule 66 (factor -> CT_INT .)


state 83

    (67) factor -> CT_FLOAT .

    MULTIPLIES      reduce using rule 67 (factor -> CT_FLOAT .)
    DIVIDE          reduce using rule 67 (factor -> CT_FLOAT .)
    PLUS            reduce using rule 67 (factor -> CT_FLOAT .)
    MINUS           reduce using rule 67 (factor -> CT_FLOAT .)
    LESS_THAN       reduce using rule 67 (factor -> CT_FLOAT .)
    MORE_THAN       reduce using rule 67 (factor -> CT_FLOAT .)
    EQUALS          reduce using rule 67 (factor -> CT_FLOAT .)
    NOT_EQUALS      reduce using rule 67 (factor -> CT_FLOAT .)
    AND             reduce using rule 67 (factor -> CT_FLOAT .)
    OR              reduce using rule 67 (factor -> CT_FLOAT .)
    SEMICOLON       reduce using rule 67 (factor -> CT_FLOAT .)
    COMMA           reduce using rule 67 (factor -> CT_FLOAT .)
    CLOSE_PAREN     reduce using rule 67 (factor -> CT_FLOAT .)
    TO              reduce using rule 67 (factor -> CT_FLOAT .)
    DO              reduce using rule 67 (factor -> CT_FLOAT .)


state 84

    (68) factor -> CT_CHAR .

    MULTIPLIES      reduce using rule 68 (factor -> CT_CHAR .)
    DIVIDE          reduce using rule 68 (factor -> CT_CHAR .)
    PLUS            reduce using rule 68 (factor -> CT_CHAR .)
    MINUS           reduce using rule 68 (factor -> CT_CHAR .)
    LESS_THAN       reduce using rule 68 (factor -> CT_CHAR .)
    MORE_THAN       reduce using rule 68 (factor -> CT_CHAR .)
    EQUALS          reduce using rule 68 (factor -> CT_CHAR .)
    NOT_EQUALS      reduce using rule 68 (factor -> CT_CHAR .)
    AND             reduce using rule 68 (factor -> CT_CHAR .)
    OR              reduce using rule 68 (factor -> CT_CHAR .)
    SEMICOLON       reduce using rule 68 (factor -> CT_CHAR .)
    COMMA           reduce using rule 68 (factor -> CT_CHAR .)
    CLOSE_PAREN     reduce using rule 68 (factor -> CT_CHAR .)
    TO              reduce using rule 68 (factor -> CT_CHAR .)
    DO              reduce using rule 68 (factor -> CT_CHAR .)


state 85

    (69) factor_comp -> PLUS .

    ID              reduce using rule 69 (factor_comp -> PLUS .)


state 86

    (70) factor_comp -> MINUS .

    ID              reduce using rule 70 (factor_comp -> MINUS .)


state 87

    (28) read -> READ OPEN_PAREN ids . read_comp CLOSE_PAREN SEMICOLON
    (29) read_comp -> . COMMA ids read_comp
    (30) read_comp -> . empty
    (71) empty -> .

    COMMA           shift and go to state 120
    CLOSE_PAREN     reduce using rule 71 (empty -> .)

    read_comp                      shift and go to state 119
    empty                          shift and go to state 121

state 88

    (31) write -> WRITE OPEN_PAREN CT_STRING . write_comp CLOSE_PAREN
    (33) write_comp -> . COMMA CT_STRING write_comp
    (34) write_comp -> . COMMA expressions write_comp
    (35) write_comp -> . empty
    (71) empty -> .

    COMMA           shift and go to state 123
    CLOSE_PAREN     reduce using rule 71 (empty -> .)

    write_comp                     shift and go to state 122
    empty                          shift and go to state 124

state 89

    (32) write -> WRITE OPEN_PAREN expressions . write_comp CLOSE_PAREN
    (33) write_comp -> . COMMA CT_STRING write_comp
    (34) write_comp -> . COMMA expressions write_comp
    (35) write_comp -> . empty
    (71) empty -> .

    COMMA           shift and go to state 123
    CLOSE_PAREN     reduce using rule 71 (empty -> .)

    write_comp                     shift and go to state 125
    empty                          shift and go to state 124

state 90

    (36) condition -> IF OPEN_PAREN expressions . CLOSE_PAREN THEN block ELSE block
    (37) condition -> IF OPEN_PAREN expressions . CLOSE_PAREN THEN block

    CLOSE_PAREN     shift and go to state 126


state 91

    (38) condition -> WHILE OPEN_PAREN expressions . CLOSE_PAREN DO block

    CLOSE_PAREN     shift and go to state 127


state 92

    (39) condition -> FOR ids ASSIGN . expressions TO expressions DO block
    (45) expressions -> . exp expressions_op exp
    (46) expressions -> . exp
    (53) exp -> . term exp_comp
    (57) term -> . factor term_comp
    (61) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (62) factor -> . factor_comp ID
    (63) factor -> . factor_comp func_call
    (64) factor -> . ID
    (65) factor -> . func_call
    (66) factor -> . CT_INT
    (67) factor -> . CT_FLOAT
    (68) factor -> . CT_CHAR
    (69) factor_comp -> . PLUS
    (70) factor_comp -> . MINUS
    (41) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    OPEN_PAREN      shift and go to state 78
    ID              shift and go to state 80
    CT_INT          shift and go to state 82
    CT_FLOAT        shift and go to state 83
    CT_CHAR         shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86

    expressions                    shift and go to state 128
    exp                            shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    factor_comp                    shift and go to state 79
    func_call                      shift and go to state 81

state 93

    (40) return -> RETURN OPEN_PAREN exp . CLOSE_PAREN SEMICOLON

    CLOSE_PAREN     shift and go to state 129


state 94

    (42) func_call_comp -> ID . func_call_comp
    (64) factor -> ID .
    (41) func_call -> ID . OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON
    (42) func_call_comp -> . ID func_call_comp
    (43) func_call_comp -> . COMMA ID func_call_comp
    (44) func_call_comp -> . expressions
    (45) expressions -> . exp expressions_op exp
    (46) expressions -> . exp
    (53) exp -> . term exp_comp
    (57) term -> . factor term_comp
    (61) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (62) factor -> . factor_comp ID
    (63) factor -> . factor_comp func_call
    (64) factor -> . ID
    (65) factor -> . func_call
    (66) factor -> . CT_INT
    (67) factor -> . CT_FLOAT
    (68) factor -> . CT_CHAR
    (69) factor_comp -> . PLUS
    (70) factor_comp -> . MINUS
    (41) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    MULTIPLIES      reduce using rule 64 (factor -> ID .)
    DIVIDE          reduce using rule 64 (factor -> ID .)
    LESS_THAN       reduce using rule 64 (factor -> ID .)
    MORE_THAN       reduce using rule 64 (factor -> ID .)
    EQUALS          reduce using rule 64 (factor -> ID .)
    NOT_EQUALS      reduce using rule 64 (factor -> ID .)
    AND             reduce using rule 64 (factor -> ID .)
    OR              reduce using rule 64 (factor -> ID .)
    CLOSE_PAREN     reduce using rule 64 (factor -> ID .)
    OPEN_PAREN      shift and go to state 131
    ID              shift and go to state 94
    COMMA           shift and go to state 96
    CT_INT          shift and go to state 82
    CT_FLOAT        shift and go to state 83
    CT_CHAR         shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86

  ! PLUS            [ reduce using rule 64 (factor -> ID .) ]
  ! MINUS           [ reduce using rule 64 (factor -> ID .) ]

    func_call_comp                 shift and go to state 130
    expressions                    shift and go to state 97
    exp                            shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    factor_comp                    shift and go to state 79
    func_call                      shift and go to state 81

state 95

    (41) func_call -> ID OPEN_PAREN func_call_comp . CLOSE_PAREN SEMICOLON

    CLOSE_PAREN     shift and go to state 132


state 96

    (43) func_call_comp -> COMMA . ID func_call_comp

    ID              shift and go to state 133


state 97

    (44) func_call_comp -> expressions .

    CLOSE_PAREN     reduce using rule 44 (func_call_comp -> expressions .)


state 98

    (17) ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS . CT_INT CLOSE_BRACKETS

    CT_INT          shift and go to state 134


state 99

    (6) funcs -> func_type MODULE ID OPEN_PAREN var_type ID CLOSE_PAREN . vars block
    (13) vars -> . VARS var_comp

    VARS            shift and go to state 9

    vars                           shift and go to state 135

state 100

    (27) assignment -> ids ASSIGN expressions SEMICOLON .

    READ            reduce using rule 27 (assignment -> ids ASSIGN expressions SEMICOLON .)
    WRITE           reduce using rule 27 (assignment -> ids ASSIGN expressions SEMICOLON .)
    IF              reduce using rule 27 (assignment -> ids ASSIGN expressions SEMICOLON .)
    WHILE           reduce using rule 27 (assignment -> ids ASSIGN expressions SEMICOLON .)
    FOR             reduce using rule 27 (assignment -> ids ASSIGN expressions SEMICOLON .)
    RETURN          reduce using rule 27 (assignment -> ids ASSIGN expressions SEMICOLON .)
    ID              reduce using rule 27 (assignment -> ids ASSIGN expressions SEMICOLON .)
    CLOSE_BRACES    reduce using rule 27 (assignment -> ids ASSIGN expressions SEMICOLON .)


state 101

    (45) expressions -> exp expressions_op . exp
    (53) exp -> . term exp_comp
    (57) term -> . factor term_comp
    (61) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (62) factor -> . factor_comp ID
    (63) factor -> . factor_comp func_call
    (64) factor -> . ID
    (65) factor -> . func_call
    (66) factor -> . CT_INT
    (67) factor -> . CT_FLOAT
    (68) factor -> . CT_CHAR
    (69) factor_comp -> . PLUS
    (70) factor_comp -> . MINUS
    (41) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    OPEN_PAREN      shift and go to state 78
    ID              shift and go to state 80
    CT_INT          shift and go to state 82
    CT_FLOAT        shift and go to state 83
    CT_CHAR         shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86

    exp                            shift and go to state 136
    term                           shift and go to state 76
    factor                         shift and go to state 77
    factor_comp                    shift and go to state 79
    func_call                      shift and go to state 81

state 102

    (47) expressions_op -> LESS_THAN .

    OPEN_PAREN      reduce using rule 47 (expressions_op -> LESS_THAN .)
    ID              reduce using rule 47 (expressions_op -> LESS_THAN .)
    CT_INT          reduce using rule 47 (expressions_op -> LESS_THAN .)
    CT_FLOAT        reduce using rule 47 (expressions_op -> LESS_THAN .)
    CT_CHAR         reduce using rule 47 (expressions_op -> LESS_THAN .)
    PLUS            reduce using rule 47 (expressions_op -> LESS_THAN .)
    MINUS           reduce using rule 47 (expressions_op -> LESS_THAN .)


state 103

    (48) expressions_op -> MORE_THAN .

    OPEN_PAREN      reduce using rule 48 (expressions_op -> MORE_THAN .)
    ID              reduce using rule 48 (expressions_op -> MORE_THAN .)
    CT_INT          reduce using rule 48 (expressions_op -> MORE_THAN .)
    CT_FLOAT        reduce using rule 48 (expressions_op -> MORE_THAN .)
    CT_CHAR         reduce using rule 48 (expressions_op -> MORE_THAN .)
    PLUS            reduce using rule 48 (expressions_op -> MORE_THAN .)
    MINUS           reduce using rule 48 (expressions_op -> MORE_THAN .)


state 104

    (49) expressions_op -> EQUALS .

    OPEN_PAREN      reduce using rule 49 (expressions_op -> EQUALS .)
    ID              reduce using rule 49 (expressions_op -> EQUALS .)
    CT_INT          reduce using rule 49 (expressions_op -> EQUALS .)
    CT_FLOAT        reduce using rule 49 (expressions_op -> EQUALS .)
    CT_CHAR         reduce using rule 49 (expressions_op -> EQUALS .)
    PLUS            reduce using rule 49 (expressions_op -> EQUALS .)
    MINUS           reduce using rule 49 (expressions_op -> EQUALS .)


state 105

    (50) expressions_op -> NOT_EQUALS .

    OPEN_PAREN      reduce using rule 50 (expressions_op -> NOT_EQUALS .)
    ID              reduce using rule 50 (expressions_op -> NOT_EQUALS .)
    CT_INT          reduce using rule 50 (expressions_op -> NOT_EQUALS .)
    CT_FLOAT        reduce using rule 50 (expressions_op -> NOT_EQUALS .)
    CT_CHAR         reduce using rule 50 (expressions_op -> NOT_EQUALS .)
    PLUS            reduce using rule 50 (expressions_op -> NOT_EQUALS .)
    MINUS           reduce using rule 50 (expressions_op -> NOT_EQUALS .)


state 106

    (51) expressions_op -> AND .

    OPEN_PAREN      reduce using rule 51 (expressions_op -> AND .)
    ID              reduce using rule 51 (expressions_op -> AND .)
    CT_INT          reduce using rule 51 (expressions_op -> AND .)
    CT_FLOAT        reduce using rule 51 (expressions_op -> AND .)
    CT_CHAR         reduce using rule 51 (expressions_op -> AND .)
    PLUS            reduce using rule 51 (expressions_op -> AND .)
    MINUS           reduce using rule 51 (expressions_op -> AND .)


state 107

    (52) expressions_op -> OR .

    OPEN_PAREN      reduce using rule 52 (expressions_op -> OR .)
    ID              reduce using rule 52 (expressions_op -> OR .)
    CT_INT          reduce using rule 52 (expressions_op -> OR .)
    CT_FLOAT        reduce using rule 52 (expressions_op -> OR .)
    CT_CHAR         reduce using rule 52 (expressions_op -> OR .)
    PLUS            reduce using rule 52 (expressions_op -> OR .)
    MINUS           reduce using rule 52 (expressions_op -> OR .)


state 108

    (53) exp -> term exp_comp .

    LESS_THAN       reduce using rule 53 (exp -> term exp_comp .)
    MORE_THAN       reduce using rule 53 (exp -> term exp_comp .)
    EQUALS          reduce using rule 53 (exp -> term exp_comp .)
    NOT_EQUALS      reduce using rule 53 (exp -> term exp_comp .)
    AND             reduce using rule 53 (exp -> term exp_comp .)
    OR              reduce using rule 53 (exp -> term exp_comp .)
    SEMICOLON       reduce using rule 53 (exp -> term exp_comp .)
    COMMA           reduce using rule 53 (exp -> term exp_comp .)
    CLOSE_PAREN     reduce using rule 53 (exp -> term exp_comp .)
    TO              reduce using rule 53 (exp -> term exp_comp .)
    DO              reduce using rule 53 (exp -> term exp_comp .)


state 109

    (54) exp_comp -> PLUS . exp
    (53) exp -> . term exp_comp
    (57) term -> . factor term_comp
    (61) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (62) factor -> . factor_comp ID
    (63) factor -> . factor_comp func_call
    (64) factor -> . ID
    (65) factor -> . func_call
    (66) factor -> . CT_INT
    (67) factor -> . CT_FLOAT
    (68) factor -> . CT_CHAR
    (69) factor_comp -> . PLUS
    (70) factor_comp -> . MINUS
    (41) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    OPEN_PAREN      shift and go to state 78
    ID              shift and go to state 80
    CT_INT          shift and go to state 82
    CT_FLOAT        shift and go to state 83
    CT_CHAR         shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86

    exp                            shift and go to state 137
    term                           shift and go to state 76
    factor                         shift and go to state 77
    factor_comp                    shift and go to state 79
    func_call                      shift and go to state 81

state 110

    (55) exp_comp -> MINUS . exp
    (53) exp -> . term exp_comp
    (57) term -> . factor term_comp
    (61) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (62) factor -> . factor_comp ID
    (63) factor -> . factor_comp func_call
    (64) factor -> . ID
    (65) factor -> . func_call
    (66) factor -> . CT_INT
    (67) factor -> . CT_FLOAT
    (68) factor -> . CT_CHAR
    (69) factor_comp -> . PLUS
    (70) factor_comp -> . MINUS
    (41) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    OPEN_PAREN      shift and go to state 78
    ID              shift and go to state 80
    CT_INT          shift and go to state 82
    CT_FLOAT        shift and go to state 83
    CT_CHAR         shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86

    exp                            shift and go to state 138
    term                           shift and go to state 76
    factor                         shift and go to state 77
    factor_comp                    shift and go to state 79
    func_call                      shift and go to state 81

state 111

    (56) exp_comp -> empty .

    LESS_THAN       reduce using rule 56 (exp_comp -> empty .)
    MORE_THAN       reduce using rule 56 (exp_comp -> empty .)
    EQUALS          reduce using rule 56 (exp_comp -> empty .)
    NOT_EQUALS      reduce using rule 56 (exp_comp -> empty .)
    AND             reduce using rule 56 (exp_comp -> empty .)
    OR              reduce using rule 56 (exp_comp -> empty .)
    SEMICOLON       reduce using rule 56 (exp_comp -> empty .)
    COMMA           reduce using rule 56 (exp_comp -> empty .)
    CLOSE_PAREN     reduce using rule 56 (exp_comp -> empty .)
    TO              reduce using rule 56 (exp_comp -> empty .)
    DO              reduce using rule 56 (exp_comp -> empty .)


state 112

    (57) term -> factor term_comp .

    PLUS            reduce using rule 57 (term -> factor term_comp .)
    MINUS           reduce using rule 57 (term -> factor term_comp .)
    LESS_THAN       reduce using rule 57 (term -> factor term_comp .)
    MORE_THAN       reduce using rule 57 (term -> factor term_comp .)
    EQUALS          reduce using rule 57 (term -> factor term_comp .)
    NOT_EQUALS      reduce using rule 57 (term -> factor term_comp .)
    AND             reduce using rule 57 (term -> factor term_comp .)
    OR              reduce using rule 57 (term -> factor term_comp .)
    SEMICOLON       reduce using rule 57 (term -> factor term_comp .)
    COMMA           reduce using rule 57 (term -> factor term_comp .)
    CLOSE_PAREN     reduce using rule 57 (term -> factor term_comp .)
    TO              reduce using rule 57 (term -> factor term_comp .)
    DO              reduce using rule 57 (term -> factor term_comp .)


state 113

    (58) term_comp -> MULTIPLIES . term
    (57) term -> . factor term_comp
    (61) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (62) factor -> . factor_comp ID
    (63) factor -> . factor_comp func_call
    (64) factor -> . ID
    (65) factor -> . func_call
    (66) factor -> . CT_INT
    (67) factor -> . CT_FLOAT
    (68) factor -> . CT_CHAR
    (69) factor_comp -> . PLUS
    (70) factor_comp -> . MINUS
    (41) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    OPEN_PAREN      shift and go to state 78
    ID              shift and go to state 80
    CT_INT          shift and go to state 82
    CT_FLOAT        shift and go to state 83
    CT_CHAR         shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86

    term                           shift and go to state 139
    factor                         shift and go to state 77
    factor_comp                    shift and go to state 79
    func_call                      shift and go to state 81

state 114

    (59) term_comp -> DIVIDE . term
    (57) term -> . factor term_comp
    (61) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (62) factor -> . factor_comp ID
    (63) factor -> . factor_comp func_call
    (64) factor -> . ID
    (65) factor -> . func_call
    (66) factor -> . CT_INT
    (67) factor -> . CT_FLOAT
    (68) factor -> . CT_CHAR
    (69) factor_comp -> . PLUS
    (70) factor_comp -> . MINUS
    (41) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    OPEN_PAREN      shift and go to state 78
    ID              shift and go to state 80
    CT_INT          shift and go to state 82
    CT_FLOAT        shift and go to state 83
    CT_CHAR         shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86

    term                           shift and go to state 140
    factor                         shift and go to state 77
    factor_comp                    shift and go to state 79
    func_call                      shift and go to state 81

state 115

    (60) term_comp -> empty .

    PLUS            reduce using rule 60 (term_comp -> empty .)
    MINUS           reduce using rule 60 (term_comp -> empty .)
    LESS_THAN       reduce using rule 60 (term_comp -> empty .)
    MORE_THAN       reduce using rule 60 (term_comp -> empty .)
    EQUALS          reduce using rule 60 (term_comp -> empty .)
    NOT_EQUALS      reduce using rule 60 (term_comp -> empty .)
    AND             reduce using rule 60 (term_comp -> empty .)
    OR              reduce using rule 60 (term_comp -> empty .)
    SEMICOLON       reduce using rule 60 (term_comp -> empty .)
    COMMA           reduce using rule 60 (term_comp -> empty .)
    CLOSE_PAREN     reduce using rule 60 (term_comp -> empty .)
    TO              reduce using rule 60 (term_comp -> empty .)
    DO              reduce using rule 60 (term_comp -> empty .)


state 116

    (61) factor -> OPEN_PAREN expressions . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 141


state 117

    (62) factor -> factor_comp ID .
    (41) func_call -> ID . OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    MULTIPLIES      reduce using rule 62 (factor -> factor_comp ID .)
    DIVIDE          reduce using rule 62 (factor -> factor_comp ID .)
    PLUS            reduce using rule 62 (factor -> factor_comp ID .)
    MINUS           reduce using rule 62 (factor -> factor_comp ID .)
    LESS_THAN       reduce using rule 62 (factor -> factor_comp ID .)
    MORE_THAN       reduce using rule 62 (factor -> factor_comp ID .)
    EQUALS          reduce using rule 62 (factor -> factor_comp ID .)
    NOT_EQUALS      reduce using rule 62 (factor -> factor_comp ID .)
    AND             reduce using rule 62 (factor -> factor_comp ID .)
    OR              reduce using rule 62 (factor -> factor_comp ID .)
    SEMICOLON       reduce using rule 62 (factor -> factor_comp ID .)
    COMMA           reduce using rule 62 (factor -> factor_comp ID .)
    CLOSE_PAREN     reduce using rule 62 (factor -> factor_comp ID .)
    TO              reduce using rule 62 (factor -> factor_comp ID .)
    DO              reduce using rule 62 (factor -> factor_comp ID .)
    OPEN_PAREN      shift and go to state 70


state 118

    (63) factor -> factor_comp func_call .

    MULTIPLIES      reduce using rule 63 (factor -> factor_comp func_call .)
    DIVIDE          reduce using rule 63 (factor -> factor_comp func_call .)
    PLUS            reduce using rule 63 (factor -> factor_comp func_call .)
    MINUS           reduce using rule 63 (factor -> factor_comp func_call .)
    LESS_THAN       reduce using rule 63 (factor -> factor_comp func_call .)
    MORE_THAN       reduce using rule 63 (factor -> factor_comp func_call .)
    EQUALS          reduce using rule 63 (factor -> factor_comp func_call .)
    NOT_EQUALS      reduce using rule 63 (factor -> factor_comp func_call .)
    AND             reduce using rule 63 (factor -> factor_comp func_call .)
    OR              reduce using rule 63 (factor -> factor_comp func_call .)
    SEMICOLON       reduce using rule 63 (factor -> factor_comp func_call .)
    COMMA           reduce using rule 63 (factor -> factor_comp func_call .)
    CLOSE_PAREN     reduce using rule 63 (factor -> factor_comp func_call .)
    TO              reduce using rule 63 (factor -> factor_comp func_call .)
    DO              reduce using rule 63 (factor -> factor_comp func_call .)


state 119

    (28) read -> READ OPEN_PAREN ids read_comp . CLOSE_PAREN SEMICOLON

    CLOSE_PAREN     shift and go to state 142


state 120

    (29) read_comp -> COMMA . ids read_comp
    (17) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (18) ids -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (19) ids -> . ID

    ID              shift and go to state 28

    ids                            shift and go to state 143

state 121

    (30) read_comp -> empty .

    CLOSE_PAREN     reduce using rule 30 (read_comp -> empty .)


state 122

    (31) write -> WRITE OPEN_PAREN CT_STRING write_comp . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 144


state 123

    (33) write_comp -> COMMA . CT_STRING write_comp
    (34) write_comp -> COMMA . expressions write_comp
    (45) expressions -> . exp expressions_op exp
    (46) expressions -> . exp
    (53) exp -> . term exp_comp
    (57) term -> . factor term_comp
    (61) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (62) factor -> . factor_comp ID
    (63) factor -> . factor_comp func_call
    (64) factor -> . ID
    (65) factor -> . func_call
    (66) factor -> . CT_INT
    (67) factor -> . CT_FLOAT
    (68) factor -> . CT_CHAR
    (69) factor_comp -> . PLUS
    (70) factor_comp -> . MINUS
    (41) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    CT_STRING       shift and go to state 145
    OPEN_PAREN      shift and go to state 78
    ID              shift and go to state 80
    CT_INT          shift and go to state 82
    CT_FLOAT        shift and go to state 83
    CT_CHAR         shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86

    expressions                    shift and go to state 146
    exp                            shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    factor_comp                    shift and go to state 79
    func_call                      shift and go to state 81

state 124

    (35) write_comp -> empty .

    CLOSE_PAREN     reduce using rule 35 (write_comp -> empty .)


state 125

    (32) write -> WRITE OPEN_PAREN expressions write_comp . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 147


state 126

    (36) condition -> IF OPEN_PAREN expressions CLOSE_PAREN . THEN block ELSE block
    (37) condition -> IF OPEN_PAREN expressions CLOSE_PAREN . THEN block

    THEN            shift and go to state 148


state 127

    (38) condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN . DO block

    DO              shift and go to state 149


state 128

    (39) condition -> FOR ids ASSIGN expressions . TO expressions DO block

    TO              shift and go to state 150


state 129

    (40) return -> RETURN OPEN_PAREN exp CLOSE_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 151


state 130

    (42) func_call_comp -> ID func_call_comp .

    CLOSE_PAREN     reduce using rule 42 (func_call_comp -> ID func_call_comp .)


state 131

    (41) func_call -> ID OPEN_PAREN . func_call_comp CLOSE_PAREN SEMICOLON
    (61) factor -> OPEN_PAREN . expressions CLOSE_PAREN
    (42) func_call_comp -> . ID func_call_comp
    (43) func_call_comp -> . COMMA ID func_call_comp
    (44) func_call_comp -> . expressions
    (45) expressions -> . exp expressions_op exp
    (46) expressions -> . exp
    (53) exp -> . term exp_comp
    (57) term -> . factor term_comp
    (61) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (62) factor -> . factor_comp ID
    (63) factor -> . factor_comp func_call
    (64) factor -> . ID
    (65) factor -> . func_call
    (66) factor -> . CT_INT
    (67) factor -> . CT_FLOAT
    (68) factor -> . CT_CHAR
    (69) factor_comp -> . PLUS
    (70) factor_comp -> . MINUS
    (41) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    ID              shift and go to state 94
    COMMA           shift and go to state 96
    OPEN_PAREN      shift and go to state 78
    CT_INT          shift and go to state 82
    CT_FLOAT        shift and go to state 83
    CT_CHAR         shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86

    func_call_comp                 shift and go to state 95
    expressions                    shift and go to state 152
    exp                            shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    factor_comp                    shift and go to state 79
    func_call                      shift and go to state 81

state 132

    (41) func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 153


state 133

    (43) func_call_comp -> COMMA ID . func_call_comp
    (42) func_call_comp -> . ID func_call_comp
    (43) func_call_comp -> . COMMA ID func_call_comp
    (44) func_call_comp -> . expressions
    (45) expressions -> . exp expressions_op exp
    (46) expressions -> . exp
    (53) exp -> . term exp_comp
    (57) term -> . factor term_comp
    (61) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (62) factor -> . factor_comp ID
    (63) factor -> . factor_comp func_call
    (64) factor -> . ID
    (65) factor -> . func_call
    (66) factor -> . CT_INT
    (67) factor -> . CT_FLOAT
    (68) factor -> . CT_CHAR
    (69) factor_comp -> . PLUS
    (70) factor_comp -> . MINUS
    (41) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    ID              shift and go to state 94
    COMMA           shift and go to state 96
    OPEN_PAREN      shift and go to state 78
    CT_INT          shift and go to state 82
    CT_FLOAT        shift and go to state 83
    CT_CHAR         shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86

    func_call_comp                 shift and go to state 154
    expressions                    shift and go to state 97
    exp                            shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    factor_comp                    shift and go to state 79
    func_call                      shift and go to state 81

state 134

    (17) ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT . CLOSE_BRACKETS

    CLOSE_BRACKETS  shift and go to state 155


state 135

    (6) funcs -> func_type MODULE ID OPEN_PAREN var_type ID CLOSE_PAREN vars . block
    (7) block -> . OPEN_BRACES statements CLOSE_BRACES

    OPEN_BRACES     shift and go to state 32

    block                          shift and go to state 156

state 136

    (45) expressions -> exp expressions_op exp .

    SEMICOLON       reduce using rule 45 (expressions -> exp expressions_op exp .)
    COMMA           reduce using rule 45 (expressions -> exp expressions_op exp .)
    CLOSE_PAREN     reduce using rule 45 (expressions -> exp expressions_op exp .)
    TO              reduce using rule 45 (expressions -> exp expressions_op exp .)
    DO              reduce using rule 45 (expressions -> exp expressions_op exp .)


state 137

    (54) exp_comp -> PLUS exp .

    LESS_THAN       reduce using rule 54 (exp_comp -> PLUS exp .)
    MORE_THAN       reduce using rule 54 (exp_comp -> PLUS exp .)
    EQUALS          reduce using rule 54 (exp_comp -> PLUS exp .)
    NOT_EQUALS      reduce using rule 54 (exp_comp -> PLUS exp .)
    AND             reduce using rule 54 (exp_comp -> PLUS exp .)
    OR              reduce using rule 54 (exp_comp -> PLUS exp .)
    SEMICOLON       reduce using rule 54 (exp_comp -> PLUS exp .)
    COMMA           reduce using rule 54 (exp_comp -> PLUS exp .)
    CLOSE_PAREN     reduce using rule 54 (exp_comp -> PLUS exp .)
    TO              reduce using rule 54 (exp_comp -> PLUS exp .)
    DO              reduce using rule 54 (exp_comp -> PLUS exp .)


state 138

    (55) exp_comp -> MINUS exp .

    LESS_THAN       reduce using rule 55 (exp_comp -> MINUS exp .)
    MORE_THAN       reduce using rule 55 (exp_comp -> MINUS exp .)
    EQUALS          reduce using rule 55 (exp_comp -> MINUS exp .)
    NOT_EQUALS      reduce using rule 55 (exp_comp -> MINUS exp .)
    AND             reduce using rule 55 (exp_comp -> MINUS exp .)
    OR              reduce using rule 55 (exp_comp -> MINUS exp .)
    SEMICOLON       reduce using rule 55 (exp_comp -> MINUS exp .)
    COMMA           reduce using rule 55 (exp_comp -> MINUS exp .)
    CLOSE_PAREN     reduce using rule 55 (exp_comp -> MINUS exp .)
    TO              reduce using rule 55 (exp_comp -> MINUS exp .)
    DO              reduce using rule 55 (exp_comp -> MINUS exp .)


state 139

    (58) term_comp -> MULTIPLIES term .

    PLUS            reduce using rule 58 (term_comp -> MULTIPLIES term .)
    MINUS           reduce using rule 58 (term_comp -> MULTIPLIES term .)
    LESS_THAN       reduce using rule 58 (term_comp -> MULTIPLIES term .)
    MORE_THAN       reduce using rule 58 (term_comp -> MULTIPLIES term .)
    EQUALS          reduce using rule 58 (term_comp -> MULTIPLIES term .)
    NOT_EQUALS      reduce using rule 58 (term_comp -> MULTIPLIES term .)
    AND             reduce using rule 58 (term_comp -> MULTIPLIES term .)
    OR              reduce using rule 58 (term_comp -> MULTIPLIES term .)
    SEMICOLON       reduce using rule 58 (term_comp -> MULTIPLIES term .)
    COMMA           reduce using rule 58 (term_comp -> MULTIPLIES term .)
    CLOSE_PAREN     reduce using rule 58 (term_comp -> MULTIPLIES term .)
    TO              reduce using rule 58 (term_comp -> MULTIPLIES term .)
    DO              reduce using rule 58 (term_comp -> MULTIPLIES term .)


state 140

    (59) term_comp -> DIVIDE term .

    PLUS            reduce using rule 59 (term_comp -> DIVIDE term .)
    MINUS           reduce using rule 59 (term_comp -> DIVIDE term .)
    LESS_THAN       reduce using rule 59 (term_comp -> DIVIDE term .)
    MORE_THAN       reduce using rule 59 (term_comp -> DIVIDE term .)
    EQUALS          reduce using rule 59 (term_comp -> DIVIDE term .)
    NOT_EQUALS      reduce using rule 59 (term_comp -> DIVIDE term .)
    AND             reduce using rule 59 (term_comp -> DIVIDE term .)
    OR              reduce using rule 59 (term_comp -> DIVIDE term .)
    SEMICOLON       reduce using rule 59 (term_comp -> DIVIDE term .)
    COMMA           reduce using rule 59 (term_comp -> DIVIDE term .)
    CLOSE_PAREN     reduce using rule 59 (term_comp -> DIVIDE term .)
    TO              reduce using rule 59 (term_comp -> DIVIDE term .)
    DO              reduce using rule 59 (term_comp -> DIVIDE term .)


state 141

    (61) factor -> OPEN_PAREN expressions CLOSE_PAREN .

    MULTIPLIES      reduce using rule 61 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    DIVIDE          reduce using rule 61 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    PLUS            reduce using rule 61 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    MINUS           reduce using rule 61 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    LESS_THAN       reduce using rule 61 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    MORE_THAN       reduce using rule 61 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    EQUALS          reduce using rule 61 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    NOT_EQUALS      reduce using rule 61 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    AND             reduce using rule 61 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    OR              reduce using rule 61 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    SEMICOLON       reduce using rule 61 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    COMMA           reduce using rule 61 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 61 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    TO              reduce using rule 61 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    DO              reduce using rule 61 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)


state 142

    (28) read -> READ OPEN_PAREN ids read_comp CLOSE_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 157


state 143

    (29) read_comp -> COMMA ids . read_comp
    (29) read_comp -> . COMMA ids read_comp
    (30) read_comp -> . empty
    (71) empty -> .

    COMMA           shift and go to state 120
    CLOSE_PAREN     reduce using rule 71 (empty -> .)

    read_comp                      shift and go to state 158
    empty                          shift and go to state 121

state 144

    (31) write -> WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN .

    READ            reduce using rule 31 (write -> WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN .)
    WRITE           reduce using rule 31 (write -> WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN .)
    IF              reduce using rule 31 (write -> WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN .)
    WHILE           reduce using rule 31 (write -> WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN .)
    FOR             reduce using rule 31 (write -> WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN .)
    RETURN          reduce using rule 31 (write -> WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN .)
    ID              reduce using rule 31 (write -> WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN .)
    CLOSE_BRACES    reduce using rule 31 (write -> WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN .)


state 145

    (33) write_comp -> COMMA CT_STRING . write_comp
    (33) write_comp -> . COMMA CT_STRING write_comp
    (34) write_comp -> . COMMA expressions write_comp
    (35) write_comp -> . empty
    (71) empty -> .

    COMMA           shift and go to state 123
    CLOSE_PAREN     reduce using rule 71 (empty -> .)

    write_comp                     shift and go to state 159
    empty                          shift and go to state 124

state 146

    (34) write_comp -> COMMA expressions . write_comp
    (33) write_comp -> . COMMA CT_STRING write_comp
    (34) write_comp -> . COMMA expressions write_comp
    (35) write_comp -> . empty
    (71) empty -> .

    COMMA           shift and go to state 123
    CLOSE_PAREN     reduce using rule 71 (empty -> .)

    write_comp                     shift and go to state 160
    empty                          shift and go to state 124

state 147

    (32) write -> WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN .

    READ            reduce using rule 32 (write -> WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN .)
    WRITE           reduce using rule 32 (write -> WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN .)
    IF              reduce using rule 32 (write -> WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN .)
    WHILE           reduce using rule 32 (write -> WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN .)
    FOR             reduce using rule 32 (write -> WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN .)
    RETURN          reduce using rule 32 (write -> WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN .)
    ID              reduce using rule 32 (write -> WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN .)
    CLOSE_BRACES    reduce using rule 32 (write -> WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN .)


state 148

    (36) condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN . block ELSE block
    (37) condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN . block
    (7) block -> . OPEN_BRACES statements CLOSE_BRACES

    OPEN_BRACES     shift and go to state 32

    block                          shift and go to state 161

state 149

    (38) condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN DO . block
    (7) block -> . OPEN_BRACES statements CLOSE_BRACES

    OPEN_BRACES     shift and go to state 32

    block                          shift and go to state 162

state 150

    (39) condition -> FOR ids ASSIGN expressions TO . expressions DO block
    (45) expressions -> . exp expressions_op exp
    (46) expressions -> . exp
    (53) exp -> . term exp_comp
    (57) term -> . factor term_comp
    (61) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (62) factor -> . factor_comp ID
    (63) factor -> . factor_comp func_call
    (64) factor -> . ID
    (65) factor -> . func_call
    (66) factor -> . CT_INT
    (67) factor -> . CT_FLOAT
    (68) factor -> . CT_CHAR
    (69) factor_comp -> . PLUS
    (70) factor_comp -> . MINUS
    (41) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON

    OPEN_PAREN      shift and go to state 78
    ID              shift and go to state 80
    CT_INT          shift and go to state 82
    CT_FLOAT        shift and go to state 83
    CT_CHAR         shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86

    expressions                    shift and go to state 163
    exp                            shift and go to state 75
    term                           shift and go to state 76
    factor                         shift and go to state 77
    factor_comp                    shift and go to state 79
    func_call                      shift and go to state 81

state 151

    (40) return -> RETURN OPEN_PAREN exp CLOSE_PAREN SEMICOLON .

    READ            reduce using rule 40 (return -> RETURN OPEN_PAREN exp CLOSE_PAREN SEMICOLON .)
    WRITE           reduce using rule 40 (return -> RETURN OPEN_PAREN exp CLOSE_PAREN SEMICOLON .)
    IF              reduce using rule 40 (return -> RETURN OPEN_PAREN exp CLOSE_PAREN SEMICOLON .)
    WHILE           reduce using rule 40 (return -> RETURN OPEN_PAREN exp CLOSE_PAREN SEMICOLON .)
    FOR             reduce using rule 40 (return -> RETURN OPEN_PAREN exp CLOSE_PAREN SEMICOLON .)
    RETURN          reduce using rule 40 (return -> RETURN OPEN_PAREN exp CLOSE_PAREN SEMICOLON .)
    ID              reduce using rule 40 (return -> RETURN OPEN_PAREN exp CLOSE_PAREN SEMICOLON .)
    CLOSE_BRACES    reduce using rule 40 (return -> RETURN OPEN_PAREN exp CLOSE_PAREN SEMICOLON .)


state 152

    (61) factor -> OPEN_PAREN expressions . CLOSE_PAREN
    (44) func_call_comp -> expressions .

  ! shift/reduce conflict for CLOSE_PAREN resolved as shift
    CLOSE_PAREN     shift and go to state 141

  ! CLOSE_PAREN     [ reduce using rule 44 (func_call_comp -> expressions .) ]


state 153

    (41) func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .

    READ            reduce using rule 41 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    WRITE           reduce using rule 41 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    IF              reduce using rule 41 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    WHILE           reduce using rule 41 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    FOR             reduce using rule 41 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    RETURN          reduce using rule 41 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    ID              reduce using rule 41 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    CLOSE_BRACES    reduce using rule 41 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    MULTIPLIES      reduce using rule 41 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    DIVIDE          reduce using rule 41 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    PLUS            reduce using rule 41 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    MINUS           reduce using rule 41 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    LESS_THAN       reduce using rule 41 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    MORE_THAN       reduce using rule 41 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    EQUALS          reduce using rule 41 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    NOT_EQUALS      reduce using rule 41 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    AND             reduce using rule 41 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    OR              reduce using rule 41 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    SEMICOLON       reduce using rule 41 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    COMMA           reduce using rule 41 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    CLOSE_PAREN     reduce using rule 41 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    TO              reduce using rule 41 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)
    DO              reduce using rule 41 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN SEMICOLON .)


state 154

    (43) func_call_comp -> COMMA ID func_call_comp .

    CLOSE_PAREN     reduce using rule 43 (func_call_comp -> COMMA ID func_call_comp .)


state 155

    (17) ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS .

    COMMA           reduce using rule 17 (ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS .)
    INT             reduce using rule 17 (ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS .)
    FLOAT           reduce using rule 17 (ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS .)
    CHAR            reduce using rule 17 (ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS .)
    SEMICOLON       reduce using rule 17 (ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS .)
    MAIN            reduce using rule 17 (ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS .)
    VOID            reduce using rule 17 (ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS .)
    OPEN_BRACES     reduce using rule 17 (ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS .)
    ASSIGN          reduce using rule 17 (ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS .)
    CLOSE_PAREN     reduce using rule 17 (ids -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS .)


state 156

    (6) funcs -> func_type MODULE ID OPEN_PAREN var_type ID CLOSE_PAREN vars block .

    MAIN            reduce using rule 6 (funcs -> func_type MODULE ID OPEN_PAREN var_type ID CLOSE_PAREN vars block .)


state 157

    (28) read -> READ OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLON .

    READ            reduce using rule 28 (read -> READ OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLON .)
    WRITE           reduce using rule 28 (read -> READ OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLON .)
    IF              reduce using rule 28 (read -> READ OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLON .)
    WHILE           reduce using rule 28 (read -> READ OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLON .)
    FOR             reduce using rule 28 (read -> READ OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLON .)
    RETURN          reduce using rule 28 (read -> READ OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLON .)
    ID              reduce using rule 28 (read -> READ OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLON .)
    CLOSE_BRACES    reduce using rule 28 (read -> READ OPEN_PAREN ids read_comp CLOSE_PAREN SEMICOLON .)


state 158

    (29) read_comp -> COMMA ids read_comp .

    CLOSE_PAREN     reduce using rule 29 (read_comp -> COMMA ids read_comp .)


state 159

    (33) write_comp -> COMMA CT_STRING write_comp .

    CLOSE_PAREN     reduce using rule 33 (write_comp -> COMMA CT_STRING write_comp .)


state 160

    (34) write_comp -> COMMA expressions write_comp .

    CLOSE_PAREN     reduce using rule 34 (write_comp -> COMMA expressions write_comp .)


state 161

    (36) condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block . ELSE block
    (37) condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block .

    ELSE            shift and go to state 164
    READ            reduce using rule 37 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block .)
    WRITE           reduce using rule 37 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block .)
    IF              reduce using rule 37 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block .)
    WHILE           reduce using rule 37 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block .)
    FOR             reduce using rule 37 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block .)
    RETURN          reduce using rule 37 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block .)
    ID              reduce using rule 37 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block .)
    CLOSE_BRACES    reduce using rule 37 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block .)


state 162

    (38) condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN DO block .

    READ            reduce using rule 38 (condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN DO block .)
    WRITE           reduce using rule 38 (condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN DO block .)
    IF              reduce using rule 38 (condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN DO block .)
    WHILE           reduce using rule 38 (condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN DO block .)
    FOR             reduce using rule 38 (condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN DO block .)
    RETURN          reduce using rule 38 (condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN DO block .)
    ID              reduce using rule 38 (condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN DO block .)
    CLOSE_BRACES    reduce using rule 38 (condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN DO block .)


state 163

    (39) condition -> FOR ids ASSIGN expressions TO expressions . DO block

    DO              shift and go to state 165


state 164

    (36) condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE . block
    (7) block -> . OPEN_BRACES statements CLOSE_BRACES

    OPEN_BRACES     shift and go to state 32

    block                          shift and go to state 166

state 165

    (39) condition -> FOR ids ASSIGN expressions TO expressions DO . block
    (7) block -> . OPEN_BRACES statements CLOSE_BRACES

    OPEN_BRACES     shift and go to state 32

    block                          shift and go to state 167

state 166

    (36) condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block .

    READ            reduce using rule 36 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block .)
    WRITE           reduce using rule 36 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block .)
    IF              reduce using rule 36 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block .)
    WHILE           reduce using rule 36 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block .)
    FOR             reduce using rule 36 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block .)
    RETURN          reduce using rule 36 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block .)
    ID              reduce using rule 36 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block .)
    CLOSE_BRACES    reduce using rule 36 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block .)


state 167

    (39) condition -> FOR ids ASSIGN expressions TO expressions DO block .

    READ            reduce using rule 39 (condition -> FOR ids ASSIGN expressions TO expressions DO block .)
    WRITE           reduce using rule 39 (condition -> FOR ids ASSIGN expressions TO expressions DO block .)
    IF              reduce using rule 39 (condition -> FOR ids ASSIGN expressions TO expressions DO block .)
    WHILE           reduce using rule 39 (condition -> FOR ids ASSIGN expressions TO expressions DO block .)
    FOR             reduce using rule 39 (condition -> FOR ids ASSIGN expressions TO expressions DO block .)
    RETURN          reduce using rule 39 (condition -> FOR ids ASSIGN expressions TO expressions DO block .)
    ID              reduce using rule 39 (condition -> FOR ids ASSIGN expressions TO expressions DO block .)
    CLOSE_BRACES    reduce using rule 39 (condition -> FOR ids ASSIGN expressions TO expressions DO block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for INT in state 9 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 9 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 9 resolved as shift
WARNING: shift/reduce conflict for INT in state 29 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 29 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 29 resolved as shift
WARNING: shift/reduce conflict for INT in state 53 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 53 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 53 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 94 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 94 resolved as shift
WARNING: shift/reduce conflict for CLOSE_PAREN in state 152 resolved as shift
