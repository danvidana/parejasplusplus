Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID add_program SEMICOLON vars funcs main end_program
Rule 2     add_program -> <empty>
Rule 3     end_program -> <empty>
Rule 4     main -> MAIN OPEN_PAREN CLOSE_PAREN block
Rule 5     funcs -> func_type MODULE ID add_module OPEN_PAREN funcs_params CLOSE_PAREN vars block
Rule 6     funcs -> empty
Rule 7     add_module -> <empty>
Rule 8     funcs_comp -> ID add_module OPEN_PAREN funcs_params CLOSE_PAREN vars block
Rule 9     funcs_params -> var_type variable funcs_params_comp
Rule 10    funcs_params -> empty
Rule 11    funcs_params_comp -> COMMA var_type ID funcs_params_comp
Rule 12    funcs_params_comp -> empty
Rule 13    block -> OPEN_BRACES statements CLOSE_BRACES
Rule 14    func_type -> var_type
Rule 15    func_type -> VOID
Rule 16    var_type -> INT
Rule 17    var_type -> FLOAT
Rule 18    var_type -> CHAR
Rule 19    vars -> VARS var_comp
Rule 20    vars -> empty
Rule 21    var_comp -> var_type ids_dec var_comp_2 var_comp_final
Rule 22    var_comp -> var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive
Rule 23    create_var_table -> empty
Rule 24    var_comp_2 -> COMMA ids_dec var_comp_3
Rule 25    var_comp_2 -> empty
Rule 26    var_comp_3 -> var_comp_2
Rule 27    var_comp_recursive -> var_type ids_dec var_comp_2 var_comp_final
Rule 28    var_comp_recursive -> var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive
Rule 29    var_comp_final -> SEMICOLON
Rule 30    var_comp_final -> var_module_trans
Rule 31    var_module_trans -> SEMICOLON var_type MODULE funcs_comp
Rule 32    ids_dec -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
Rule 33    ids_dec -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS
Rule 34    ids_dec -> ID
Rule 35    ids -> ID OPEN_BRACKETS exp CLOSE_BRACKETS OPEN_BRACKETS exp CLOSE_BRACKETS
Rule 36    ids -> ID OPEN_BRACKETS exp CLOSE_BRACKETS
Rule 37    ids -> ID
Rule 38    statements -> assignment SEMICOLON statements
Rule 39    statements -> read SEMICOLON statements
Rule 40    statements -> write SEMICOLON statements
Rule 41    statements -> condition statements
Rule 42    statements -> return SEMICOLON statements
Rule 43    statements -> func_call SEMICOLON statements
Rule 44    statements -> empty
Rule 45    assignment -> ids ASSIGN expressions
Rule 46    read -> READ OPEN_PAREN ids read_comp CLOSE_PAREN
Rule 47    read_comp -> COMMA ids read_comp
Rule 48    read_comp -> empty
Rule 49    write -> WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN
Rule 50    write -> WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN
Rule 51    write_comp -> COMMA CT_STRING write_comp
Rule 52    write_comp -> COMMA expressions write_comp
Rule 53    write_comp -> empty
Rule 54    condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block
Rule 55    condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block
Rule 56    condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN DO block
Rule 57    condition -> FOR ids ASSIGN expressions TO expressions DO block
Rule 58    return -> RETURN OPEN_PAREN exp CLOSE_PAREN
Rule 59    func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN
Rule 60    func_call_comp -> expressions func_call_comp
Rule 61    func_call_comp -> COMMA expressions func_call_comp
Rule 62    func_call_comp -> empty
Rule 63    expressions -> expressions_comp
Rule 64    expressions_comp -> expression_comp_2
Rule 65    expressions_comp -> expression_comp_2 OR expressions_comp
Rule 66    expression_comp_2 -> expression_comp_3
Rule 67    expression_comp_2 -> expression_comp_3 AND expression_comp_2
Rule 68    expression_comp_3 -> exp
Rule 69    expression_comp_3 -> exp expressions_op exp
Rule 70    expressions_op -> LESS_THAN
Rule 71    expressions_op -> LESS_THAN_EQUAL
Rule 72    expressions_op -> MORE_THAN
Rule 73    expressions_op -> MORE_THAN_EQUAL
Rule 74    expressions_op -> EQUALS
Rule 75    expressions_op -> NOT_EQUALS
Rule 76    exp -> term
Rule 77    exp -> term exp_comp
Rule 78    exp_comp -> PLUS exp
Rule 79    exp_comp -> MINUS exp
Rule 80    term -> factor
Rule 81    term -> factor term_comp
Rule 82    term_comp -> MULTIPLIES term
Rule 83    term_comp -> DIVIDE term
Rule 84    factor -> OPEN_PAREN expressions CLOSE_PAREN
Rule 85    factor -> variable
Rule 86    factor -> func_call
Rule 87    factor -> CT_INT
Rule 88    factor -> CT_FLOAT
Rule 89    factor -> CT_CHAR
Rule 90    variable -> ID
Rule 91    variable -> ID dim
Rule 92    dim -> OPEN_BRACKETS exp CLOSE_BRACKETS
Rule 93    empty -> <empty>

Terminals, with rules where they appear

AND                  : 67
ASSIGN               : 45 57
CHAR                 : 18
CLOSE_BRACES         : 13
CLOSE_BRACKETS       : 32 32 33 35 35 36 92
CLOSE_PAREN          : 4 5 8 46 49 50 54 55 56 58 59 84
COMMA                : 11 24 47 51 52 61
CT_CHAR              : 89
CT_FLOAT             : 88
CT_INT               : 32 32 33 87
CT_STRING            : 49 51
DIVIDE               : 83
DO                   : 56 57
ELSE                 : 54
EQUALS               : 74
FLOAT                : 17
FOR                  : 57
ID                   : 1 5 8 11 32 33 34 35 36 37 59 90 91
IF                   : 54 55
INT                  : 16
LESS_THAN            : 70
LESS_THAN_EQUAL      : 71
MAIN                 : 4
MINUS                : 79
MODULE               : 5 31
MORE_THAN            : 72
MORE_THAN_EQUAL      : 73
MULTIPLIES           : 82
NOT_EQUALS           : 75
OPEN_BRACES          : 13
OPEN_BRACKETS        : 32 32 33 35 35 36 92
OPEN_PAREN           : 4 5 8 46 49 50 54 55 56 58 59 84
OR                   : 65
PLUS                 : 78
PROGRAM              : 1
READ                 : 46
RETURN               : 58
SEMICOLON            : 1 22 28 29 31 38 39 40 42 43
THEN                 : 54 55
TO                   : 57
VARS                 : 19
VOID                 : 15
WHILE                : 56
WRITE                : 49 50
error                : 

Nonterminals, with rules where they appear

add_module           : 5 8
add_program          : 1
assignment           : 38
block                : 4 5 8 54 54 55 56 57
condition            : 41
create_var_table     : 
dim                  : 91
empty                : 6 10 12 20 23 25 44 48 53 62
end_program          : 1
exp                  : 35 35 36 58 68 69 69 78 79 92
exp_comp             : 77
expression_comp_2    : 64 65 67
expression_comp_3    : 66 67
expressions          : 45 50 52 54 55 56 57 57 60 61 84
expressions_comp     : 63 65
expressions_op       : 69
factor               : 80 81
func_call            : 43 86
func_call_comp       : 59 60 61
func_type            : 5
funcs                : 1
funcs_comp           : 31
funcs_params         : 5 8
funcs_params_comp    : 9 11
ids                  : 45 46 47 57
ids_dec              : 21 22 24 27 28
main                 : 1
program              : 0
read                 : 39
read_comp            : 46 47
return               : 42
statements           : 13 38 39 40 41 42 43
term                 : 76 77 82 83
term_comp            : 81
var_comp             : 19
var_comp_2           : 21 22 26 27 28
var_comp_3           : 24
var_comp_final       : 21 27
var_comp_recursive   : 22 28
var_module_trans     : 30
var_type             : 9 11 14 21 22 27 28 31
variable             : 9 85
vars                 : 1 5 8
write                : 40
write_comp           : 49 50 51 52

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID add_program SEMICOLON vars funcs main end_program

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID add_program SEMICOLON vars funcs main end_program

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . add_program SEMICOLON vars funcs main end_program
    (2) add_program -> .

    SEMICOLON       reduce using rule 2 (add_program -> .)

    add_program                    shift and go to state 4

state 4

    (1) program -> PROGRAM ID add_program . SEMICOLON vars funcs main end_program

    SEMICOLON       shift and go to state 5


state 5

    (1) program -> PROGRAM ID add_program SEMICOLON . vars funcs main end_program
    (19) vars -> . VARS var_comp
    (20) vars -> . empty
    (93) empty -> .

    VARS            shift and go to state 7
    VOID            reduce using rule 93 (empty -> .)
    INT             reduce using rule 93 (empty -> .)
    FLOAT           reduce using rule 93 (empty -> .)
    CHAR            reduce using rule 93 (empty -> .)
    MAIN            reduce using rule 93 (empty -> .)

    vars                           shift and go to state 6
    empty                          shift and go to state 8

state 6

    (1) program -> PROGRAM ID add_program SEMICOLON vars . funcs main end_program
    (5) funcs -> . func_type MODULE ID add_module OPEN_PAREN funcs_params CLOSE_PAREN vars block
    (6) funcs -> . empty
    (14) func_type -> . var_type
    (15) func_type -> . VOID
    (93) empty -> .
    (16) var_type -> . INT
    (17) var_type -> . FLOAT
    (18) var_type -> . CHAR

    VOID            shift and go to state 13
    MAIN            reduce using rule 93 (empty -> .)
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16

    funcs                          shift and go to state 9
    func_type                      shift and go to state 10
    empty                          shift and go to state 11
    var_type                       shift and go to state 12

state 7

    (19) vars -> VARS . var_comp
    (21) var_comp -> . var_type ids_dec var_comp_2 var_comp_final
    (22) var_comp -> . var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive
    (16) var_type -> . INT
    (17) var_type -> . FLOAT
    (18) var_type -> . CHAR

    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16

    var_comp                       shift and go to state 17
    var_type                       shift and go to state 18

state 8

    (20) vars -> empty .

    VOID            reduce using rule 20 (vars -> empty .)
    INT             reduce using rule 20 (vars -> empty .)
    FLOAT           reduce using rule 20 (vars -> empty .)
    CHAR            reduce using rule 20 (vars -> empty .)
    MAIN            reduce using rule 20 (vars -> empty .)
    OPEN_BRACES     reduce using rule 20 (vars -> empty .)


state 9

    (1) program -> PROGRAM ID add_program SEMICOLON vars funcs . main end_program
    (4) main -> . MAIN OPEN_PAREN CLOSE_PAREN block

    MAIN            shift and go to state 20

    main                           shift and go to state 19

state 10

    (5) funcs -> func_type . MODULE ID add_module OPEN_PAREN funcs_params CLOSE_PAREN vars block

    MODULE          shift and go to state 21


state 11

    (6) funcs -> empty .

    MAIN            reduce using rule 6 (funcs -> empty .)


state 12

    (14) func_type -> var_type .

    MODULE          reduce using rule 14 (func_type -> var_type .)


state 13

    (15) func_type -> VOID .

    MODULE          reduce using rule 15 (func_type -> VOID .)


state 14

    (16) var_type -> INT .

    MODULE          reduce using rule 16 (var_type -> INT .)
    ID              reduce using rule 16 (var_type -> INT .)


state 15

    (17) var_type -> FLOAT .

    MODULE          reduce using rule 17 (var_type -> FLOAT .)
    ID              reduce using rule 17 (var_type -> FLOAT .)


state 16

    (18) var_type -> CHAR .

    MODULE          reduce using rule 18 (var_type -> CHAR .)
    ID              reduce using rule 18 (var_type -> CHAR .)


state 17

    (19) vars -> VARS var_comp .

    VOID            reduce using rule 19 (vars -> VARS var_comp .)
    INT             reduce using rule 19 (vars -> VARS var_comp .)
    FLOAT           reduce using rule 19 (vars -> VARS var_comp .)
    CHAR            reduce using rule 19 (vars -> VARS var_comp .)
    MAIN            reduce using rule 19 (vars -> VARS var_comp .)
    OPEN_BRACES     reduce using rule 19 (vars -> VARS var_comp .)


state 18

    (21) var_comp -> var_type . ids_dec var_comp_2 var_comp_final
    (22) var_comp -> var_type . ids_dec var_comp_2 SEMICOLON var_comp_recursive
    (32) ids_dec -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (33) ids_dec -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (34) ids_dec -> . ID

    ID              shift and go to state 23

    ids_dec                        shift and go to state 22

state 19

    (1) program -> PROGRAM ID add_program SEMICOLON vars funcs main . end_program
    (3) end_program -> .

    $end            reduce using rule 3 (end_program -> .)

    end_program                    shift and go to state 24

state 20

    (4) main -> MAIN . OPEN_PAREN CLOSE_PAREN block

    OPEN_PAREN      shift and go to state 25


state 21

    (5) funcs -> func_type MODULE . ID add_module OPEN_PAREN funcs_params CLOSE_PAREN vars block

    ID              shift and go to state 26


state 22

    (21) var_comp -> var_type ids_dec . var_comp_2 var_comp_final
    (22) var_comp -> var_type ids_dec . var_comp_2 SEMICOLON var_comp_recursive
    (24) var_comp_2 -> . COMMA ids_dec var_comp_3
    (25) var_comp_2 -> . empty
    (93) empty -> .

    COMMA           shift and go to state 28
    SEMICOLON       reduce using rule 93 (empty -> .)

    var_comp_2                     shift and go to state 27
    empty                          shift and go to state 29

state 23

    (32) ids_dec -> ID . OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (33) ids_dec -> ID . OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (34) ids_dec -> ID .

    OPEN_BRACKETS   shift and go to state 30
    COMMA           reduce using rule 34 (ids_dec -> ID .)
    SEMICOLON       reduce using rule 34 (ids_dec -> ID .)


state 24

    (1) program -> PROGRAM ID add_program SEMICOLON vars funcs main end_program .

    $end            reduce using rule 1 (program -> PROGRAM ID add_program SEMICOLON vars funcs main end_program .)


state 25

    (4) main -> MAIN OPEN_PAREN . CLOSE_PAREN block

    CLOSE_PAREN     shift and go to state 31


state 26

    (5) funcs -> func_type MODULE ID . add_module OPEN_PAREN funcs_params CLOSE_PAREN vars block
    (7) add_module -> .

    OPEN_PAREN      reduce using rule 7 (add_module -> .)

    add_module                     shift and go to state 32

state 27

    (21) var_comp -> var_type ids_dec var_comp_2 . var_comp_final
    (22) var_comp -> var_type ids_dec var_comp_2 . SEMICOLON var_comp_recursive
    (29) var_comp_final -> . SEMICOLON
    (30) var_comp_final -> . var_module_trans
    (31) var_module_trans -> . SEMICOLON var_type MODULE funcs_comp

    SEMICOLON       shift and go to state 34

    var_comp_final                 shift and go to state 33
    var_module_trans               shift and go to state 35

state 28

    (24) var_comp_2 -> COMMA . ids_dec var_comp_3
    (32) ids_dec -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (33) ids_dec -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (34) ids_dec -> . ID

    ID              shift and go to state 23

    ids_dec                        shift and go to state 36

state 29

    (25) var_comp_2 -> empty .

    SEMICOLON       reduce using rule 25 (var_comp_2 -> empty .)


state 30

    (32) ids_dec -> ID OPEN_BRACKETS . CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (33) ids_dec -> ID OPEN_BRACKETS . CT_INT CLOSE_BRACKETS

    CT_INT          shift and go to state 37


state 31

    (4) main -> MAIN OPEN_PAREN CLOSE_PAREN . block
    (13) block -> . OPEN_BRACES statements CLOSE_BRACES

    OPEN_BRACES     shift and go to state 39

    block                          shift and go to state 38

state 32

    (5) funcs -> func_type MODULE ID add_module . OPEN_PAREN funcs_params CLOSE_PAREN vars block

    OPEN_PAREN      shift and go to state 40


state 33

    (21) var_comp -> var_type ids_dec var_comp_2 var_comp_final .

    VOID            reduce using rule 21 (var_comp -> var_type ids_dec var_comp_2 var_comp_final .)
    INT             reduce using rule 21 (var_comp -> var_type ids_dec var_comp_2 var_comp_final .)
    FLOAT           reduce using rule 21 (var_comp -> var_type ids_dec var_comp_2 var_comp_final .)
    CHAR            reduce using rule 21 (var_comp -> var_type ids_dec var_comp_2 var_comp_final .)
    MAIN            reduce using rule 21 (var_comp -> var_type ids_dec var_comp_2 var_comp_final .)
    OPEN_BRACES     reduce using rule 21 (var_comp -> var_type ids_dec var_comp_2 var_comp_final .)


state 34

    (22) var_comp -> var_type ids_dec var_comp_2 SEMICOLON . var_comp_recursive
    (29) var_comp_final -> SEMICOLON .
    (31) var_module_trans -> SEMICOLON . var_type MODULE funcs_comp
    (27) var_comp_recursive -> . var_type ids_dec var_comp_2 var_comp_final
    (28) var_comp_recursive -> . var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive
    (16) var_type -> . INT
    (17) var_type -> . FLOAT
    (18) var_type -> . CHAR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    VOID            reduce using rule 29 (var_comp_final -> SEMICOLON .)
    MAIN            reduce using rule 29 (var_comp_final -> SEMICOLON .)
    OPEN_BRACES     reduce using rule 29 (var_comp_final -> SEMICOLON .)
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16

  ! INT             [ reduce using rule 29 (var_comp_final -> SEMICOLON .) ]
  ! FLOAT           [ reduce using rule 29 (var_comp_final -> SEMICOLON .) ]
  ! CHAR            [ reduce using rule 29 (var_comp_final -> SEMICOLON .) ]

    var_type                       shift and go to state 41
    var_comp_recursive             shift and go to state 42

state 35

    (30) var_comp_final -> var_module_trans .

    VOID            reduce using rule 30 (var_comp_final -> var_module_trans .)
    INT             reduce using rule 30 (var_comp_final -> var_module_trans .)
    FLOAT           reduce using rule 30 (var_comp_final -> var_module_trans .)
    CHAR            reduce using rule 30 (var_comp_final -> var_module_trans .)
    MAIN            reduce using rule 30 (var_comp_final -> var_module_trans .)
    OPEN_BRACES     reduce using rule 30 (var_comp_final -> var_module_trans .)


state 36

    (24) var_comp_2 -> COMMA ids_dec . var_comp_3
    (26) var_comp_3 -> . var_comp_2
    (24) var_comp_2 -> . COMMA ids_dec var_comp_3
    (25) var_comp_2 -> . empty
    (93) empty -> .

    COMMA           shift and go to state 28
    SEMICOLON       reduce using rule 93 (empty -> .)

    var_comp_3                     shift and go to state 43
    var_comp_2                     shift and go to state 44
    empty                          shift and go to state 29

state 37

    (32) ids_dec -> ID OPEN_BRACKETS CT_INT . CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (33) ids_dec -> ID OPEN_BRACKETS CT_INT . CLOSE_BRACKETS

    CLOSE_BRACKETS  shift and go to state 45


state 38

    (4) main -> MAIN OPEN_PAREN CLOSE_PAREN block .

    $end            reduce using rule 4 (main -> MAIN OPEN_PAREN CLOSE_PAREN block .)


state 39

    (13) block -> OPEN_BRACES . statements CLOSE_BRACES
    (38) statements -> . assignment SEMICOLON statements
    (39) statements -> . read SEMICOLON statements
    (40) statements -> . write SEMICOLON statements
    (41) statements -> . condition statements
    (42) statements -> . return SEMICOLON statements
    (43) statements -> . func_call SEMICOLON statements
    (44) statements -> . empty
    (45) assignment -> . ids ASSIGN expressions
    (46) read -> . READ OPEN_PAREN ids read_comp CLOSE_PAREN
    (49) write -> . WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN
    (50) write -> . WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN
    (54) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block
    (55) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block
    (56) condition -> . WHILE OPEN_PAREN expressions CLOSE_PAREN DO block
    (57) condition -> . FOR ids ASSIGN expressions TO expressions DO block
    (58) return -> . RETURN OPEN_PAREN exp CLOSE_PAREN
    (59) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN
    (93) empty -> .
    (35) ids -> . ID OPEN_BRACKETS exp CLOSE_BRACKETS OPEN_BRACKETS exp CLOSE_BRACKETS
    (36) ids -> . ID OPEN_BRACKETS exp CLOSE_BRACKETS
    (37) ids -> . ID

    READ            shift and go to state 55
    WRITE           shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    RETURN          shift and go to state 60
    ID              shift and go to state 61
    CLOSE_BRACES    reduce using rule 93 (empty -> .)

    statements                     shift and go to state 46
    assignment                     shift and go to state 47
    read                           shift and go to state 48
    write                          shift and go to state 49
    condition                      shift and go to state 50
    return                         shift and go to state 51
    func_call                      shift and go to state 52
    empty                          shift and go to state 53
    ids                            shift and go to state 54

state 40

    (5) funcs -> func_type MODULE ID add_module OPEN_PAREN . funcs_params CLOSE_PAREN vars block
    (9) funcs_params -> . var_type variable funcs_params_comp
    (10) funcs_params -> . empty
    (16) var_type -> . INT
    (17) var_type -> . FLOAT
    (18) var_type -> . CHAR
    (93) empty -> .

    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16
    CLOSE_PAREN     reduce using rule 93 (empty -> .)

    funcs_params                   shift and go to state 62
    var_type                       shift and go to state 63
    empty                          shift and go to state 64

state 41

    (31) var_module_trans -> SEMICOLON var_type . MODULE funcs_comp
    (27) var_comp_recursive -> var_type . ids_dec var_comp_2 var_comp_final
    (28) var_comp_recursive -> var_type . ids_dec var_comp_2 SEMICOLON var_comp_recursive
    (32) ids_dec -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (33) ids_dec -> . ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (34) ids_dec -> . ID

    MODULE          shift and go to state 65
    ID              shift and go to state 23

    ids_dec                        shift and go to state 66

state 42

    (22) var_comp -> var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive .

    VOID            reduce using rule 22 (var_comp -> var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive .)
    INT             reduce using rule 22 (var_comp -> var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive .)
    FLOAT           reduce using rule 22 (var_comp -> var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive .)
    CHAR            reduce using rule 22 (var_comp -> var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive .)
    MAIN            reduce using rule 22 (var_comp -> var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive .)
    OPEN_BRACES     reduce using rule 22 (var_comp -> var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive .)


state 43

    (24) var_comp_2 -> COMMA ids_dec var_comp_3 .

    SEMICOLON       reduce using rule 24 (var_comp_2 -> COMMA ids_dec var_comp_3 .)


state 44

    (26) var_comp_3 -> var_comp_2 .

    SEMICOLON       reduce using rule 26 (var_comp_3 -> var_comp_2 .)


state 45

    (32) ids_dec -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS . OPEN_BRACKETS CT_INT CLOSE_BRACKETS
    (33) ids_dec -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS .

    OPEN_BRACKETS   shift and go to state 67
    COMMA           reduce using rule 33 (ids_dec -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS .)
    SEMICOLON       reduce using rule 33 (ids_dec -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS .)


state 46

    (13) block -> OPEN_BRACES statements . CLOSE_BRACES

    CLOSE_BRACES    shift and go to state 68


state 47

    (38) statements -> assignment . SEMICOLON statements

    SEMICOLON       shift and go to state 69


state 48

    (39) statements -> read . SEMICOLON statements

    SEMICOLON       shift and go to state 70


state 49

    (40) statements -> write . SEMICOLON statements

    SEMICOLON       shift and go to state 71


state 50

    (41) statements -> condition . statements
    (38) statements -> . assignment SEMICOLON statements
    (39) statements -> . read SEMICOLON statements
    (40) statements -> . write SEMICOLON statements
    (41) statements -> . condition statements
    (42) statements -> . return SEMICOLON statements
    (43) statements -> . func_call SEMICOLON statements
    (44) statements -> . empty
    (45) assignment -> . ids ASSIGN expressions
    (46) read -> . READ OPEN_PAREN ids read_comp CLOSE_PAREN
    (49) write -> . WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN
    (50) write -> . WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN
    (54) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block
    (55) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block
    (56) condition -> . WHILE OPEN_PAREN expressions CLOSE_PAREN DO block
    (57) condition -> . FOR ids ASSIGN expressions TO expressions DO block
    (58) return -> . RETURN OPEN_PAREN exp CLOSE_PAREN
    (59) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN
    (93) empty -> .
    (35) ids -> . ID OPEN_BRACKETS exp CLOSE_BRACKETS OPEN_BRACKETS exp CLOSE_BRACKETS
    (36) ids -> . ID OPEN_BRACKETS exp CLOSE_BRACKETS
    (37) ids -> . ID

    READ            shift and go to state 55
    WRITE           shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    RETURN          shift and go to state 60
    ID              shift and go to state 61
    CLOSE_BRACES    reduce using rule 93 (empty -> .)

    condition                      shift and go to state 50
    statements                     shift and go to state 72
    assignment                     shift and go to state 47
    read                           shift and go to state 48
    write                          shift and go to state 49
    return                         shift and go to state 51
    func_call                      shift and go to state 52
    empty                          shift and go to state 53
    ids                            shift and go to state 54

state 51

    (42) statements -> return . SEMICOLON statements

    SEMICOLON       shift and go to state 73


state 52

    (43) statements -> func_call . SEMICOLON statements

    SEMICOLON       shift and go to state 74


state 53

    (44) statements -> empty .

    CLOSE_BRACES    reduce using rule 44 (statements -> empty .)


state 54

    (45) assignment -> ids . ASSIGN expressions

    ASSIGN          shift and go to state 75


state 55

    (46) read -> READ . OPEN_PAREN ids read_comp CLOSE_PAREN

    OPEN_PAREN      shift and go to state 76


state 56

    (49) write -> WRITE . OPEN_PAREN CT_STRING write_comp CLOSE_PAREN
    (50) write -> WRITE . OPEN_PAREN expressions write_comp CLOSE_PAREN

    OPEN_PAREN      shift and go to state 77


state 57

    (54) condition -> IF . OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block
    (55) condition -> IF . OPEN_PAREN expressions CLOSE_PAREN THEN block

    OPEN_PAREN      shift and go to state 78


state 58

    (56) condition -> WHILE . OPEN_PAREN expressions CLOSE_PAREN DO block

    OPEN_PAREN      shift and go to state 79


state 59

    (57) condition -> FOR . ids ASSIGN expressions TO expressions DO block
    (35) ids -> . ID OPEN_BRACKETS exp CLOSE_BRACKETS OPEN_BRACKETS exp CLOSE_BRACKETS
    (36) ids -> . ID OPEN_BRACKETS exp CLOSE_BRACKETS
    (37) ids -> . ID

    ID              shift and go to state 81

    ids                            shift and go to state 80

state 60

    (58) return -> RETURN . OPEN_PAREN exp CLOSE_PAREN

    OPEN_PAREN      shift and go to state 82


state 61

    (59) func_call -> ID . OPEN_PAREN func_call_comp CLOSE_PAREN
    (35) ids -> ID . OPEN_BRACKETS exp CLOSE_BRACKETS OPEN_BRACKETS exp CLOSE_BRACKETS
    (36) ids -> ID . OPEN_BRACKETS exp CLOSE_BRACKETS
    (37) ids -> ID .

    OPEN_PAREN      shift and go to state 83
    OPEN_BRACKETS   shift and go to state 84
    ASSIGN          reduce using rule 37 (ids -> ID .)


state 62

    (5) funcs -> func_type MODULE ID add_module OPEN_PAREN funcs_params . CLOSE_PAREN vars block

    CLOSE_PAREN     shift and go to state 85


state 63

    (9) funcs_params -> var_type . variable funcs_params_comp
    (90) variable -> . ID
    (91) variable -> . ID dim

    ID              shift and go to state 87

    variable                       shift and go to state 86

state 64

    (10) funcs_params -> empty .

    CLOSE_PAREN     reduce using rule 10 (funcs_params -> empty .)


state 65

    (31) var_module_trans -> SEMICOLON var_type MODULE . funcs_comp
    (8) funcs_comp -> . ID add_module OPEN_PAREN funcs_params CLOSE_PAREN vars block

    ID              shift and go to state 89

    funcs_comp                     shift and go to state 88

state 66

    (27) var_comp_recursive -> var_type ids_dec . var_comp_2 var_comp_final
    (28) var_comp_recursive -> var_type ids_dec . var_comp_2 SEMICOLON var_comp_recursive
    (24) var_comp_2 -> . COMMA ids_dec var_comp_3
    (25) var_comp_2 -> . empty
    (93) empty -> .

    COMMA           shift and go to state 28
    SEMICOLON       reduce using rule 93 (empty -> .)

    var_comp_2                     shift and go to state 90
    empty                          shift and go to state 29

state 67

    (32) ids_dec -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS . CT_INT CLOSE_BRACKETS

    CT_INT          shift and go to state 91


state 68

    (13) block -> OPEN_BRACES statements CLOSE_BRACES .

    $end            reduce using rule 13 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    MAIN            reduce using rule 13 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    ELSE            reduce using rule 13 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    READ            reduce using rule 13 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    WRITE           reduce using rule 13 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    IF              reduce using rule 13 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    WHILE           reduce using rule 13 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    FOR             reduce using rule 13 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    RETURN          reduce using rule 13 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    ID              reduce using rule 13 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    CLOSE_BRACES    reduce using rule 13 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    VOID            reduce using rule 13 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    INT             reduce using rule 13 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    FLOAT           reduce using rule 13 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    CHAR            reduce using rule 13 (block -> OPEN_BRACES statements CLOSE_BRACES .)
    OPEN_BRACES     reduce using rule 13 (block -> OPEN_BRACES statements CLOSE_BRACES .)


state 69

    (38) statements -> assignment SEMICOLON . statements
    (38) statements -> . assignment SEMICOLON statements
    (39) statements -> . read SEMICOLON statements
    (40) statements -> . write SEMICOLON statements
    (41) statements -> . condition statements
    (42) statements -> . return SEMICOLON statements
    (43) statements -> . func_call SEMICOLON statements
    (44) statements -> . empty
    (45) assignment -> . ids ASSIGN expressions
    (46) read -> . READ OPEN_PAREN ids read_comp CLOSE_PAREN
    (49) write -> . WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN
    (50) write -> . WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN
    (54) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block
    (55) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block
    (56) condition -> . WHILE OPEN_PAREN expressions CLOSE_PAREN DO block
    (57) condition -> . FOR ids ASSIGN expressions TO expressions DO block
    (58) return -> . RETURN OPEN_PAREN exp CLOSE_PAREN
    (59) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN
    (93) empty -> .
    (35) ids -> . ID OPEN_BRACKETS exp CLOSE_BRACKETS OPEN_BRACKETS exp CLOSE_BRACKETS
    (36) ids -> . ID OPEN_BRACKETS exp CLOSE_BRACKETS
    (37) ids -> . ID

    READ            shift and go to state 55
    WRITE           shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    RETURN          shift and go to state 60
    ID              shift and go to state 61
    CLOSE_BRACES    reduce using rule 93 (empty -> .)

    assignment                     shift and go to state 47
    statements                     shift and go to state 92
    read                           shift and go to state 48
    write                          shift and go to state 49
    condition                      shift and go to state 50
    return                         shift and go to state 51
    func_call                      shift and go to state 52
    empty                          shift and go to state 53
    ids                            shift and go to state 54

state 70

    (39) statements -> read SEMICOLON . statements
    (38) statements -> . assignment SEMICOLON statements
    (39) statements -> . read SEMICOLON statements
    (40) statements -> . write SEMICOLON statements
    (41) statements -> . condition statements
    (42) statements -> . return SEMICOLON statements
    (43) statements -> . func_call SEMICOLON statements
    (44) statements -> . empty
    (45) assignment -> . ids ASSIGN expressions
    (46) read -> . READ OPEN_PAREN ids read_comp CLOSE_PAREN
    (49) write -> . WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN
    (50) write -> . WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN
    (54) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block
    (55) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block
    (56) condition -> . WHILE OPEN_PAREN expressions CLOSE_PAREN DO block
    (57) condition -> . FOR ids ASSIGN expressions TO expressions DO block
    (58) return -> . RETURN OPEN_PAREN exp CLOSE_PAREN
    (59) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN
    (93) empty -> .
    (35) ids -> . ID OPEN_BRACKETS exp CLOSE_BRACKETS OPEN_BRACKETS exp CLOSE_BRACKETS
    (36) ids -> . ID OPEN_BRACKETS exp CLOSE_BRACKETS
    (37) ids -> . ID

    READ            shift and go to state 55
    WRITE           shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    RETURN          shift and go to state 60
    ID              shift and go to state 61
    CLOSE_BRACES    reduce using rule 93 (empty -> .)

    read                           shift and go to state 48
    statements                     shift and go to state 93
    assignment                     shift and go to state 47
    write                          shift and go to state 49
    condition                      shift and go to state 50
    return                         shift and go to state 51
    func_call                      shift and go to state 52
    empty                          shift and go to state 53
    ids                            shift and go to state 54

state 71

    (40) statements -> write SEMICOLON . statements
    (38) statements -> . assignment SEMICOLON statements
    (39) statements -> . read SEMICOLON statements
    (40) statements -> . write SEMICOLON statements
    (41) statements -> . condition statements
    (42) statements -> . return SEMICOLON statements
    (43) statements -> . func_call SEMICOLON statements
    (44) statements -> . empty
    (45) assignment -> . ids ASSIGN expressions
    (46) read -> . READ OPEN_PAREN ids read_comp CLOSE_PAREN
    (49) write -> . WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN
    (50) write -> . WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN
    (54) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block
    (55) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block
    (56) condition -> . WHILE OPEN_PAREN expressions CLOSE_PAREN DO block
    (57) condition -> . FOR ids ASSIGN expressions TO expressions DO block
    (58) return -> . RETURN OPEN_PAREN exp CLOSE_PAREN
    (59) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN
    (93) empty -> .
    (35) ids -> . ID OPEN_BRACKETS exp CLOSE_BRACKETS OPEN_BRACKETS exp CLOSE_BRACKETS
    (36) ids -> . ID OPEN_BRACKETS exp CLOSE_BRACKETS
    (37) ids -> . ID

    READ            shift and go to state 55
    WRITE           shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    RETURN          shift and go to state 60
    ID              shift and go to state 61
    CLOSE_BRACES    reduce using rule 93 (empty -> .)

    write                          shift and go to state 49
    statements                     shift and go to state 94
    assignment                     shift and go to state 47
    read                           shift and go to state 48
    condition                      shift and go to state 50
    return                         shift and go to state 51
    func_call                      shift and go to state 52
    empty                          shift and go to state 53
    ids                            shift and go to state 54

state 72

    (41) statements -> condition statements .

    CLOSE_BRACES    reduce using rule 41 (statements -> condition statements .)


state 73

    (42) statements -> return SEMICOLON . statements
    (38) statements -> . assignment SEMICOLON statements
    (39) statements -> . read SEMICOLON statements
    (40) statements -> . write SEMICOLON statements
    (41) statements -> . condition statements
    (42) statements -> . return SEMICOLON statements
    (43) statements -> . func_call SEMICOLON statements
    (44) statements -> . empty
    (45) assignment -> . ids ASSIGN expressions
    (46) read -> . READ OPEN_PAREN ids read_comp CLOSE_PAREN
    (49) write -> . WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN
    (50) write -> . WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN
    (54) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block
    (55) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block
    (56) condition -> . WHILE OPEN_PAREN expressions CLOSE_PAREN DO block
    (57) condition -> . FOR ids ASSIGN expressions TO expressions DO block
    (58) return -> . RETURN OPEN_PAREN exp CLOSE_PAREN
    (59) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN
    (93) empty -> .
    (35) ids -> . ID OPEN_BRACKETS exp CLOSE_BRACKETS OPEN_BRACKETS exp CLOSE_BRACKETS
    (36) ids -> . ID OPEN_BRACKETS exp CLOSE_BRACKETS
    (37) ids -> . ID

    READ            shift and go to state 55
    WRITE           shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    RETURN          shift and go to state 60
    ID              shift and go to state 61
    CLOSE_BRACES    reduce using rule 93 (empty -> .)

    return                         shift and go to state 51
    statements                     shift and go to state 95
    assignment                     shift and go to state 47
    read                           shift and go to state 48
    write                          shift and go to state 49
    condition                      shift and go to state 50
    func_call                      shift and go to state 52
    empty                          shift and go to state 53
    ids                            shift and go to state 54

state 74

    (43) statements -> func_call SEMICOLON . statements
    (38) statements -> . assignment SEMICOLON statements
    (39) statements -> . read SEMICOLON statements
    (40) statements -> . write SEMICOLON statements
    (41) statements -> . condition statements
    (42) statements -> . return SEMICOLON statements
    (43) statements -> . func_call SEMICOLON statements
    (44) statements -> . empty
    (45) assignment -> . ids ASSIGN expressions
    (46) read -> . READ OPEN_PAREN ids read_comp CLOSE_PAREN
    (49) write -> . WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN
    (50) write -> . WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN
    (54) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block
    (55) condition -> . IF OPEN_PAREN expressions CLOSE_PAREN THEN block
    (56) condition -> . WHILE OPEN_PAREN expressions CLOSE_PAREN DO block
    (57) condition -> . FOR ids ASSIGN expressions TO expressions DO block
    (58) return -> . RETURN OPEN_PAREN exp CLOSE_PAREN
    (59) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN
    (93) empty -> .
    (35) ids -> . ID OPEN_BRACKETS exp CLOSE_BRACKETS OPEN_BRACKETS exp CLOSE_BRACKETS
    (36) ids -> . ID OPEN_BRACKETS exp CLOSE_BRACKETS
    (37) ids -> . ID

    READ            shift and go to state 55
    WRITE           shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    RETURN          shift and go to state 60
    ID              shift and go to state 61
    CLOSE_BRACES    reduce using rule 93 (empty -> .)

    func_call                      shift and go to state 52
    statements                     shift and go to state 96
    assignment                     shift and go to state 47
    read                           shift and go to state 48
    write                          shift and go to state 49
    condition                      shift and go to state 50
    return                         shift and go to state 51
    empty                          shift and go to state 53
    ids                            shift and go to state 54

state 75

    (45) assignment -> ids ASSIGN . expressions
    (63) expressions -> . expressions_comp
    (64) expressions_comp -> . expression_comp_2
    (65) expressions_comp -> . expression_comp_2 OR expressions_comp
    (66) expression_comp_2 -> . expression_comp_3
    (67) expression_comp_2 -> . expression_comp_3 AND expression_comp_2
    (68) expression_comp_3 -> . exp
    (69) expression_comp_3 -> . exp expressions_op exp
    (76) exp -> . term
    (77) exp -> . term exp_comp
    (80) term -> . factor
    (81) term -> . factor term_comp
    (84) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (85) factor -> . variable
    (86) factor -> . func_call
    (87) factor -> . CT_INT
    (88) factor -> . CT_FLOAT
    (89) factor -> . CT_CHAR
    (90) variable -> . ID
    (91) variable -> . ID dim
    (59) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN

    OPEN_PAREN      shift and go to state 104
    CT_INT          shift and go to state 107
    CT_FLOAT        shift and go to state 108
    CT_CHAR         shift and go to state 109
    ID              shift and go to state 110

    expressions                    shift and go to state 97
    expressions_comp               shift and go to state 98
    expression_comp_2              shift and go to state 99
    expression_comp_3              shift and go to state 100
    exp                            shift and go to state 101
    term                           shift and go to state 102
    factor                         shift and go to state 103
    variable                       shift and go to state 105
    func_call                      shift and go to state 106

state 76

    (46) read -> READ OPEN_PAREN . ids read_comp CLOSE_PAREN
    (35) ids -> . ID OPEN_BRACKETS exp CLOSE_BRACKETS OPEN_BRACKETS exp CLOSE_BRACKETS
    (36) ids -> . ID OPEN_BRACKETS exp CLOSE_BRACKETS
    (37) ids -> . ID

    ID              shift and go to state 81

    ids                            shift and go to state 111

state 77

    (49) write -> WRITE OPEN_PAREN . CT_STRING write_comp CLOSE_PAREN
    (50) write -> WRITE OPEN_PAREN . expressions write_comp CLOSE_PAREN
    (63) expressions -> . expressions_comp
    (64) expressions_comp -> . expression_comp_2
    (65) expressions_comp -> . expression_comp_2 OR expressions_comp
    (66) expression_comp_2 -> . expression_comp_3
    (67) expression_comp_2 -> . expression_comp_3 AND expression_comp_2
    (68) expression_comp_3 -> . exp
    (69) expression_comp_3 -> . exp expressions_op exp
    (76) exp -> . term
    (77) exp -> . term exp_comp
    (80) term -> . factor
    (81) term -> . factor term_comp
    (84) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (85) factor -> . variable
    (86) factor -> . func_call
    (87) factor -> . CT_INT
    (88) factor -> . CT_FLOAT
    (89) factor -> . CT_CHAR
    (90) variable -> . ID
    (91) variable -> . ID dim
    (59) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN

    CT_STRING       shift and go to state 112
    OPEN_PAREN      shift and go to state 104
    CT_INT          shift and go to state 107
    CT_FLOAT        shift and go to state 108
    CT_CHAR         shift and go to state 109
    ID              shift and go to state 110

    expressions                    shift and go to state 113
    expressions_comp               shift and go to state 98
    expression_comp_2              shift and go to state 99
    expression_comp_3              shift and go to state 100
    exp                            shift and go to state 101
    term                           shift and go to state 102
    factor                         shift and go to state 103
    variable                       shift and go to state 105
    func_call                      shift and go to state 106

state 78

    (54) condition -> IF OPEN_PAREN . expressions CLOSE_PAREN THEN block ELSE block
    (55) condition -> IF OPEN_PAREN . expressions CLOSE_PAREN THEN block
    (63) expressions -> . expressions_comp
    (64) expressions_comp -> . expression_comp_2
    (65) expressions_comp -> . expression_comp_2 OR expressions_comp
    (66) expression_comp_2 -> . expression_comp_3
    (67) expression_comp_2 -> . expression_comp_3 AND expression_comp_2
    (68) expression_comp_3 -> . exp
    (69) expression_comp_3 -> . exp expressions_op exp
    (76) exp -> . term
    (77) exp -> . term exp_comp
    (80) term -> . factor
    (81) term -> . factor term_comp
    (84) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (85) factor -> . variable
    (86) factor -> . func_call
    (87) factor -> . CT_INT
    (88) factor -> . CT_FLOAT
    (89) factor -> . CT_CHAR
    (90) variable -> . ID
    (91) variable -> . ID dim
    (59) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN

    OPEN_PAREN      shift and go to state 104
    CT_INT          shift and go to state 107
    CT_FLOAT        shift and go to state 108
    CT_CHAR         shift and go to state 109
    ID              shift and go to state 110

    expressions                    shift and go to state 114
    expressions_comp               shift and go to state 98
    expression_comp_2              shift and go to state 99
    expression_comp_3              shift and go to state 100
    exp                            shift and go to state 101
    term                           shift and go to state 102
    factor                         shift and go to state 103
    variable                       shift and go to state 105
    func_call                      shift and go to state 106

state 79

    (56) condition -> WHILE OPEN_PAREN . expressions CLOSE_PAREN DO block
    (63) expressions -> . expressions_comp
    (64) expressions_comp -> . expression_comp_2
    (65) expressions_comp -> . expression_comp_2 OR expressions_comp
    (66) expression_comp_2 -> . expression_comp_3
    (67) expression_comp_2 -> . expression_comp_3 AND expression_comp_2
    (68) expression_comp_3 -> . exp
    (69) expression_comp_3 -> . exp expressions_op exp
    (76) exp -> . term
    (77) exp -> . term exp_comp
    (80) term -> . factor
    (81) term -> . factor term_comp
    (84) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (85) factor -> . variable
    (86) factor -> . func_call
    (87) factor -> . CT_INT
    (88) factor -> . CT_FLOAT
    (89) factor -> . CT_CHAR
    (90) variable -> . ID
    (91) variable -> . ID dim
    (59) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN

    OPEN_PAREN      shift and go to state 104
    CT_INT          shift and go to state 107
    CT_FLOAT        shift and go to state 108
    CT_CHAR         shift and go to state 109
    ID              shift and go to state 110

    expressions                    shift and go to state 115
    expressions_comp               shift and go to state 98
    expression_comp_2              shift and go to state 99
    expression_comp_3              shift and go to state 100
    exp                            shift and go to state 101
    term                           shift and go to state 102
    factor                         shift and go to state 103
    variable                       shift and go to state 105
    func_call                      shift and go to state 106

state 80

    (57) condition -> FOR ids . ASSIGN expressions TO expressions DO block

    ASSIGN          shift and go to state 116


state 81

    (35) ids -> ID . OPEN_BRACKETS exp CLOSE_BRACKETS OPEN_BRACKETS exp CLOSE_BRACKETS
    (36) ids -> ID . OPEN_BRACKETS exp CLOSE_BRACKETS
    (37) ids -> ID .

    OPEN_BRACKETS   shift and go to state 84
    ASSIGN          reduce using rule 37 (ids -> ID .)
    COMMA           reduce using rule 37 (ids -> ID .)
    CLOSE_PAREN     reduce using rule 37 (ids -> ID .)


state 82

    (58) return -> RETURN OPEN_PAREN . exp CLOSE_PAREN
    (76) exp -> . term
    (77) exp -> . term exp_comp
    (80) term -> . factor
    (81) term -> . factor term_comp
    (84) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (85) factor -> . variable
    (86) factor -> . func_call
    (87) factor -> . CT_INT
    (88) factor -> . CT_FLOAT
    (89) factor -> . CT_CHAR
    (90) variable -> . ID
    (91) variable -> . ID dim
    (59) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN

    OPEN_PAREN      shift and go to state 104
    CT_INT          shift and go to state 107
    CT_FLOAT        shift and go to state 108
    CT_CHAR         shift and go to state 109
    ID              shift and go to state 110

    exp                            shift and go to state 117
    term                           shift and go to state 102
    factor                         shift and go to state 103
    variable                       shift and go to state 105
    func_call                      shift and go to state 106

state 83

    (59) func_call -> ID OPEN_PAREN . func_call_comp CLOSE_PAREN
    (60) func_call_comp -> . expressions func_call_comp
    (61) func_call_comp -> . COMMA expressions func_call_comp
    (62) func_call_comp -> . empty
    (63) expressions -> . expressions_comp
    (93) empty -> .
    (64) expressions_comp -> . expression_comp_2
    (65) expressions_comp -> . expression_comp_2 OR expressions_comp
    (66) expression_comp_2 -> . expression_comp_3
    (67) expression_comp_2 -> . expression_comp_3 AND expression_comp_2
    (68) expression_comp_3 -> . exp
    (69) expression_comp_3 -> . exp expressions_op exp
    (76) exp -> . term
    (77) exp -> . term exp_comp
    (80) term -> . factor
    (81) term -> . factor term_comp
    (84) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (85) factor -> . variable
    (86) factor -> . func_call
    (87) factor -> . CT_INT
    (88) factor -> . CT_FLOAT
    (89) factor -> . CT_CHAR
    (90) variable -> . ID
    (91) variable -> . ID dim
    (59) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN

    COMMA           shift and go to state 120
    CLOSE_PAREN     reduce using rule 93 (empty -> .)
    OPEN_PAREN      shift and go to state 104
    CT_INT          shift and go to state 107
    CT_FLOAT        shift and go to state 108
    CT_CHAR         shift and go to state 109
    ID              shift and go to state 110

    func_call_comp                 shift and go to state 118
    expressions                    shift and go to state 119
    empty                          shift and go to state 121
    expressions_comp               shift and go to state 98
    expression_comp_2              shift and go to state 99
    expression_comp_3              shift and go to state 100
    exp                            shift and go to state 101
    term                           shift and go to state 102
    factor                         shift and go to state 103
    variable                       shift and go to state 105
    func_call                      shift and go to state 106

state 84

    (35) ids -> ID OPEN_BRACKETS . exp CLOSE_BRACKETS OPEN_BRACKETS exp CLOSE_BRACKETS
    (36) ids -> ID OPEN_BRACKETS . exp CLOSE_BRACKETS
    (76) exp -> . term
    (77) exp -> . term exp_comp
    (80) term -> . factor
    (81) term -> . factor term_comp
    (84) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (85) factor -> . variable
    (86) factor -> . func_call
    (87) factor -> . CT_INT
    (88) factor -> . CT_FLOAT
    (89) factor -> . CT_CHAR
    (90) variable -> . ID
    (91) variable -> . ID dim
    (59) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN

    OPEN_PAREN      shift and go to state 104
    CT_INT          shift and go to state 107
    CT_FLOAT        shift and go to state 108
    CT_CHAR         shift and go to state 109
    ID              shift and go to state 110

    exp                            shift and go to state 122
    term                           shift and go to state 102
    factor                         shift and go to state 103
    variable                       shift and go to state 105
    func_call                      shift and go to state 106

state 85

    (5) funcs -> func_type MODULE ID add_module OPEN_PAREN funcs_params CLOSE_PAREN . vars block
    (19) vars -> . VARS var_comp
    (20) vars -> . empty
    (93) empty -> .

    VARS            shift and go to state 7
    OPEN_BRACES     reduce using rule 93 (empty -> .)

    vars                           shift and go to state 123
    empty                          shift and go to state 8

state 86

    (9) funcs_params -> var_type variable . funcs_params_comp
    (11) funcs_params_comp -> . COMMA var_type ID funcs_params_comp
    (12) funcs_params_comp -> . empty
    (93) empty -> .

    COMMA           shift and go to state 125
    CLOSE_PAREN     reduce using rule 93 (empty -> .)

    funcs_params_comp              shift and go to state 124
    empty                          shift and go to state 126

state 87

    (90) variable -> ID .
    (91) variable -> ID . dim
    (92) dim -> . OPEN_BRACKETS exp CLOSE_BRACKETS

    COMMA           reduce using rule 90 (variable -> ID .)
    CLOSE_PAREN     reduce using rule 90 (variable -> ID .)
    OPEN_BRACKETS   shift and go to state 128

    dim                            shift and go to state 127

state 88

    (31) var_module_trans -> SEMICOLON var_type MODULE funcs_comp .

    VOID            reduce using rule 31 (var_module_trans -> SEMICOLON var_type MODULE funcs_comp .)
    INT             reduce using rule 31 (var_module_trans -> SEMICOLON var_type MODULE funcs_comp .)
    FLOAT           reduce using rule 31 (var_module_trans -> SEMICOLON var_type MODULE funcs_comp .)
    CHAR            reduce using rule 31 (var_module_trans -> SEMICOLON var_type MODULE funcs_comp .)
    MAIN            reduce using rule 31 (var_module_trans -> SEMICOLON var_type MODULE funcs_comp .)
    OPEN_BRACES     reduce using rule 31 (var_module_trans -> SEMICOLON var_type MODULE funcs_comp .)


state 89

    (8) funcs_comp -> ID . add_module OPEN_PAREN funcs_params CLOSE_PAREN vars block
    (7) add_module -> .

    OPEN_PAREN      reduce using rule 7 (add_module -> .)

    add_module                     shift and go to state 129

state 90

    (27) var_comp_recursive -> var_type ids_dec var_comp_2 . var_comp_final
    (28) var_comp_recursive -> var_type ids_dec var_comp_2 . SEMICOLON var_comp_recursive
    (29) var_comp_final -> . SEMICOLON
    (30) var_comp_final -> . var_module_trans
    (31) var_module_trans -> . SEMICOLON var_type MODULE funcs_comp

    SEMICOLON       shift and go to state 131

    var_comp_final                 shift and go to state 130
    var_module_trans               shift and go to state 35

state 91

    (32) ids_dec -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT . CLOSE_BRACKETS

    CLOSE_BRACKETS  shift and go to state 132


state 92

    (38) statements -> assignment SEMICOLON statements .

    CLOSE_BRACES    reduce using rule 38 (statements -> assignment SEMICOLON statements .)


state 93

    (39) statements -> read SEMICOLON statements .

    CLOSE_BRACES    reduce using rule 39 (statements -> read SEMICOLON statements .)


state 94

    (40) statements -> write SEMICOLON statements .

    CLOSE_BRACES    reduce using rule 40 (statements -> write SEMICOLON statements .)


state 95

    (42) statements -> return SEMICOLON statements .

    CLOSE_BRACES    reduce using rule 42 (statements -> return SEMICOLON statements .)


state 96

    (43) statements -> func_call SEMICOLON statements .

    CLOSE_BRACES    reduce using rule 43 (statements -> func_call SEMICOLON statements .)


state 97

    (45) assignment -> ids ASSIGN expressions .

    SEMICOLON       reduce using rule 45 (assignment -> ids ASSIGN expressions .)


state 98

    (63) expressions -> expressions_comp .

    SEMICOLON       reduce using rule 63 (expressions -> expressions_comp .)
    COMMA           reduce using rule 63 (expressions -> expressions_comp .)
    CLOSE_PAREN     reduce using rule 63 (expressions -> expressions_comp .)
    OPEN_PAREN      reduce using rule 63 (expressions -> expressions_comp .)
    CT_INT          reduce using rule 63 (expressions -> expressions_comp .)
    CT_FLOAT        reduce using rule 63 (expressions -> expressions_comp .)
    CT_CHAR         reduce using rule 63 (expressions -> expressions_comp .)
    ID              reduce using rule 63 (expressions -> expressions_comp .)
    TO              reduce using rule 63 (expressions -> expressions_comp .)
    DO              reduce using rule 63 (expressions -> expressions_comp .)


state 99

    (64) expressions_comp -> expression_comp_2 .
    (65) expressions_comp -> expression_comp_2 . OR expressions_comp

    SEMICOLON       reduce using rule 64 (expressions_comp -> expression_comp_2 .)
    COMMA           reduce using rule 64 (expressions_comp -> expression_comp_2 .)
    CLOSE_PAREN     reduce using rule 64 (expressions_comp -> expression_comp_2 .)
    OPEN_PAREN      reduce using rule 64 (expressions_comp -> expression_comp_2 .)
    CT_INT          reduce using rule 64 (expressions_comp -> expression_comp_2 .)
    CT_FLOAT        reduce using rule 64 (expressions_comp -> expression_comp_2 .)
    CT_CHAR         reduce using rule 64 (expressions_comp -> expression_comp_2 .)
    ID              reduce using rule 64 (expressions_comp -> expression_comp_2 .)
    TO              reduce using rule 64 (expressions_comp -> expression_comp_2 .)
    DO              reduce using rule 64 (expressions_comp -> expression_comp_2 .)
    OR              shift and go to state 133


state 100

    (66) expression_comp_2 -> expression_comp_3 .
    (67) expression_comp_2 -> expression_comp_3 . AND expression_comp_2

    OR              reduce using rule 66 (expression_comp_2 -> expression_comp_3 .)
    SEMICOLON       reduce using rule 66 (expression_comp_2 -> expression_comp_3 .)
    COMMA           reduce using rule 66 (expression_comp_2 -> expression_comp_3 .)
    CLOSE_PAREN     reduce using rule 66 (expression_comp_2 -> expression_comp_3 .)
    OPEN_PAREN      reduce using rule 66 (expression_comp_2 -> expression_comp_3 .)
    CT_INT          reduce using rule 66 (expression_comp_2 -> expression_comp_3 .)
    CT_FLOAT        reduce using rule 66 (expression_comp_2 -> expression_comp_3 .)
    CT_CHAR         reduce using rule 66 (expression_comp_2 -> expression_comp_3 .)
    ID              reduce using rule 66 (expression_comp_2 -> expression_comp_3 .)
    TO              reduce using rule 66 (expression_comp_2 -> expression_comp_3 .)
    DO              reduce using rule 66 (expression_comp_2 -> expression_comp_3 .)
    AND             shift and go to state 134


state 101

    (68) expression_comp_3 -> exp .
    (69) expression_comp_3 -> exp . expressions_op exp
    (70) expressions_op -> . LESS_THAN
    (71) expressions_op -> . LESS_THAN_EQUAL
    (72) expressions_op -> . MORE_THAN
    (73) expressions_op -> . MORE_THAN_EQUAL
    (74) expressions_op -> . EQUALS
    (75) expressions_op -> . NOT_EQUALS

    AND             reduce using rule 68 (expression_comp_3 -> exp .)
    OR              reduce using rule 68 (expression_comp_3 -> exp .)
    SEMICOLON       reduce using rule 68 (expression_comp_3 -> exp .)
    COMMA           reduce using rule 68 (expression_comp_3 -> exp .)
    CLOSE_PAREN     reduce using rule 68 (expression_comp_3 -> exp .)
    OPEN_PAREN      reduce using rule 68 (expression_comp_3 -> exp .)
    CT_INT          reduce using rule 68 (expression_comp_3 -> exp .)
    CT_FLOAT        reduce using rule 68 (expression_comp_3 -> exp .)
    CT_CHAR         reduce using rule 68 (expression_comp_3 -> exp .)
    ID              reduce using rule 68 (expression_comp_3 -> exp .)
    TO              reduce using rule 68 (expression_comp_3 -> exp .)
    DO              reduce using rule 68 (expression_comp_3 -> exp .)
    LESS_THAN       shift and go to state 136
    LESS_THAN_EQUAL shift and go to state 137
    MORE_THAN       shift and go to state 138
    MORE_THAN_EQUAL shift and go to state 139
    EQUALS          shift and go to state 140
    NOT_EQUALS      shift and go to state 141

    expressions_op                 shift and go to state 135

state 102

    (76) exp -> term .
    (77) exp -> term . exp_comp
    (78) exp_comp -> . PLUS exp
    (79) exp_comp -> . MINUS exp

    LESS_THAN       reduce using rule 76 (exp -> term .)
    LESS_THAN_EQUAL reduce using rule 76 (exp -> term .)
    MORE_THAN       reduce using rule 76 (exp -> term .)
    MORE_THAN_EQUAL reduce using rule 76 (exp -> term .)
    EQUALS          reduce using rule 76 (exp -> term .)
    NOT_EQUALS      reduce using rule 76 (exp -> term .)
    AND             reduce using rule 76 (exp -> term .)
    OR              reduce using rule 76 (exp -> term .)
    SEMICOLON       reduce using rule 76 (exp -> term .)
    COMMA           reduce using rule 76 (exp -> term .)
    CLOSE_PAREN     reduce using rule 76 (exp -> term .)
    OPEN_PAREN      reduce using rule 76 (exp -> term .)
    CT_INT          reduce using rule 76 (exp -> term .)
    CT_FLOAT        reduce using rule 76 (exp -> term .)
    CT_CHAR         reduce using rule 76 (exp -> term .)
    ID              reduce using rule 76 (exp -> term .)
    CLOSE_BRACKETS  reduce using rule 76 (exp -> term .)
    TO              reduce using rule 76 (exp -> term .)
    DO              reduce using rule 76 (exp -> term .)
    PLUS            shift and go to state 143
    MINUS           shift and go to state 144

    exp_comp                       shift and go to state 142

state 103

    (80) term -> factor .
    (81) term -> factor . term_comp
    (82) term_comp -> . MULTIPLIES term
    (83) term_comp -> . DIVIDE term

    PLUS            reduce using rule 80 (term -> factor .)
    MINUS           reduce using rule 80 (term -> factor .)
    LESS_THAN       reduce using rule 80 (term -> factor .)
    LESS_THAN_EQUAL reduce using rule 80 (term -> factor .)
    MORE_THAN       reduce using rule 80 (term -> factor .)
    MORE_THAN_EQUAL reduce using rule 80 (term -> factor .)
    EQUALS          reduce using rule 80 (term -> factor .)
    NOT_EQUALS      reduce using rule 80 (term -> factor .)
    AND             reduce using rule 80 (term -> factor .)
    OR              reduce using rule 80 (term -> factor .)
    SEMICOLON       reduce using rule 80 (term -> factor .)
    COMMA           reduce using rule 80 (term -> factor .)
    CLOSE_PAREN     reduce using rule 80 (term -> factor .)
    OPEN_PAREN      reduce using rule 80 (term -> factor .)
    CT_INT          reduce using rule 80 (term -> factor .)
    CT_FLOAT        reduce using rule 80 (term -> factor .)
    CT_CHAR         reduce using rule 80 (term -> factor .)
    ID              reduce using rule 80 (term -> factor .)
    CLOSE_BRACKETS  reduce using rule 80 (term -> factor .)
    TO              reduce using rule 80 (term -> factor .)
    DO              reduce using rule 80 (term -> factor .)
    MULTIPLIES      shift and go to state 146
    DIVIDE          shift and go to state 147

    term_comp                      shift and go to state 145

state 104

    (84) factor -> OPEN_PAREN . expressions CLOSE_PAREN
    (63) expressions -> . expressions_comp
    (64) expressions_comp -> . expression_comp_2
    (65) expressions_comp -> . expression_comp_2 OR expressions_comp
    (66) expression_comp_2 -> . expression_comp_3
    (67) expression_comp_2 -> . expression_comp_3 AND expression_comp_2
    (68) expression_comp_3 -> . exp
    (69) expression_comp_3 -> . exp expressions_op exp
    (76) exp -> . term
    (77) exp -> . term exp_comp
    (80) term -> . factor
    (81) term -> . factor term_comp
    (84) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (85) factor -> . variable
    (86) factor -> . func_call
    (87) factor -> . CT_INT
    (88) factor -> . CT_FLOAT
    (89) factor -> . CT_CHAR
    (90) variable -> . ID
    (91) variable -> . ID dim
    (59) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN

    OPEN_PAREN      shift and go to state 104
    CT_INT          shift and go to state 107
    CT_FLOAT        shift and go to state 108
    CT_CHAR         shift and go to state 109
    ID              shift and go to state 110

    expressions                    shift and go to state 148
    expressions_comp               shift and go to state 98
    expression_comp_2              shift and go to state 99
    expression_comp_3              shift and go to state 100
    exp                            shift and go to state 101
    term                           shift and go to state 102
    factor                         shift and go to state 103
    variable                       shift and go to state 105
    func_call                      shift and go to state 106

state 105

    (85) factor -> variable .

    MULTIPLIES      reduce using rule 85 (factor -> variable .)
    DIVIDE          reduce using rule 85 (factor -> variable .)
    PLUS            reduce using rule 85 (factor -> variable .)
    MINUS           reduce using rule 85 (factor -> variable .)
    LESS_THAN       reduce using rule 85 (factor -> variable .)
    LESS_THAN_EQUAL reduce using rule 85 (factor -> variable .)
    MORE_THAN       reduce using rule 85 (factor -> variable .)
    MORE_THAN_EQUAL reduce using rule 85 (factor -> variable .)
    EQUALS          reduce using rule 85 (factor -> variable .)
    NOT_EQUALS      reduce using rule 85 (factor -> variable .)
    AND             reduce using rule 85 (factor -> variable .)
    OR              reduce using rule 85 (factor -> variable .)
    SEMICOLON       reduce using rule 85 (factor -> variable .)
    COMMA           reduce using rule 85 (factor -> variable .)
    CLOSE_PAREN     reduce using rule 85 (factor -> variable .)
    OPEN_PAREN      reduce using rule 85 (factor -> variable .)
    CT_INT          reduce using rule 85 (factor -> variable .)
    CT_FLOAT        reduce using rule 85 (factor -> variable .)
    CT_CHAR         reduce using rule 85 (factor -> variable .)
    ID              reduce using rule 85 (factor -> variable .)
    CLOSE_BRACKETS  reduce using rule 85 (factor -> variable .)
    TO              reduce using rule 85 (factor -> variable .)
    DO              reduce using rule 85 (factor -> variable .)


state 106

    (86) factor -> func_call .

    MULTIPLIES      reduce using rule 86 (factor -> func_call .)
    DIVIDE          reduce using rule 86 (factor -> func_call .)
    PLUS            reduce using rule 86 (factor -> func_call .)
    MINUS           reduce using rule 86 (factor -> func_call .)
    LESS_THAN       reduce using rule 86 (factor -> func_call .)
    LESS_THAN_EQUAL reduce using rule 86 (factor -> func_call .)
    MORE_THAN       reduce using rule 86 (factor -> func_call .)
    MORE_THAN_EQUAL reduce using rule 86 (factor -> func_call .)
    EQUALS          reduce using rule 86 (factor -> func_call .)
    NOT_EQUALS      reduce using rule 86 (factor -> func_call .)
    AND             reduce using rule 86 (factor -> func_call .)
    OR              reduce using rule 86 (factor -> func_call .)
    SEMICOLON       reduce using rule 86 (factor -> func_call .)
    COMMA           reduce using rule 86 (factor -> func_call .)
    CLOSE_PAREN     reduce using rule 86 (factor -> func_call .)
    OPEN_PAREN      reduce using rule 86 (factor -> func_call .)
    CT_INT          reduce using rule 86 (factor -> func_call .)
    CT_FLOAT        reduce using rule 86 (factor -> func_call .)
    CT_CHAR         reduce using rule 86 (factor -> func_call .)
    ID              reduce using rule 86 (factor -> func_call .)
    CLOSE_BRACKETS  reduce using rule 86 (factor -> func_call .)
    TO              reduce using rule 86 (factor -> func_call .)
    DO              reduce using rule 86 (factor -> func_call .)


state 107

    (87) factor -> CT_INT .

    MULTIPLIES      reduce using rule 87 (factor -> CT_INT .)
    DIVIDE          reduce using rule 87 (factor -> CT_INT .)
    PLUS            reduce using rule 87 (factor -> CT_INT .)
    MINUS           reduce using rule 87 (factor -> CT_INT .)
    LESS_THAN       reduce using rule 87 (factor -> CT_INT .)
    LESS_THAN_EQUAL reduce using rule 87 (factor -> CT_INT .)
    MORE_THAN       reduce using rule 87 (factor -> CT_INT .)
    MORE_THAN_EQUAL reduce using rule 87 (factor -> CT_INT .)
    EQUALS          reduce using rule 87 (factor -> CT_INT .)
    NOT_EQUALS      reduce using rule 87 (factor -> CT_INT .)
    AND             reduce using rule 87 (factor -> CT_INT .)
    OR              reduce using rule 87 (factor -> CT_INT .)
    SEMICOLON       reduce using rule 87 (factor -> CT_INT .)
    COMMA           reduce using rule 87 (factor -> CT_INT .)
    CLOSE_PAREN     reduce using rule 87 (factor -> CT_INT .)
    OPEN_PAREN      reduce using rule 87 (factor -> CT_INT .)
    CT_INT          reduce using rule 87 (factor -> CT_INT .)
    CT_FLOAT        reduce using rule 87 (factor -> CT_INT .)
    CT_CHAR         reduce using rule 87 (factor -> CT_INT .)
    ID              reduce using rule 87 (factor -> CT_INT .)
    CLOSE_BRACKETS  reduce using rule 87 (factor -> CT_INT .)
    TO              reduce using rule 87 (factor -> CT_INT .)
    DO              reduce using rule 87 (factor -> CT_INT .)


state 108

    (88) factor -> CT_FLOAT .

    MULTIPLIES      reduce using rule 88 (factor -> CT_FLOAT .)
    DIVIDE          reduce using rule 88 (factor -> CT_FLOAT .)
    PLUS            reduce using rule 88 (factor -> CT_FLOAT .)
    MINUS           reduce using rule 88 (factor -> CT_FLOAT .)
    LESS_THAN       reduce using rule 88 (factor -> CT_FLOAT .)
    LESS_THAN_EQUAL reduce using rule 88 (factor -> CT_FLOAT .)
    MORE_THAN       reduce using rule 88 (factor -> CT_FLOAT .)
    MORE_THAN_EQUAL reduce using rule 88 (factor -> CT_FLOAT .)
    EQUALS          reduce using rule 88 (factor -> CT_FLOAT .)
    NOT_EQUALS      reduce using rule 88 (factor -> CT_FLOAT .)
    AND             reduce using rule 88 (factor -> CT_FLOAT .)
    OR              reduce using rule 88 (factor -> CT_FLOAT .)
    SEMICOLON       reduce using rule 88 (factor -> CT_FLOAT .)
    COMMA           reduce using rule 88 (factor -> CT_FLOAT .)
    CLOSE_PAREN     reduce using rule 88 (factor -> CT_FLOAT .)
    OPEN_PAREN      reduce using rule 88 (factor -> CT_FLOAT .)
    CT_INT          reduce using rule 88 (factor -> CT_FLOAT .)
    CT_FLOAT        reduce using rule 88 (factor -> CT_FLOAT .)
    CT_CHAR         reduce using rule 88 (factor -> CT_FLOAT .)
    ID              reduce using rule 88 (factor -> CT_FLOAT .)
    CLOSE_BRACKETS  reduce using rule 88 (factor -> CT_FLOAT .)
    TO              reduce using rule 88 (factor -> CT_FLOAT .)
    DO              reduce using rule 88 (factor -> CT_FLOAT .)


state 109

    (89) factor -> CT_CHAR .

    MULTIPLIES      reduce using rule 89 (factor -> CT_CHAR .)
    DIVIDE          reduce using rule 89 (factor -> CT_CHAR .)
    PLUS            reduce using rule 89 (factor -> CT_CHAR .)
    MINUS           reduce using rule 89 (factor -> CT_CHAR .)
    LESS_THAN       reduce using rule 89 (factor -> CT_CHAR .)
    LESS_THAN_EQUAL reduce using rule 89 (factor -> CT_CHAR .)
    MORE_THAN       reduce using rule 89 (factor -> CT_CHAR .)
    MORE_THAN_EQUAL reduce using rule 89 (factor -> CT_CHAR .)
    EQUALS          reduce using rule 89 (factor -> CT_CHAR .)
    NOT_EQUALS      reduce using rule 89 (factor -> CT_CHAR .)
    AND             reduce using rule 89 (factor -> CT_CHAR .)
    OR              reduce using rule 89 (factor -> CT_CHAR .)
    SEMICOLON       reduce using rule 89 (factor -> CT_CHAR .)
    COMMA           reduce using rule 89 (factor -> CT_CHAR .)
    CLOSE_PAREN     reduce using rule 89 (factor -> CT_CHAR .)
    OPEN_PAREN      reduce using rule 89 (factor -> CT_CHAR .)
    CT_INT          reduce using rule 89 (factor -> CT_CHAR .)
    CT_FLOAT        reduce using rule 89 (factor -> CT_CHAR .)
    CT_CHAR         reduce using rule 89 (factor -> CT_CHAR .)
    ID              reduce using rule 89 (factor -> CT_CHAR .)
    CLOSE_BRACKETS  reduce using rule 89 (factor -> CT_CHAR .)
    TO              reduce using rule 89 (factor -> CT_CHAR .)
    DO              reduce using rule 89 (factor -> CT_CHAR .)


state 110

    (90) variable -> ID .
    (91) variable -> ID . dim
    (59) func_call -> ID . OPEN_PAREN func_call_comp CLOSE_PAREN
    (92) dim -> . OPEN_BRACKETS exp CLOSE_BRACKETS

  ! shift/reduce conflict for OPEN_PAREN resolved as shift
    MULTIPLIES      reduce using rule 90 (variable -> ID .)
    DIVIDE          reduce using rule 90 (variable -> ID .)
    PLUS            reduce using rule 90 (variable -> ID .)
    MINUS           reduce using rule 90 (variable -> ID .)
    LESS_THAN       reduce using rule 90 (variable -> ID .)
    LESS_THAN_EQUAL reduce using rule 90 (variable -> ID .)
    MORE_THAN       reduce using rule 90 (variable -> ID .)
    MORE_THAN_EQUAL reduce using rule 90 (variable -> ID .)
    EQUALS          reduce using rule 90 (variable -> ID .)
    NOT_EQUALS      reduce using rule 90 (variable -> ID .)
    AND             reduce using rule 90 (variable -> ID .)
    OR              reduce using rule 90 (variable -> ID .)
    SEMICOLON       reduce using rule 90 (variable -> ID .)
    COMMA           reduce using rule 90 (variable -> ID .)
    CLOSE_PAREN     reduce using rule 90 (variable -> ID .)
    CT_INT          reduce using rule 90 (variable -> ID .)
    CT_FLOAT        reduce using rule 90 (variable -> ID .)
    CT_CHAR         reduce using rule 90 (variable -> ID .)
    ID              reduce using rule 90 (variable -> ID .)
    CLOSE_BRACKETS  reduce using rule 90 (variable -> ID .)
    TO              reduce using rule 90 (variable -> ID .)
    DO              reduce using rule 90 (variable -> ID .)
    OPEN_PAREN      shift and go to state 83
    OPEN_BRACKETS   shift and go to state 128

  ! OPEN_PAREN      [ reduce using rule 90 (variable -> ID .) ]

    dim                            shift and go to state 127

state 111

    (46) read -> READ OPEN_PAREN ids . read_comp CLOSE_PAREN
    (47) read_comp -> . COMMA ids read_comp
    (48) read_comp -> . empty
    (93) empty -> .

    COMMA           shift and go to state 150
    CLOSE_PAREN     reduce using rule 93 (empty -> .)

    read_comp                      shift and go to state 149
    empty                          shift and go to state 151

state 112

    (49) write -> WRITE OPEN_PAREN CT_STRING . write_comp CLOSE_PAREN
    (51) write_comp -> . COMMA CT_STRING write_comp
    (52) write_comp -> . COMMA expressions write_comp
    (53) write_comp -> . empty
    (93) empty -> .

    COMMA           shift and go to state 153
    CLOSE_PAREN     reduce using rule 93 (empty -> .)

    write_comp                     shift and go to state 152
    empty                          shift and go to state 154

state 113

    (50) write -> WRITE OPEN_PAREN expressions . write_comp CLOSE_PAREN
    (51) write_comp -> . COMMA CT_STRING write_comp
    (52) write_comp -> . COMMA expressions write_comp
    (53) write_comp -> . empty
    (93) empty -> .

    COMMA           shift and go to state 153
    CLOSE_PAREN     reduce using rule 93 (empty -> .)

    write_comp                     shift and go to state 155
    empty                          shift and go to state 154

state 114

    (54) condition -> IF OPEN_PAREN expressions . CLOSE_PAREN THEN block ELSE block
    (55) condition -> IF OPEN_PAREN expressions . CLOSE_PAREN THEN block

    CLOSE_PAREN     shift and go to state 156


state 115

    (56) condition -> WHILE OPEN_PAREN expressions . CLOSE_PAREN DO block

    CLOSE_PAREN     shift and go to state 157


state 116

    (57) condition -> FOR ids ASSIGN . expressions TO expressions DO block
    (63) expressions -> . expressions_comp
    (64) expressions_comp -> . expression_comp_2
    (65) expressions_comp -> . expression_comp_2 OR expressions_comp
    (66) expression_comp_2 -> . expression_comp_3
    (67) expression_comp_2 -> . expression_comp_3 AND expression_comp_2
    (68) expression_comp_3 -> . exp
    (69) expression_comp_3 -> . exp expressions_op exp
    (76) exp -> . term
    (77) exp -> . term exp_comp
    (80) term -> . factor
    (81) term -> . factor term_comp
    (84) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (85) factor -> . variable
    (86) factor -> . func_call
    (87) factor -> . CT_INT
    (88) factor -> . CT_FLOAT
    (89) factor -> . CT_CHAR
    (90) variable -> . ID
    (91) variable -> . ID dim
    (59) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN

    OPEN_PAREN      shift and go to state 104
    CT_INT          shift and go to state 107
    CT_FLOAT        shift and go to state 108
    CT_CHAR         shift and go to state 109
    ID              shift and go to state 110

    expressions                    shift and go to state 158
    expressions_comp               shift and go to state 98
    expression_comp_2              shift and go to state 99
    expression_comp_3              shift and go to state 100
    exp                            shift and go to state 101
    term                           shift and go to state 102
    factor                         shift and go to state 103
    variable                       shift and go to state 105
    func_call                      shift and go to state 106

state 117

    (58) return -> RETURN OPEN_PAREN exp . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 159


state 118

    (59) func_call -> ID OPEN_PAREN func_call_comp . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 160


state 119

    (60) func_call_comp -> expressions . func_call_comp
    (60) func_call_comp -> . expressions func_call_comp
    (61) func_call_comp -> . COMMA expressions func_call_comp
    (62) func_call_comp -> . empty
    (63) expressions -> . expressions_comp
    (93) empty -> .
    (64) expressions_comp -> . expression_comp_2
    (65) expressions_comp -> . expression_comp_2 OR expressions_comp
    (66) expression_comp_2 -> . expression_comp_3
    (67) expression_comp_2 -> . expression_comp_3 AND expression_comp_2
    (68) expression_comp_3 -> . exp
    (69) expression_comp_3 -> . exp expressions_op exp
    (76) exp -> . term
    (77) exp -> . term exp_comp
    (80) term -> . factor
    (81) term -> . factor term_comp
    (84) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (85) factor -> . variable
    (86) factor -> . func_call
    (87) factor -> . CT_INT
    (88) factor -> . CT_FLOAT
    (89) factor -> . CT_CHAR
    (90) variable -> . ID
    (91) variable -> . ID dim
    (59) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN

    COMMA           shift and go to state 120
    CLOSE_PAREN     reduce using rule 93 (empty -> .)
    OPEN_PAREN      shift and go to state 104
    CT_INT          shift and go to state 107
    CT_FLOAT        shift and go to state 108
    CT_CHAR         shift and go to state 109
    ID              shift and go to state 110

    expressions                    shift and go to state 119
    func_call_comp                 shift and go to state 161
    empty                          shift and go to state 121
    expressions_comp               shift and go to state 98
    expression_comp_2              shift and go to state 99
    expression_comp_3              shift and go to state 100
    exp                            shift and go to state 101
    term                           shift and go to state 102
    factor                         shift and go to state 103
    variable                       shift and go to state 105
    func_call                      shift and go to state 106

state 120

    (61) func_call_comp -> COMMA . expressions func_call_comp
    (63) expressions -> . expressions_comp
    (64) expressions_comp -> . expression_comp_2
    (65) expressions_comp -> . expression_comp_2 OR expressions_comp
    (66) expression_comp_2 -> . expression_comp_3
    (67) expression_comp_2 -> . expression_comp_3 AND expression_comp_2
    (68) expression_comp_3 -> . exp
    (69) expression_comp_3 -> . exp expressions_op exp
    (76) exp -> . term
    (77) exp -> . term exp_comp
    (80) term -> . factor
    (81) term -> . factor term_comp
    (84) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (85) factor -> . variable
    (86) factor -> . func_call
    (87) factor -> . CT_INT
    (88) factor -> . CT_FLOAT
    (89) factor -> . CT_CHAR
    (90) variable -> . ID
    (91) variable -> . ID dim
    (59) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN

    OPEN_PAREN      shift and go to state 104
    CT_INT          shift and go to state 107
    CT_FLOAT        shift and go to state 108
    CT_CHAR         shift and go to state 109
    ID              shift and go to state 110

    expressions                    shift and go to state 162
    expressions_comp               shift and go to state 98
    expression_comp_2              shift and go to state 99
    expression_comp_3              shift and go to state 100
    exp                            shift and go to state 101
    term                           shift and go to state 102
    factor                         shift and go to state 103
    variable                       shift and go to state 105
    func_call                      shift and go to state 106

state 121

    (62) func_call_comp -> empty .

    CLOSE_PAREN     reduce using rule 62 (func_call_comp -> empty .)


state 122

    (35) ids -> ID OPEN_BRACKETS exp . CLOSE_BRACKETS OPEN_BRACKETS exp CLOSE_BRACKETS
    (36) ids -> ID OPEN_BRACKETS exp . CLOSE_BRACKETS

    CLOSE_BRACKETS  shift and go to state 163


state 123

    (5) funcs -> func_type MODULE ID add_module OPEN_PAREN funcs_params CLOSE_PAREN vars . block
    (13) block -> . OPEN_BRACES statements CLOSE_BRACES

    OPEN_BRACES     shift and go to state 39

    block                          shift and go to state 164

state 124

    (9) funcs_params -> var_type variable funcs_params_comp .

    CLOSE_PAREN     reduce using rule 9 (funcs_params -> var_type variable funcs_params_comp .)


state 125

    (11) funcs_params_comp -> COMMA . var_type ID funcs_params_comp
    (16) var_type -> . INT
    (17) var_type -> . FLOAT
    (18) var_type -> . CHAR

    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16

    var_type                       shift and go to state 165

state 126

    (12) funcs_params_comp -> empty .

    CLOSE_PAREN     reduce using rule 12 (funcs_params_comp -> empty .)


state 127

    (91) variable -> ID dim .

    COMMA           reduce using rule 91 (variable -> ID dim .)
    CLOSE_PAREN     reduce using rule 91 (variable -> ID dim .)
    MULTIPLIES      reduce using rule 91 (variable -> ID dim .)
    DIVIDE          reduce using rule 91 (variable -> ID dim .)
    PLUS            reduce using rule 91 (variable -> ID dim .)
    MINUS           reduce using rule 91 (variable -> ID dim .)
    LESS_THAN       reduce using rule 91 (variable -> ID dim .)
    LESS_THAN_EQUAL reduce using rule 91 (variable -> ID dim .)
    MORE_THAN       reduce using rule 91 (variable -> ID dim .)
    MORE_THAN_EQUAL reduce using rule 91 (variable -> ID dim .)
    EQUALS          reduce using rule 91 (variable -> ID dim .)
    NOT_EQUALS      reduce using rule 91 (variable -> ID dim .)
    AND             reduce using rule 91 (variable -> ID dim .)
    OR              reduce using rule 91 (variable -> ID dim .)
    SEMICOLON       reduce using rule 91 (variable -> ID dim .)
    OPEN_PAREN      reduce using rule 91 (variable -> ID dim .)
    CT_INT          reduce using rule 91 (variable -> ID dim .)
    CT_FLOAT        reduce using rule 91 (variable -> ID dim .)
    CT_CHAR         reduce using rule 91 (variable -> ID dim .)
    ID              reduce using rule 91 (variable -> ID dim .)
    CLOSE_BRACKETS  reduce using rule 91 (variable -> ID dim .)
    TO              reduce using rule 91 (variable -> ID dim .)
    DO              reduce using rule 91 (variable -> ID dim .)


state 128

    (92) dim -> OPEN_BRACKETS . exp CLOSE_BRACKETS
    (76) exp -> . term
    (77) exp -> . term exp_comp
    (80) term -> . factor
    (81) term -> . factor term_comp
    (84) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (85) factor -> . variable
    (86) factor -> . func_call
    (87) factor -> . CT_INT
    (88) factor -> . CT_FLOAT
    (89) factor -> . CT_CHAR
    (90) variable -> . ID
    (91) variable -> . ID dim
    (59) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN

    OPEN_PAREN      shift and go to state 104
    CT_INT          shift and go to state 107
    CT_FLOAT        shift and go to state 108
    CT_CHAR         shift and go to state 109
    ID              shift and go to state 110

    exp                            shift and go to state 166
    term                           shift and go to state 102
    factor                         shift and go to state 103
    variable                       shift and go to state 105
    func_call                      shift and go to state 106

state 129

    (8) funcs_comp -> ID add_module . OPEN_PAREN funcs_params CLOSE_PAREN vars block

    OPEN_PAREN      shift and go to state 167


state 130

    (27) var_comp_recursive -> var_type ids_dec var_comp_2 var_comp_final .

    VOID            reduce using rule 27 (var_comp_recursive -> var_type ids_dec var_comp_2 var_comp_final .)
    INT             reduce using rule 27 (var_comp_recursive -> var_type ids_dec var_comp_2 var_comp_final .)
    FLOAT           reduce using rule 27 (var_comp_recursive -> var_type ids_dec var_comp_2 var_comp_final .)
    CHAR            reduce using rule 27 (var_comp_recursive -> var_type ids_dec var_comp_2 var_comp_final .)
    MAIN            reduce using rule 27 (var_comp_recursive -> var_type ids_dec var_comp_2 var_comp_final .)
    OPEN_BRACES     reduce using rule 27 (var_comp_recursive -> var_type ids_dec var_comp_2 var_comp_final .)


state 131

    (28) var_comp_recursive -> var_type ids_dec var_comp_2 SEMICOLON . var_comp_recursive
    (29) var_comp_final -> SEMICOLON .
    (31) var_module_trans -> SEMICOLON . var_type MODULE funcs_comp
    (27) var_comp_recursive -> . var_type ids_dec var_comp_2 var_comp_final
    (28) var_comp_recursive -> . var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive
    (16) var_type -> . INT
    (17) var_type -> . FLOAT
    (18) var_type -> . CHAR

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    VOID            reduce using rule 29 (var_comp_final -> SEMICOLON .)
    MAIN            reduce using rule 29 (var_comp_final -> SEMICOLON .)
    OPEN_BRACES     reduce using rule 29 (var_comp_final -> SEMICOLON .)
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16

  ! INT             [ reduce using rule 29 (var_comp_final -> SEMICOLON .) ]
  ! FLOAT           [ reduce using rule 29 (var_comp_final -> SEMICOLON .) ]
  ! CHAR            [ reduce using rule 29 (var_comp_final -> SEMICOLON .) ]

    var_type                       shift and go to state 41
    var_comp_recursive             shift and go to state 168

state 132

    (32) ids_dec -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS .

    COMMA           reduce using rule 32 (ids_dec -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS .)
    SEMICOLON       reduce using rule 32 (ids_dec -> ID OPEN_BRACKETS CT_INT CLOSE_BRACKETS OPEN_BRACKETS CT_INT CLOSE_BRACKETS .)


state 133

    (65) expressions_comp -> expression_comp_2 OR . expressions_comp
    (64) expressions_comp -> . expression_comp_2
    (65) expressions_comp -> . expression_comp_2 OR expressions_comp
    (66) expression_comp_2 -> . expression_comp_3
    (67) expression_comp_2 -> . expression_comp_3 AND expression_comp_2
    (68) expression_comp_3 -> . exp
    (69) expression_comp_3 -> . exp expressions_op exp
    (76) exp -> . term
    (77) exp -> . term exp_comp
    (80) term -> . factor
    (81) term -> . factor term_comp
    (84) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (85) factor -> . variable
    (86) factor -> . func_call
    (87) factor -> . CT_INT
    (88) factor -> . CT_FLOAT
    (89) factor -> . CT_CHAR
    (90) variable -> . ID
    (91) variable -> . ID dim
    (59) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN

    OPEN_PAREN      shift and go to state 104
    CT_INT          shift and go to state 107
    CT_FLOAT        shift and go to state 108
    CT_CHAR         shift and go to state 109
    ID              shift and go to state 110

    expression_comp_2              shift and go to state 99
    expressions_comp               shift and go to state 169
    expression_comp_3              shift and go to state 100
    exp                            shift and go to state 101
    term                           shift and go to state 102
    factor                         shift and go to state 103
    variable                       shift and go to state 105
    func_call                      shift and go to state 106

state 134

    (67) expression_comp_2 -> expression_comp_3 AND . expression_comp_2
    (66) expression_comp_2 -> . expression_comp_3
    (67) expression_comp_2 -> . expression_comp_3 AND expression_comp_2
    (68) expression_comp_3 -> . exp
    (69) expression_comp_3 -> . exp expressions_op exp
    (76) exp -> . term
    (77) exp -> . term exp_comp
    (80) term -> . factor
    (81) term -> . factor term_comp
    (84) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (85) factor -> . variable
    (86) factor -> . func_call
    (87) factor -> . CT_INT
    (88) factor -> . CT_FLOAT
    (89) factor -> . CT_CHAR
    (90) variable -> . ID
    (91) variable -> . ID dim
    (59) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN

    OPEN_PAREN      shift and go to state 104
    CT_INT          shift and go to state 107
    CT_FLOAT        shift and go to state 108
    CT_CHAR         shift and go to state 109
    ID              shift and go to state 110

    expression_comp_3              shift and go to state 100
    expression_comp_2              shift and go to state 170
    exp                            shift and go to state 101
    term                           shift and go to state 102
    factor                         shift and go to state 103
    variable                       shift and go to state 105
    func_call                      shift and go to state 106

state 135

    (69) expression_comp_3 -> exp expressions_op . exp
    (76) exp -> . term
    (77) exp -> . term exp_comp
    (80) term -> . factor
    (81) term -> . factor term_comp
    (84) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (85) factor -> . variable
    (86) factor -> . func_call
    (87) factor -> . CT_INT
    (88) factor -> . CT_FLOAT
    (89) factor -> . CT_CHAR
    (90) variable -> . ID
    (91) variable -> . ID dim
    (59) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN

    OPEN_PAREN      shift and go to state 104
    CT_INT          shift and go to state 107
    CT_FLOAT        shift and go to state 108
    CT_CHAR         shift and go to state 109
    ID              shift and go to state 110

    exp                            shift and go to state 171
    term                           shift and go to state 102
    factor                         shift and go to state 103
    variable                       shift and go to state 105
    func_call                      shift and go to state 106

state 136

    (70) expressions_op -> LESS_THAN .

    OPEN_PAREN      reduce using rule 70 (expressions_op -> LESS_THAN .)
    CT_INT          reduce using rule 70 (expressions_op -> LESS_THAN .)
    CT_FLOAT        reduce using rule 70 (expressions_op -> LESS_THAN .)
    CT_CHAR         reduce using rule 70 (expressions_op -> LESS_THAN .)
    ID              reduce using rule 70 (expressions_op -> LESS_THAN .)


state 137

    (71) expressions_op -> LESS_THAN_EQUAL .

    OPEN_PAREN      reduce using rule 71 (expressions_op -> LESS_THAN_EQUAL .)
    CT_INT          reduce using rule 71 (expressions_op -> LESS_THAN_EQUAL .)
    CT_FLOAT        reduce using rule 71 (expressions_op -> LESS_THAN_EQUAL .)
    CT_CHAR         reduce using rule 71 (expressions_op -> LESS_THAN_EQUAL .)
    ID              reduce using rule 71 (expressions_op -> LESS_THAN_EQUAL .)


state 138

    (72) expressions_op -> MORE_THAN .

    OPEN_PAREN      reduce using rule 72 (expressions_op -> MORE_THAN .)
    CT_INT          reduce using rule 72 (expressions_op -> MORE_THAN .)
    CT_FLOAT        reduce using rule 72 (expressions_op -> MORE_THAN .)
    CT_CHAR         reduce using rule 72 (expressions_op -> MORE_THAN .)
    ID              reduce using rule 72 (expressions_op -> MORE_THAN .)


state 139

    (73) expressions_op -> MORE_THAN_EQUAL .

    OPEN_PAREN      reduce using rule 73 (expressions_op -> MORE_THAN_EQUAL .)
    CT_INT          reduce using rule 73 (expressions_op -> MORE_THAN_EQUAL .)
    CT_FLOAT        reduce using rule 73 (expressions_op -> MORE_THAN_EQUAL .)
    CT_CHAR         reduce using rule 73 (expressions_op -> MORE_THAN_EQUAL .)
    ID              reduce using rule 73 (expressions_op -> MORE_THAN_EQUAL .)


state 140

    (74) expressions_op -> EQUALS .

    OPEN_PAREN      reduce using rule 74 (expressions_op -> EQUALS .)
    CT_INT          reduce using rule 74 (expressions_op -> EQUALS .)
    CT_FLOAT        reduce using rule 74 (expressions_op -> EQUALS .)
    CT_CHAR         reduce using rule 74 (expressions_op -> EQUALS .)
    ID              reduce using rule 74 (expressions_op -> EQUALS .)


state 141

    (75) expressions_op -> NOT_EQUALS .

    OPEN_PAREN      reduce using rule 75 (expressions_op -> NOT_EQUALS .)
    CT_INT          reduce using rule 75 (expressions_op -> NOT_EQUALS .)
    CT_FLOAT        reduce using rule 75 (expressions_op -> NOT_EQUALS .)
    CT_CHAR         reduce using rule 75 (expressions_op -> NOT_EQUALS .)
    ID              reduce using rule 75 (expressions_op -> NOT_EQUALS .)


state 142

    (77) exp -> term exp_comp .

    LESS_THAN       reduce using rule 77 (exp -> term exp_comp .)
    LESS_THAN_EQUAL reduce using rule 77 (exp -> term exp_comp .)
    MORE_THAN       reduce using rule 77 (exp -> term exp_comp .)
    MORE_THAN_EQUAL reduce using rule 77 (exp -> term exp_comp .)
    EQUALS          reduce using rule 77 (exp -> term exp_comp .)
    NOT_EQUALS      reduce using rule 77 (exp -> term exp_comp .)
    AND             reduce using rule 77 (exp -> term exp_comp .)
    OR              reduce using rule 77 (exp -> term exp_comp .)
    SEMICOLON       reduce using rule 77 (exp -> term exp_comp .)
    COMMA           reduce using rule 77 (exp -> term exp_comp .)
    CLOSE_PAREN     reduce using rule 77 (exp -> term exp_comp .)
    OPEN_PAREN      reduce using rule 77 (exp -> term exp_comp .)
    CT_INT          reduce using rule 77 (exp -> term exp_comp .)
    CT_FLOAT        reduce using rule 77 (exp -> term exp_comp .)
    CT_CHAR         reduce using rule 77 (exp -> term exp_comp .)
    ID              reduce using rule 77 (exp -> term exp_comp .)
    CLOSE_BRACKETS  reduce using rule 77 (exp -> term exp_comp .)
    TO              reduce using rule 77 (exp -> term exp_comp .)
    DO              reduce using rule 77 (exp -> term exp_comp .)


state 143

    (78) exp_comp -> PLUS . exp
    (76) exp -> . term
    (77) exp -> . term exp_comp
    (80) term -> . factor
    (81) term -> . factor term_comp
    (84) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (85) factor -> . variable
    (86) factor -> . func_call
    (87) factor -> . CT_INT
    (88) factor -> . CT_FLOAT
    (89) factor -> . CT_CHAR
    (90) variable -> . ID
    (91) variable -> . ID dim
    (59) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN

    OPEN_PAREN      shift and go to state 104
    CT_INT          shift and go to state 107
    CT_FLOAT        shift and go to state 108
    CT_CHAR         shift and go to state 109
    ID              shift and go to state 110

    exp                            shift and go to state 172
    term                           shift and go to state 102
    factor                         shift and go to state 103
    variable                       shift and go to state 105
    func_call                      shift and go to state 106

state 144

    (79) exp_comp -> MINUS . exp
    (76) exp -> . term
    (77) exp -> . term exp_comp
    (80) term -> . factor
    (81) term -> . factor term_comp
    (84) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (85) factor -> . variable
    (86) factor -> . func_call
    (87) factor -> . CT_INT
    (88) factor -> . CT_FLOAT
    (89) factor -> . CT_CHAR
    (90) variable -> . ID
    (91) variable -> . ID dim
    (59) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN

    OPEN_PAREN      shift and go to state 104
    CT_INT          shift and go to state 107
    CT_FLOAT        shift and go to state 108
    CT_CHAR         shift and go to state 109
    ID              shift and go to state 110

    exp                            shift and go to state 173
    term                           shift and go to state 102
    factor                         shift and go to state 103
    variable                       shift and go to state 105
    func_call                      shift and go to state 106

state 145

    (81) term -> factor term_comp .

    PLUS            reduce using rule 81 (term -> factor term_comp .)
    MINUS           reduce using rule 81 (term -> factor term_comp .)
    LESS_THAN       reduce using rule 81 (term -> factor term_comp .)
    LESS_THAN_EQUAL reduce using rule 81 (term -> factor term_comp .)
    MORE_THAN       reduce using rule 81 (term -> factor term_comp .)
    MORE_THAN_EQUAL reduce using rule 81 (term -> factor term_comp .)
    EQUALS          reduce using rule 81 (term -> factor term_comp .)
    NOT_EQUALS      reduce using rule 81 (term -> factor term_comp .)
    AND             reduce using rule 81 (term -> factor term_comp .)
    OR              reduce using rule 81 (term -> factor term_comp .)
    SEMICOLON       reduce using rule 81 (term -> factor term_comp .)
    COMMA           reduce using rule 81 (term -> factor term_comp .)
    CLOSE_PAREN     reduce using rule 81 (term -> factor term_comp .)
    OPEN_PAREN      reduce using rule 81 (term -> factor term_comp .)
    CT_INT          reduce using rule 81 (term -> factor term_comp .)
    CT_FLOAT        reduce using rule 81 (term -> factor term_comp .)
    CT_CHAR         reduce using rule 81 (term -> factor term_comp .)
    ID              reduce using rule 81 (term -> factor term_comp .)
    CLOSE_BRACKETS  reduce using rule 81 (term -> factor term_comp .)
    TO              reduce using rule 81 (term -> factor term_comp .)
    DO              reduce using rule 81 (term -> factor term_comp .)


state 146

    (82) term_comp -> MULTIPLIES . term
    (80) term -> . factor
    (81) term -> . factor term_comp
    (84) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (85) factor -> . variable
    (86) factor -> . func_call
    (87) factor -> . CT_INT
    (88) factor -> . CT_FLOAT
    (89) factor -> . CT_CHAR
    (90) variable -> . ID
    (91) variable -> . ID dim
    (59) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN

    OPEN_PAREN      shift and go to state 104
    CT_INT          shift and go to state 107
    CT_FLOAT        shift and go to state 108
    CT_CHAR         shift and go to state 109
    ID              shift and go to state 110

    term                           shift and go to state 174
    factor                         shift and go to state 103
    variable                       shift and go to state 105
    func_call                      shift and go to state 106

state 147

    (83) term_comp -> DIVIDE . term
    (80) term -> . factor
    (81) term -> . factor term_comp
    (84) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (85) factor -> . variable
    (86) factor -> . func_call
    (87) factor -> . CT_INT
    (88) factor -> . CT_FLOAT
    (89) factor -> . CT_CHAR
    (90) variable -> . ID
    (91) variable -> . ID dim
    (59) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN

    OPEN_PAREN      shift and go to state 104
    CT_INT          shift and go to state 107
    CT_FLOAT        shift and go to state 108
    CT_CHAR         shift and go to state 109
    ID              shift and go to state 110

    term                           shift and go to state 175
    factor                         shift and go to state 103
    variable                       shift and go to state 105
    func_call                      shift and go to state 106

state 148

    (84) factor -> OPEN_PAREN expressions . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 176


state 149

    (46) read -> READ OPEN_PAREN ids read_comp . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 177


state 150

    (47) read_comp -> COMMA . ids read_comp
    (35) ids -> . ID OPEN_BRACKETS exp CLOSE_BRACKETS OPEN_BRACKETS exp CLOSE_BRACKETS
    (36) ids -> . ID OPEN_BRACKETS exp CLOSE_BRACKETS
    (37) ids -> . ID

    ID              shift and go to state 81

    ids                            shift and go to state 178

state 151

    (48) read_comp -> empty .

    CLOSE_PAREN     reduce using rule 48 (read_comp -> empty .)


state 152

    (49) write -> WRITE OPEN_PAREN CT_STRING write_comp . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 179


state 153

    (51) write_comp -> COMMA . CT_STRING write_comp
    (52) write_comp -> COMMA . expressions write_comp
    (63) expressions -> . expressions_comp
    (64) expressions_comp -> . expression_comp_2
    (65) expressions_comp -> . expression_comp_2 OR expressions_comp
    (66) expression_comp_2 -> . expression_comp_3
    (67) expression_comp_2 -> . expression_comp_3 AND expression_comp_2
    (68) expression_comp_3 -> . exp
    (69) expression_comp_3 -> . exp expressions_op exp
    (76) exp -> . term
    (77) exp -> . term exp_comp
    (80) term -> . factor
    (81) term -> . factor term_comp
    (84) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (85) factor -> . variable
    (86) factor -> . func_call
    (87) factor -> . CT_INT
    (88) factor -> . CT_FLOAT
    (89) factor -> . CT_CHAR
    (90) variable -> . ID
    (91) variable -> . ID dim
    (59) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN

    CT_STRING       shift and go to state 180
    OPEN_PAREN      shift and go to state 104
    CT_INT          shift and go to state 107
    CT_FLOAT        shift and go to state 108
    CT_CHAR         shift and go to state 109
    ID              shift and go to state 110

    expressions                    shift and go to state 181
    expressions_comp               shift and go to state 98
    expression_comp_2              shift and go to state 99
    expression_comp_3              shift and go to state 100
    exp                            shift and go to state 101
    term                           shift and go to state 102
    factor                         shift and go to state 103
    variable                       shift and go to state 105
    func_call                      shift and go to state 106

state 154

    (53) write_comp -> empty .

    CLOSE_PAREN     reduce using rule 53 (write_comp -> empty .)


state 155

    (50) write -> WRITE OPEN_PAREN expressions write_comp . CLOSE_PAREN

    CLOSE_PAREN     shift and go to state 182


state 156

    (54) condition -> IF OPEN_PAREN expressions CLOSE_PAREN . THEN block ELSE block
    (55) condition -> IF OPEN_PAREN expressions CLOSE_PAREN . THEN block

    THEN            shift and go to state 183


state 157

    (56) condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN . DO block

    DO              shift and go to state 184


state 158

    (57) condition -> FOR ids ASSIGN expressions . TO expressions DO block

    TO              shift and go to state 185


state 159

    (58) return -> RETURN OPEN_PAREN exp CLOSE_PAREN .

    SEMICOLON       reduce using rule 58 (return -> RETURN OPEN_PAREN exp CLOSE_PAREN .)


state 160

    (59) func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN .

    SEMICOLON       reduce using rule 59 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN .)
    MULTIPLIES      reduce using rule 59 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN .)
    DIVIDE          reduce using rule 59 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN .)
    PLUS            reduce using rule 59 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN .)
    MINUS           reduce using rule 59 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN .)
    LESS_THAN       reduce using rule 59 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN .)
    LESS_THAN_EQUAL reduce using rule 59 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN .)
    MORE_THAN       reduce using rule 59 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN .)
    MORE_THAN_EQUAL reduce using rule 59 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN .)
    EQUALS          reduce using rule 59 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN .)
    NOT_EQUALS      reduce using rule 59 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN .)
    AND             reduce using rule 59 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN .)
    OR              reduce using rule 59 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN .)
    COMMA           reduce using rule 59 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 59 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 59 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN .)
    CT_INT          reduce using rule 59 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN .)
    CT_FLOAT        reduce using rule 59 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN .)
    CT_CHAR         reduce using rule 59 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN .)
    ID              reduce using rule 59 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN .)
    CLOSE_BRACKETS  reduce using rule 59 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN .)
    TO              reduce using rule 59 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN .)
    DO              reduce using rule 59 (func_call -> ID OPEN_PAREN func_call_comp CLOSE_PAREN .)


state 161

    (60) func_call_comp -> expressions func_call_comp .

    CLOSE_PAREN     reduce using rule 60 (func_call_comp -> expressions func_call_comp .)


state 162

    (61) func_call_comp -> COMMA expressions . func_call_comp
    (60) func_call_comp -> . expressions func_call_comp
    (61) func_call_comp -> . COMMA expressions func_call_comp
    (62) func_call_comp -> . empty
    (63) expressions -> . expressions_comp
    (93) empty -> .
    (64) expressions_comp -> . expression_comp_2
    (65) expressions_comp -> . expression_comp_2 OR expressions_comp
    (66) expression_comp_2 -> . expression_comp_3
    (67) expression_comp_2 -> . expression_comp_3 AND expression_comp_2
    (68) expression_comp_3 -> . exp
    (69) expression_comp_3 -> . exp expressions_op exp
    (76) exp -> . term
    (77) exp -> . term exp_comp
    (80) term -> . factor
    (81) term -> . factor term_comp
    (84) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (85) factor -> . variable
    (86) factor -> . func_call
    (87) factor -> . CT_INT
    (88) factor -> . CT_FLOAT
    (89) factor -> . CT_CHAR
    (90) variable -> . ID
    (91) variable -> . ID dim
    (59) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN

    COMMA           shift and go to state 120
    CLOSE_PAREN     reduce using rule 93 (empty -> .)
    OPEN_PAREN      shift and go to state 104
    CT_INT          shift and go to state 107
    CT_FLOAT        shift and go to state 108
    CT_CHAR         shift and go to state 109
    ID              shift and go to state 110

    expressions                    shift and go to state 119
    func_call_comp                 shift and go to state 186
    empty                          shift and go to state 121
    expressions_comp               shift and go to state 98
    expression_comp_2              shift and go to state 99
    expression_comp_3              shift and go to state 100
    exp                            shift and go to state 101
    term                           shift and go to state 102
    factor                         shift and go to state 103
    variable                       shift and go to state 105
    func_call                      shift and go to state 106

state 163

    (35) ids -> ID OPEN_BRACKETS exp CLOSE_BRACKETS . OPEN_BRACKETS exp CLOSE_BRACKETS
    (36) ids -> ID OPEN_BRACKETS exp CLOSE_BRACKETS .

    OPEN_BRACKETS   shift and go to state 187
    ASSIGN          reduce using rule 36 (ids -> ID OPEN_BRACKETS exp CLOSE_BRACKETS .)
    COMMA           reduce using rule 36 (ids -> ID OPEN_BRACKETS exp CLOSE_BRACKETS .)
    CLOSE_PAREN     reduce using rule 36 (ids -> ID OPEN_BRACKETS exp CLOSE_BRACKETS .)


state 164

    (5) funcs -> func_type MODULE ID add_module OPEN_PAREN funcs_params CLOSE_PAREN vars block .

    MAIN            reduce using rule 5 (funcs -> func_type MODULE ID add_module OPEN_PAREN funcs_params CLOSE_PAREN vars block .)


state 165

    (11) funcs_params_comp -> COMMA var_type . ID funcs_params_comp

    ID              shift and go to state 188


state 166

    (92) dim -> OPEN_BRACKETS exp . CLOSE_BRACKETS

    CLOSE_BRACKETS  shift and go to state 189


state 167

    (8) funcs_comp -> ID add_module OPEN_PAREN . funcs_params CLOSE_PAREN vars block
    (9) funcs_params -> . var_type variable funcs_params_comp
    (10) funcs_params -> . empty
    (16) var_type -> . INT
    (17) var_type -> . FLOAT
    (18) var_type -> . CHAR
    (93) empty -> .

    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16
    CLOSE_PAREN     reduce using rule 93 (empty -> .)

    funcs_params                   shift and go to state 190
    var_type                       shift and go to state 63
    empty                          shift and go to state 64

state 168

    (28) var_comp_recursive -> var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive .

    VOID            reduce using rule 28 (var_comp_recursive -> var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive .)
    INT             reduce using rule 28 (var_comp_recursive -> var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive .)
    FLOAT           reduce using rule 28 (var_comp_recursive -> var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive .)
    CHAR            reduce using rule 28 (var_comp_recursive -> var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive .)
    MAIN            reduce using rule 28 (var_comp_recursive -> var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive .)
    OPEN_BRACES     reduce using rule 28 (var_comp_recursive -> var_type ids_dec var_comp_2 SEMICOLON var_comp_recursive .)


state 169

    (65) expressions_comp -> expression_comp_2 OR expressions_comp .

    SEMICOLON       reduce using rule 65 (expressions_comp -> expression_comp_2 OR expressions_comp .)
    COMMA           reduce using rule 65 (expressions_comp -> expression_comp_2 OR expressions_comp .)
    CLOSE_PAREN     reduce using rule 65 (expressions_comp -> expression_comp_2 OR expressions_comp .)
    OPEN_PAREN      reduce using rule 65 (expressions_comp -> expression_comp_2 OR expressions_comp .)
    CT_INT          reduce using rule 65 (expressions_comp -> expression_comp_2 OR expressions_comp .)
    CT_FLOAT        reduce using rule 65 (expressions_comp -> expression_comp_2 OR expressions_comp .)
    CT_CHAR         reduce using rule 65 (expressions_comp -> expression_comp_2 OR expressions_comp .)
    ID              reduce using rule 65 (expressions_comp -> expression_comp_2 OR expressions_comp .)
    TO              reduce using rule 65 (expressions_comp -> expression_comp_2 OR expressions_comp .)
    DO              reduce using rule 65 (expressions_comp -> expression_comp_2 OR expressions_comp .)


state 170

    (67) expression_comp_2 -> expression_comp_3 AND expression_comp_2 .

    OR              reduce using rule 67 (expression_comp_2 -> expression_comp_3 AND expression_comp_2 .)
    SEMICOLON       reduce using rule 67 (expression_comp_2 -> expression_comp_3 AND expression_comp_2 .)
    COMMA           reduce using rule 67 (expression_comp_2 -> expression_comp_3 AND expression_comp_2 .)
    CLOSE_PAREN     reduce using rule 67 (expression_comp_2 -> expression_comp_3 AND expression_comp_2 .)
    OPEN_PAREN      reduce using rule 67 (expression_comp_2 -> expression_comp_3 AND expression_comp_2 .)
    CT_INT          reduce using rule 67 (expression_comp_2 -> expression_comp_3 AND expression_comp_2 .)
    CT_FLOAT        reduce using rule 67 (expression_comp_2 -> expression_comp_3 AND expression_comp_2 .)
    CT_CHAR         reduce using rule 67 (expression_comp_2 -> expression_comp_3 AND expression_comp_2 .)
    ID              reduce using rule 67 (expression_comp_2 -> expression_comp_3 AND expression_comp_2 .)
    TO              reduce using rule 67 (expression_comp_2 -> expression_comp_3 AND expression_comp_2 .)
    DO              reduce using rule 67 (expression_comp_2 -> expression_comp_3 AND expression_comp_2 .)


state 171

    (69) expression_comp_3 -> exp expressions_op exp .

    AND             reduce using rule 69 (expression_comp_3 -> exp expressions_op exp .)
    OR              reduce using rule 69 (expression_comp_3 -> exp expressions_op exp .)
    SEMICOLON       reduce using rule 69 (expression_comp_3 -> exp expressions_op exp .)
    COMMA           reduce using rule 69 (expression_comp_3 -> exp expressions_op exp .)
    CLOSE_PAREN     reduce using rule 69 (expression_comp_3 -> exp expressions_op exp .)
    OPEN_PAREN      reduce using rule 69 (expression_comp_3 -> exp expressions_op exp .)
    CT_INT          reduce using rule 69 (expression_comp_3 -> exp expressions_op exp .)
    CT_FLOAT        reduce using rule 69 (expression_comp_3 -> exp expressions_op exp .)
    CT_CHAR         reduce using rule 69 (expression_comp_3 -> exp expressions_op exp .)
    ID              reduce using rule 69 (expression_comp_3 -> exp expressions_op exp .)
    TO              reduce using rule 69 (expression_comp_3 -> exp expressions_op exp .)
    DO              reduce using rule 69 (expression_comp_3 -> exp expressions_op exp .)


state 172

    (78) exp_comp -> PLUS exp .

    LESS_THAN       reduce using rule 78 (exp_comp -> PLUS exp .)
    LESS_THAN_EQUAL reduce using rule 78 (exp_comp -> PLUS exp .)
    MORE_THAN       reduce using rule 78 (exp_comp -> PLUS exp .)
    MORE_THAN_EQUAL reduce using rule 78 (exp_comp -> PLUS exp .)
    EQUALS          reduce using rule 78 (exp_comp -> PLUS exp .)
    NOT_EQUALS      reduce using rule 78 (exp_comp -> PLUS exp .)
    AND             reduce using rule 78 (exp_comp -> PLUS exp .)
    OR              reduce using rule 78 (exp_comp -> PLUS exp .)
    SEMICOLON       reduce using rule 78 (exp_comp -> PLUS exp .)
    COMMA           reduce using rule 78 (exp_comp -> PLUS exp .)
    CLOSE_PAREN     reduce using rule 78 (exp_comp -> PLUS exp .)
    OPEN_PAREN      reduce using rule 78 (exp_comp -> PLUS exp .)
    CT_INT          reduce using rule 78 (exp_comp -> PLUS exp .)
    CT_FLOAT        reduce using rule 78 (exp_comp -> PLUS exp .)
    CT_CHAR         reduce using rule 78 (exp_comp -> PLUS exp .)
    ID              reduce using rule 78 (exp_comp -> PLUS exp .)
    CLOSE_BRACKETS  reduce using rule 78 (exp_comp -> PLUS exp .)
    TO              reduce using rule 78 (exp_comp -> PLUS exp .)
    DO              reduce using rule 78 (exp_comp -> PLUS exp .)


state 173

    (79) exp_comp -> MINUS exp .

    LESS_THAN       reduce using rule 79 (exp_comp -> MINUS exp .)
    LESS_THAN_EQUAL reduce using rule 79 (exp_comp -> MINUS exp .)
    MORE_THAN       reduce using rule 79 (exp_comp -> MINUS exp .)
    MORE_THAN_EQUAL reduce using rule 79 (exp_comp -> MINUS exp .)
    EQUALS          reduce using rule 79 (exp_comp -> MINUS exp .)
    NOT_EQUALS      reduce using rule 79 (exp_comp -> MINUS exp .)
    AND             reduce using rule 79 (exp_comp -> MINUS exp .)
    OR              reduce using rule 79 (exp_comp -> MINUS exp .)
    SEMICOLON       reduce using rule 79 (exp_comp -> MINUS exp .)
    COMMA           reduce using rule 79 (exp_comp -> MINUS exp .)
    CLOSE_PAREN     reduce using rule 79 (exp_comp -> MINUS exp .)
    OPEN_PAREN      reduce using rule 79 (exp_comp -> MINUS exp .)
    CT_INT          reduce using rule 79 (exp_comp -> MINUS exp .)
    CT_FLOAT        reduce using rule 79 (exp_comp -> MINUS exp .)
    CT_CHAR         reduce using rule 79 (exp_comp -> MINUS exp .)
    ID              reduce using rule 79 (exp_comp -> MINUS exp .)
    CLOSE_BRACKETS  reduce using rule 79 (exp_comp -> MINUS exp .)
    TO              reduce using rule 79 (exp_comp -> MINUS exp .)
    DO              reduce using rule 79 (exp_comp -> MINUS exp .)


state 174

    (82) term_comp -> MULTIPLIES term .

    PLUS            reduce using rule 82 (term_comp -> MULTIPLIES term .)
    MINUS           reduce using rule 82 (term_comp -> MULTIPLIES term .)
    LESS_THAN       reduce using rule 82 (term_comp -> MULTIPLIES term .)
    LESS_THAN_EQUAL reduce using rule 82 (term_comp -> MULTIPLIES term .)
    MORE_THAN       reduce using rule 82 (term_comp -> MULTIPLIES term .)
    MORE_THAN_EQUAL reduce using rule 82 (term_comp -> MULTIPLIES term .)
    EQUALS          reduce using rule 82 (term_comp -> MULTIPLIES term .)
    NOT_EQUALS      reduce using rule 82 (term_comp -> MULTIPLIES term .)
    AND             reduce using rule 82 (term_comp -> MULTIPLIES term .)
    OR              reduce using rule 82 (term_comp -> MULTIPLIES term .)
    SEMICOLON       reduce using rule 82 (term_comp -> MULTIPLIES term .)
    COMMA           reduce using rule 82 (term_comp -> MULTIPLIES term .)
    CLOSE_PAREN     reduce using rule 82 (term_comp -> MULTIPLIES term .)
    OPEN_PAREN      reduce using rule 82 (term_comp -> MULTIPLIES term .)
    CT_INT          reduce using rule 82 (term_comp -> MULTIPLIES term .)
    CT_FLOAT        reduce using rule 82 (term_comp -> MULTIPLIES term .)
    CT_CHAR         reduce using rule 82 (term_comp -> MULTIPLIES term .)
    ID              reduce using rule 82 (term_comp -> MULTIPLIES term .)
    CLOSE_BRACKETS  reduce using rule 82 (term_comp -> MULTIPLIES term .)
    TO              reduce using rule 82 (term_comp -> MULTIPLIES term .)
    DO              reduce using rule 82 (term_comp -> MULTIPLIES term .)


state 175

    (83) term_comp -> DIVIDE term .

    PLUS            reduce using rule 83 (term_comp -> DIVIDE term .)
    MINUS           reduce using rule 83 (term_comp -> DIVIDE term .)
    LESS_THAN       reduce using rule 83 (term_comp -> DIVIDE term .)
    LESS_THAN_EQUAL reduce using rule 83 (term_comp -> DIVIDE term .)
    MORE_THAN       reduce using rule 83 (term_comp -> DIVIDE term .)
    MORE_THAN_EQUAL reduce using rule 83 (term_comp -> DIVIDE term .)
    EQUALS          reduce using rule 83 (term_comp -> DIVIDE term .)
    NOT_EQUALS      reduce using rule 83 (term_comp -> DIVIDE term .)
    AND             reduce using rule 83 (term_comp -> DIVIDE term .)
    OR              reduce using rule 83 (term_comp -> DIVIDE term .)
    SEMICOLON       reduce using rule 83 (term_comp -> DIVIDE term .)
    COMMA           reduce using rule 83 (term_comp -> DIVIDE term .)
    CLOSE_PAREN     reduce using rule 83 (term_comp -> DIVIDE term .)
    OPEN_PAREN      reduce using rule 83 (term_comp -> DIVIDE term .)
    CT_INT          reduce using rule 83 (term_comp -> DIVIDE term .)
    CT_FLOAT        reduce using rule 83 (term_comp -> DIVIDE term .)
    CT_CHAR         reduce using rule 83 (term_comp -> DIVIDE term .)
    ID              reduce using rule 83 (term_comp -> DIVIDE term .)
    CLOSE_BRACKETS  reduce using rule 83 (term_comp -> DIVIDE term .)
    TO              reduce using rule 83 (term_comp -> DIVIDE term .)
    DO              reduce using rule 83 (term_comp -> DIVIDE term .)


state 176

    (84) factor -> OPEN_PAREN expressions CLOSE_PAREN .

    MULTIPLIES      reduce using rule 84 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    DIVIDE          reduce using rule 84 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    PLUS            reduce using rule 84 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    MINUS           reduce using rule 84 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    LESS_THAN       reduce using rule 84 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    LESS_THAN_EQUAL reduce using rule 84 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    MORE_THAN       reduce using rule 84 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    MORE_THAN_EQUAL reduce using rule 84 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    EQUALS          reduce using rule 84 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    NOT_EQUALS      reduce using rule 84 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    AND             reduce using rule 84 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    OR              reduce using rule 84 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    SEMICOLON       reduce using rule 84 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    COMMA           reduce using rule 84 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    CLOSE_PAREN     reduce using rule 84 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    OPEN_PAREN      reduce using rule 84 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    CT_INT          reduce using rule 84 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    CT_FLOAT        reduce using rule 84 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    CT_CHAR         reduce using rule 84 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    ID              reduce using rule 84 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    CLOSE_BRACKETS  reduce using rule 84 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    TO              reduce using rule 84 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)
    DO              reduce using rule 84 (factor -> OPEN_PAREN expressions CLOSE_PAREN .)


state 177

    (46) read -> READ OPEN_PAREN ids read_comp CLOSE_PAREN .

    SEMICOLON       reduce using rule 46 (read -> READ OPEN_PAREN ids read_comp CLOSE_PAREN .)


state 178

    (47) read_comp -> COMMA ids . read_comp
    (47) read_comp -> . COMMA ids read_comp
    (48) read_comp -> . empty
    (93) empty -> .

    COMMA           shift and go to state 150
    CLOSE_PAREN     reduce using rule 93 (empty -> .)

    read_comp                      shift and go to state 191
    empty                          shift and go to state 151

state 179

    (49) write -> WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN .

    SEMICOLON       reduce using rule 49 (write -> WRITE OPEN_PAREN CT_STRING write_comp CLOSE_PAREN .)


state 180

    (51) write_comp -> COMMA CT_STRING . write_comp
    (51) write_comp -> . COMMA CT_STRING write_comp
    (52) write_comp -> . COMMA expressions write_comp
    (53) write_comp -> . empty
    (93) empty -> .

    COMMA           shift and go to state 153
    CLOSE_PAREN     reduce using rule 93 (empty -> .)

    write_comp                     shift and go to state 192
    empty                          shift and go to state 154

state 181

    (52) write_comp -> COMMA expressions . write_comp
    (51) write_comp -> . COMMA CT_STRING write_comp
    (52) write_comp -> . COMMA expressions write_comp
    (53) write_comp -> . empty
    (93) empty -> .

    COMMA           shift and go to state 153
    CLOSE_PAREN     reduce using rule 93 (empty -> .)

    write_comp                     shift and go to state 193
    empty                          shift and go to state 154

state 182

    (50) write -> WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN .

    SEMICOLON       reduce using rule 50 (write -> WRITE OPEN_PAREN expressions write_comp CLOSE_PAREN .)


state 183

    (54) condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN . block ELSE block
    (55) condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN . block
    (13) block -> . OPEN_BRACES statements CLOSE_BRACES

    OPEN_BRACES     shift and go to state 39

    block                          shift and go to state 194

state 184

    (56) condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN DO . block
    (13) block -> . OPEN_BRACES statements CLOSE_BRACES

    OPEN_BRACES     shift and go to state 39

    block                          shift and go to state 195

state 185

    (57) condition -> FOR ids ASSIGN expressions TO . expressions DO block
    (63) expressions -> . expressions_comp
    (64) expressions_comp -> . expression_comp_2
    (65) expressions_comp -> . expression_comp_2 OR expressions_comp
    (66) expression_comp_2 -> . expression_comp_3
    (67) expression_comp_2 -> . expression_comp_3 AND expression_comp_2
    (68) expression_comp_3 -> . exp
    (69) expression_comp_3 -> . exp expressions_op exp
    (76) exp -> . term
    (77) exp -> . term exp_comp
    (80) term -> . factor
    (81) term -> . factor term_comp
    (84) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (85) factor -> . variable
    (86) factor -> . func_call
    (87) factor -> . CT_INT
    (88) factor -> . CT_FLOAT
    (89) factor -> . CT_CHAR
    (90) variable -> . ID
    (91) variable -> . ID dim
    (59) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN

    OPEN_PAREN      shift and go to state 104
    CT_INT          shift and go to state 107
    CT_FLOAT        shift and go to state 108
    CT_CHAR         shift and go to state 109
    ID              shift and go to state 110

    expressions                    shift and go to state 196
    expressions_comp               shift and go to state 98
    expression_comp_2              shift and go to state 99
    expression_comp_3              shift and go to state 100
    exp                            shift and go to state 101
    term                           shift and go to state 102
    factor                         shift and go to state 103
    variable                       shift and go to state 105
    func_call                      shift and go to state 106

state 186

    (61) func_call_comp -> COMMA expressions func_call_comp .

    CLOSE_PAREN     reduce using rule 61 (func_call_comp -> COMMA expressions func_call_comp .)


state 187

    (35) ids -> ID OPEN_BRACKETS exp CLOSE_BRACKETS OPEN_BRACKETS . exp CLOSE_BRACKETS
    (76) exp -> . term
    (77) exp -> . term exp_comp
    (80) term -> . factor
    (81) term -> . factor term_comp
    (84) factor -> . OPEN_PAREN expressions CLOSE_PAREN
    (85) factor -> . variable
    (86) factor -> . func_call
    (87) factor -> . CT_INT
    (88) factor -> . CT_FLOAT
    (89) factor -> . CT_CHAR
    (90) variable -> . ID
    (91) variable -> . ID dim
    (59) func_call -> . ID OPEN_PAREN func_call_comp CLOSE_PAREN

    OPEN_PAREN      shift and go to state 104
    CT_INT          shift and go to state 107
    CT_FLOAT        shift and go to state 108
    CT_CHAR         shift and go to state 109
    ID              shift and go to state 110

    exp                            shift and go to state 197
    term                           shift and go to state 102
    factor                         shift and go to state 103
    variable                       shift and go to state 105
    func_call                      shift and go to state 106

state 188

    (11) funcs_params_comp -> COMMA var_type ID . funcs_params_comp
    (11) funcs_params_comp -> . COMMA var_type ID funcs_params_comp
    (12) funcs_params_comp -> . empty
    (93) empty -> .

    COMMA           shift and go to state 125
    CLOSE_PAREN     reduce using rule 93 (empty -> .)

    funcs_params_comp              shift and go to state 198
    empty                          shift and go to state 126

state 189

    (92) dim -> OPEN_BRACKETS exp CLOSE_BRACKETS .

    COMMA           reduce using rule 92 (dim -> OPEN_BRACKETS exp CLOSE_BRACKETS .)
    CLOSE_PAREN     reduce using rule 92 (dim -> OPEN_BRACKETS exp CLOSE_BRACKETS .)
    MULTIPLIES      reduce using rule 92 (dim -> OPEN_BRACKETS exp CLOSE_BRACKETS .)
    DIVIDE          reduce using rule 92 (dim -> OPEN_BRACKETS exp CLOSE_BRACKETS .)
    PLUS            reduce using rule 92 (dim -> OPEN_BRACKETS exp CLOSE_BRACKETS .)
    MINUS           reduce using rule 92 (dim -> OPEN_BRACKETS exp CLOSE_BRACKETS .)
    LESS_THAN       reduce using rule 92 (dim -> OPEN_BRACKETS exp CLOSE_BRACKETS .)
    LESS_THAN_EQUAL reduce using rule 92 (dim -> OPEN_BRACKETS exp CLOSE_BRACKETS .)
    MORE_THAN       reduce using rule 92 (dim -> OPEN_BRACKETS exp CLOSE_BRACKETS .)
    MORE_THAN_EQUAL reduce using rule 92 (dim -> OPEN_BRACKETS exp CLOSE_BRACKETS .)
    EQUALS          reduce using rule 92 (dim -> OPEN_BRACKETS exp CLOSE_BRACKETS .)
    NOT_EQUALS      reduce using rule 92 (dim -> OPEN_BRACKETS exp CLOSE_BRACKETS .)
    AND             reduce using rule 92 (dim -> OPEN_BRACKETS exp CLOSE_BRACKETS .)
    OR              reduce using rule 92 (dim -> OPEN_BRACKETS exp CLOSE_BRACKETS .)
    SEMICOLON       reduce using rule 92 (dim -> OPEN_BRACKETS exp CLOSE_BRACKETS .)
    OPEN_PAREN      reduce using rule 92 (dim -> OPEN_BRACKETS exp CLOSE_BRACKETS .)
    CT_INT          reduce using rule 92 (dim -> OPEN_BRACKETS exp CLOSE_BRACKETS .)
    CT_FLOAT        reduce using rule 92 (dim -> OPEN_BRACKETS exp CLOSE_BRACKETS .)
    CT_CHAR         reduce using rule 92 (dim -> OPEN_BRACKETS exp CLOSE_BRACKETS .)
    ID              reduce using rule 92 (dim -> OPEN_BRACKETS exp CLOSE_BRACKETS .)
    CLOSE_BRACKETS  reduce using rule 92 (dim -> OPEN_BRACKETS exp CLOSE_BRACKETS .)
    TO              reduce using rule 92 (dim -> OPEN_BRACKETS exp CLOSE_BRACKETS .)
    DO              reduce using rule 92 (dim -> OPEN_BRACKETS exp CLOSE_BRACKETS .)


state 190

    (8) funcs_comp -> ID add_module OPEN_PAREN funcs_params . CLOSE_PAREN vars block

    CLOSE_PAREN     shift and go to state 199


state 191

    (47) read_comp -> COMMA ids read_comp .

    CLOSE_PAREN     reduce using rule 47 (read_comp -> COMMA ids read_comp .)


state 192

    (51) write_comp -> COMMA CT_STRING write_comp .

    CLOSE_PAREN     reduce using rule 51 (write_comp -> COMMA CT_STRING write_comp .)


state 193

    (52) write_comp -> COMMA expressions write_comp .

    CLOSE_PAREN     reduce using rule 52 (write_comp -> COMMA expressions write_comp .)


state 194

    (54) condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block . ELSE block
    (55) condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block .

    ELSE            shift and go to state 200
    READ            reduce using rule 55 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block .)
    WRITE           reduce using rule 55 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block .)
    IF              reduce using rule 55 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block .)
    WHILE           reduce using rule 55 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block .)
    FOR             reduce using rule 55 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block .)
    RETURN          reduce using rule 55 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block .)
    ID              reduce using rule 55 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block .)
    CLOSE_BRACES    reduce using rule 55 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block .)


state 195

    (56) condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN DO block .

    READ            reduce using rule 56 (condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN DO block .)
    WRITE           reduce using rule 56 (condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN DO block .)
    IF              reduce using rule 56 (condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN DO block .)
    WHILE           reduce using rule 56 (condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN DO block .)
    FOR             reduce using rule 56 (condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN DO block .)
    RETURN          reduce using rule 56 (condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN DO block .)
    ID              reduce using rule 56 (condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN DO block .)
    CLOSE_BRACES    reduce using rule 56 (condition -> WHILE OPEN_PAREN expressions CLOSE_PAREN DO block .)


state 196

    (57) condition -> FOR ids ASSIGN expressions TO expressions . DO block

    DO              shift and go to state 201


state 197

    (35) ids -> ID OPEN_BRACKETS exp CLOSE_BRACKETS OPEN_BRACKETS exp . CLOSE_BRACKETS

    CLOSE_BRACKETS  shift and go to state 202


state 198

    (11) funcs_params_comp -> COMMA var_type ID funcs_params_comp .

    CLOSE_PAREN     reduce using rule 11 (funcs_params_comp -> COMMA var_type ID funcs_params_comp .)


state 199

    (8) funcs_comp -> ID add_module OPEN_PAREN funcs_params CLOSE_PAREN . vars block
    (19) vars -> . VARS var_comp
    (20) vars -> . empty
    (93) empty -> .

    VARS            shift and go to state 7
    OPEN_BRACES     reduce using rule 93 (empty -> .)

    vars                           shift and go to state 203
    empty                          shift and go to state 8

state 200

    (54) condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE . block
    (13) block -> . OPEN_BRACES statements CLOSE_BRACES

    OPEN_BRACES     shift and go to state 39

    block                          shift and go to state 204

state 201

    (57) condition -> FOR ids ASSIGN expressions TO expressions DO . block
    (13) block -> . OPEN_BRACES statements CLOSE_BRACES

    OPEN_BRACES     shift and go to state 39

    block                          shift and go to state 205

state 202

    (35) ids -> ID OPEN_BRACKETS exp CLOSE_BRACKETS OPEN_BRACKETS exp CLOSE_BRACKETS .

    ASSIGN          reduce using rule 35 (ids -> ID OPEN_BRACKETS exp CLOSE_BRACKETS OPEN_BRACKETS exp CLOSE_BRACKETS .)
    COMMA           reduce using rule 35 (ids -> ID OPEN_BRACKETS exp CLOSE_BRACKETS OPEN_BRACKETS exp CLOSE_BRACKETS .)
    CLOSE_PAREN     reduce using rule 35 (ids -> ID OPEN_BRACKETS exp CLOSE_BRACKETS OPEN_BRACKETS exp CLOSE_BRACKETS .)


state 203

    (8) funcs_comp -> ID add_module OPEN_PAREN funcs_params CLOSE_PAREN vars . block
    (13) block -> . OPEN_BRACES statements CLOSE_BRACES

    OPEN_BRACES     shift and go to state 39

    block                          shift and go to state 206

state 204

    (54) condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block .

    READ            reduce using rule 54 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block .)
    WRITE           reduce using rule 54 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block .)
    IF              reduce using rule 54 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block .)
    WHILE           reduce using rule 54 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block .)
    FOR             reduce using rule 54 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block .)
    RETURN          reduce using rule 54 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block .)
    ID              reduce using rule 54 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block .)
    CLOSE_BRACES    reduce using rule 54 (condition -> IF OPEN_PAREN expressions CLOSE_PAREN THEN block ELSE block .)


state 205

    (57) condition -> FOR ids ASSIGN expressions TO expressions DO block .

    READ            reduce using rule 57 (condition -> FOR ids ASSIGN expressions TO expressions DO block .)
    WRITE           reduce using rule 57 (condition -> FOR ids ASSIGN expressions TO expressions DO block .)
    IF              reduce using rule 57 (condition -> FOR ids ASSIGN expressions TO expressions DO block .)
    WHILE           reduce using rule 57 (condition -> FOR ids ASSIGN expressions TO expressions DO block .)
    FOR             reduce using rule 57 (condition -> FOR ids ASSIGN expressions TO expressions DO block .)
    RETURN          reduce using rule 57 (condition -> FOR ids ASSIGN expressions TO expressions DO block .)
    ID              reduce using rule 57 (condition -> FOR ids ASSIGN expressions TO expressions DO block .)
    CLOSE_BRACES    reduce using rule 57 (condition -> FOR ids ASSIGN expressions TO expressions DO block .)


state 206

    (8) funcs_comp -> ID add_module OPEN_PAREN funcs_params CLOSE_PAREN vars block .

    VOID            reduce using rule 8 (funcs_comp -> ID add_module OPEN_PAREN funcs_params CLOSE_PAREN vars block .)
    INT             reduce using rule 8 (funcs_comp -> ID add_module OPEN_PAREN funcs_params CLOSE_PAREN vars block .)
    FLOAT           reduce using rule 8 (funcs_comp -> ID add_module OPEN_PAREN funcs_params CLOSE_PAREN vars block .)
    CHAR            reduce using rule 8 (funcs_comp -> ID add_module OPEN_PAREN funcs_params CLOSE_PAREN vars block .)
    MAIN            reduce using rule 8 (funcs_comp -> ID add_module OPEN_PAREN funcs_params CLOSE_PAREN vars block .)
    OPEN_BRACES     reduce using rule 8 (funcs_comp -> ID add_module OPEN_PAREN funcs_params CLOSE_PAREN vars block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for INT in state 34 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 34 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 34 resolved as shift
WARNING: shift/reduce conflict for OPEN_PAREN in state 110 resolved as shift
WARNING: shift/reduce conflict for INT in state 131 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 131 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 131 resolved as shift
